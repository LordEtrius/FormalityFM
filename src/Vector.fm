type Vector <A: Type>                           ~ (size: Nat) {
  nil                                           ~ (size: Nat.zero),
  ext<size: Nat>(head: A, tail: Vector(A,size)) ~ (size: Nat.succ(size)),
}

Vector.head<A: Type, size: Nat>(vector: Vector(A, Nat.succ(size))): A
  case vector {
    nil: Unit.new
    ext: vector.head
  }: case vector.size { zero: Unit, succ: A }

Vector.tail<A: Type, size: Nat>(vector: Vector(A, Nat.succ(size))): Vector(A, size)
  case vector {
    nil: Unit.new
    ext: vector.tail
  }: case vector.size { zero: Unit, succ: Vector(A, Nat.pred(vector.size)) }
