type Bits {
  nil,
  0(pred: Bits),
  1(pred: Bits),
}

Bits.inc(a: Bits): Bits
  case a {
    nil: Bits.1(Bits.nil),
    0: Bits.1(a.pred),
    1: Bits.0(Bits.inc(a.pred)),
  }

Bits.add(a: Bits, b: Bits): Bits
  case b {
    nil: a,
    0: case a {
      nil: b,
      0: Bits.0(Bits.add(a.pred, b.pred)),
      1: Bits.1(Bits.add(a.pred, b.pred)),
    },
    1: case a {
      nil: b,
      0: Bits.1(Bits.add(a.pred, b.pred)),
      1: Bits.0(Bits.add(Bits.inc(a.pred), b.pred))
    }
  }

Bits.eql(a: Bits, b: Bits): Bool
  case a {
    nil: case b {
      nil: Bool.true,
       0 : Bool.false,
       1 : Bool.false,
    },
    0: case b {
      nil: Bool.false,
       0 : Bits.eql(a.pred, b.pred),
       1 : Bool.false,
    },
    1: case b {
      nil: Bool.false,
       0 : Bool.false,
       1 : Bits.eql(a.pred, b.pred),
    }
  }

Bits.tail(a: Bits): Bits
  case a {
    nil: Bits.nil,
    0: a.pred,
    1: a.pred,
  }

Bits.show(a: Bits): String
  case a {
    nil: "",
    0: String.cons('0', Bits.show(a.pred)),
    1: String.cons('1', Bits.show(a.pred)),
  }

Bits.reverse(a: Bits): Bits
  Bits.reverse.tco(a, Bits.nil)

Bits.reverse.tco(a: Bits, r: Bits): Bits
  case a {
    nil: r,
    0: Bits.reverse.tco(a.pred, Bits.0(r)),
    1: Bits.reverse.tco(a.pred, Bits.1(r))
  }

Bits.concat(a: Bits, b: Bits): Bits
  case a {
    nil: b,
    0: Bits.0(Bits.concat(a.pred, b)),
    1: Bits.1(Bits.concat(a.pred, b))
  }

Bits.chunks_of.go(
  len   : Nat,  // length of each chunk
  bits  : Bits, // bits to be split
  need  : Nat,  // number of vals to complete chunk
  chunk : Bits  // current chunk
) : List(Bits)
  case bits {
    nil: List.cons<_>(Bits.reverse(chunk), List.nil<_>),
    0: case need {
      zero: 
        let head = Bits.reverse(chunk);
        let tail = Bits.chunks_of.go(len, bits, len, Bits.nil);
        List.cons<_>(head, tail),
      succ:
        let chunk = Bits.0(chunk);
        Bits.chunks_of.go(len, bits.pred, need.pred, chunk)
    },
    1: case need {
      zero:
        let head = Bits.reverse(chunk);
        let tail = Bits.chunks_of.go(len, bits, len, Bits.nil);
        List.cons<_>(head, tail),
      succ:
        let chunk = Bits.1(chunk);
        Bits.chunks_of.go(len, bits.pred, need.pred, chunk)
    }
  }

Bits.chunks_of(len: Nat, bits: Bits): List(Bits)
  Bits.chunks_of.go(len, bits, len, Bits.nil)

Bits.to_nat(b: Bits): Nat
  case b {
    nil: 0,
     0 : Nat.mul(2, Bits.to_nat(b.pred)),
     1 : Nat.succ(Nat.mul(2, Bits.to_nat(b.pred)))
  }

Bits.from_string(str: String): Bits
  case str{
    nil: Bits.nil
    cons: case U16.eql(str.head, Char.parse("1")){
      true : Bits.1(Bits.from_string(str.tail))
      false: Bits.0(Bits.from_string(str.tail))
      // TODO: what is this from past code? 
      //| Unit.new
    }
  }

Bits.length(xs: Bits): Nat
  Bits.length.go(xs, 0)

Bits.length.go(xs: Bits, n: Nat): Nat
  case xs {
    nil: n,
     0 : Bits.length.go(xs.pred, Nat.succ(n)),
     1 : Bits.length.go(xs.pred, Nat.succ(n))
  }

Bits.slice(len: Nat, bits: Bits): Bits
  case len {
    zero: Bits.nil,
    succ: case bits {
      nil: Bits.nil,
       0 : Bits.0(Bits.slice(len.pred, bits.pred)),
       1 : Bits.1(Bits.slice(len.pred, bits.pred))
    }
  }

// Converts a bitstring to a string
Bits.to_string(bits: Bits): String
  case bits {
    nil: "",
     0 : String.concat("0", Bits.to_string(bits.pred)),
     1 : String.concat("1", Bits.to_string(bits.pred))
  }

// Converts a bitstring to a U32 value
Bits.to_u32(bits: Bits): U32
  U32.new(Word.from_bits(32, bits))

// Multiplies two bitstrings.
Bits.mul(a: Bits, b: Bits): Bits
  Bits.mul.go(a, b, Bits.nil)

Bits.mul.go(a: Bits, b: Bits, bits: Bits): Bits
  case b {
    nil: bits,
     0 : Bits.mul.go(Bits.0(a), b.pred, bits),
     1 : Bits.mul.go(Bits.0(a), b.pred, Bits.add(a, bits))
  }

// TODO Divides two bitstrings.
Bits.div(a: Bits, b: Bits): Bits
  Bits.div(a, b)

// TODO Modulus of two Bitstrings.
Bits.mod(a: Bits, b: Bits): Bits
  Bits.mod(a, b)

// TODO
// Subtracts two Bitstrings.
Bits.sub(a: Bits, b: Bits): Bits
  Bits.sub(a, b)



