module FormalityInternal where
import Unsafe.Coerce
import Data.Word
import Data.Bits
import Debug.Trace
u = unsafeCoerce
run p = case p of {
  (1,f) -> (u f (\query param cont-> case query of {
    "print"    -> do { putStrLn param; run (cont ()); };
    "get_line" -> do { line <- getLine; run (u cont line); };
    "get_file" -> do { line <- readFile param; run (u cont line); };
    otherwise  -> do { u cont (); };
  }));
  (0,f) -> (u f (\value-> do { (return :: a -> IO a) value; }));
}
word_to_u16       w        = u word_to_u16_go 0 w 0
word_to_u16_go 16 w      x = u x
word_to_u16_go  i (0,f)  x = u word_to_u16_go (i+1) (0,\t-> t) (x::Word16)
word_to_u16_go  i (1,f)  x = u f (\w-> word_to_u16_go (i+1) w x)
word_to_u16_go  i (2,f)  x = u f (\w-> word_to_u16_go (i+1) w (x .|. (shiftL 1 i)))
u16_to_word       x        = u u16_to_word_go 0 x (0,\t-> t)
u16_to_word_go 16 x      w = u w
u16_to_word_go  i x      w = u u16_to_word_go (i+1) (x::Word16) (if (shiftR x (16-i-1) .&. 1) > 0 then (2,\t-> t w) else (1,\t-> t w))
monad_bind = (\_m_2-> (let _0 = _m_2 in (case _0 of {(0,f) -> u f (\_1 _2-> _1); })))
io = (\_a_1-> ())
monad_new = (\_bind_2-> (\_pure_3-> (0,\t-> t _bind_2 _pure_3)))
io_ask = (\_query_2-> (\_param_3-> (\_then_4-> (1,\t-> t _query_2 _param_3 _then_4))))
io_bind = (\_a_3-> (\_f_4-> (let _3 = _a_3 in (case _3 of {(0,f) -> u f (\_4-> (u _f_4 _4)); (1,f) -> u f (\_5 _6 _7-> (u (u (u io_ask _5) _6) (\_x_8-> (u (u io_bind (u _7 _x_8)) _f_4)))); }))))
io_end = (\_value_2-> (0,\t-> t _value_2))
io_monad = (u (u monad_new io_bind) io_end)
map = (\_a_1-> ())
maybe = (\_a_1-> ())
maybe_none = (0,\t-> t)
map_get = (\_bits_2-> (\_map_3-> (let _8 = _bits_2 in (case _8 of {(0,f) -> u f ((let _9 = _map_3 in (case _9 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_10 _11 _12-> _10); }))); (1,f) -> u f (\_13-> (let _14 = _map_3 in (case _14 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_15 _16 _17-> (u (u map_get _13) _16)); }))); (2,f) -> u f (\_18-> (let _19 = _map_3 in (case _19 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_20 _21 _22-> (u (u map_get _18) _22)); }))); }))))
bits_e = (0,\t-> t)
bool_false = False
bool_and = (\a0-> \a1-> (a0 && a1))
bool_true = True
cmp_as_lte = (\_cmp_1-> (let _23 = _cmp_1 in (case _23 of {(0,f) -> u f (bool_true); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
cmp_ltn = (0,\t-> t)
cmp_gtn = (2,\t-> t)
word_cmp_go = (\_a_2-> (\_b_3-> (\_c_4-> (let _24 = _a_2 in (case _24 of {(0,f) -> u f ((\_b_5-> _c_4)); (1,f) -> u f (\_25-> (\_b_7-> (let _26 = _b_7 in (case _26 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_27-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _27) _c_4))); (2,f) -> u f (\_28-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _28) cmp_ltn))); })) _25)); (2,f) -> u f (\_29-> (\_b_7-> (let _30 = _b_7 in (case _30 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_31-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _31) cmp_gtn))); (2,f) -> u f (\_32-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _32) _c_4))); })) _29)); })) _b_3)))
cmp_eql = (1,\t-> t)
word_cmp = (\_a_2-> (\_b_3-> (u (u (u word_cmp_go _a_2) _b_3) cmp_eql)))
word_lte = (\_a_2-> (\_b_3-> (u cmp_as_lte (u (u word_cmp _a_2) _b_3))))
nat_succ = (\_pred_1-> 1+_pred_1)
nat_zero = 0
u16_lte = (\a0-> \a1-> ((a0::Word16) <= a1))
u16_btw = (\_a_1-> (\_b_2-> (\_c_3-> (((((_a_1::Word16) <= _b_2)) && (((_b_2::Word16) <= _c_3)))))))
u16_new = (\_value_1-> (word_to_u16 _value_1))
word_e = (0,\t-> t)
word = (\_size_1-> ())
word_i = (\_pred_2-> (2,\t-> t _pred_2))
word_o = (\_pred_2-> (1,\t-> t _pred_2))
word_subber = (\_a_2-> (\_b_3-> (\_c_4-> (let _33 = _a_2 in (case _33 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_34-> (\_b_7-> (let _35 = _b_7 in (case _35 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_36-> (\_a_pred_10-> (let _37 = _c_4 in (if _37 then (u word_i (u (u (u word_subber _a_pred_10) _36) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _36) bool_false)))))); (2,f) -> u f (\_38-> (\_a_pred_10-> (let _39 = _c_4 in (if _39 then (u word_o (u (u (u word_subber _a_pred_10) _38) bool_true)) else (u word_i (u (u (u word_subber _a_pred_10) _38) bool_true)))))); })) _34)); (2,f) -> u f (\_40-> (\_b_7-> (let _41 = _b_7 in (case _41 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_42-> (\_a_pred_10-> (let _43 = _c_4 in (if _43 then (u word_o (u (u (u word_subber _a_pred_10) _42) bool_false)) else (u word_i (u (u (u word_subber _a_pred_10) _42) bool_false)))))); (2,f) -> u f (\_44-> (\_a_pred_10-> (let _45 = _c_4 in (if _45 then (u word_i (u (u (u word_subber _a_pred_10) _44) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _44) bool_false)))))); })) _40)); })) _b_3)))
word_sub = (\_a_2-> (\_b_3-> (u (u (u word_subber _a_2) _b_3) bool_false)))
u16_sub = (\a0-> \a1-> ((a0::Word16) - a1))
nat_apply = (\_n_2-> (\_f_3-> (\_x_4-> (let _46 = _n_2 in (if _46==0 then _x_4 else (u (u (u nat_apply (_46-1)) _f_3) (u _f_3 _x_4)))))))
word_inc = (\_word_2-> (let _47 = _word_2 in (case _47 of {(0,f) -> u f (word_e); (1,f) -> u f (\_48-> (u word_i _48)); (2,f) -> u f (\_49-> (u word_o (u word_inc _49))); })))
u16_inc = (\_a_1-> (let _50 = _a_1 in (u u16_new (u word_inc (u16_to_word _50)))))
word_zero = (\_size_1-> (let _51 = _size_1 in (if _51==0 then word_e else (u word_o (u word_zero (_51-1))))))
u16_zero = (u u16_new (u word_zero 16))
nat_to_u16 = (\a0-> (fromIntegral (a0::Integer)))
word_adder = (\_a_2-> (\_b_3-> (\_c_4-> (let _52 = _a_2 in (case _52 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_53-> (\_b_7-> (let _54 = _b_7 in (case _54 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_55-> (\_a_pred_10-> (let _56 = _c_4 in (if _56 then (u word_i (u (u (u word_adder _a_pred_10) _55) bool_false)) else (u word_o (u (u (u word_adder _a_pred_10) _55) bool_false)))))); (2,f) -> u f (\_57-> (\_a_pred_10-> (let _58 = _c_4 in (if _58 then (u word_o (u (u (u word_adder _a_pred_10) _57) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _57) bool_false)))))); })) _53)); (2,f) -> u f (\_59-> (\_b_7-> (let _60 = _b_7 in (case _60 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_61-> (\_a_pred_10-> (let _62 = _c_4 in (if _62 then (u word_o (u (u (u word_adder _a_pred_10) _61) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _61) bool_false)))))); (2,f) -> u f (\_63-> (\_a_pred_10-> (let _64 = _c_4 in (if _64 then (u word_i (u (u (u word_adder _a_pred_10) _63) bool_true)) else (u word_o (u (u (u word_adder _a_pred_10) _63) bool_true)))))); })) _59)); })) _b_3)))
word_add = (\_a_2-> (\_b_3-> (u (u (u word_adder _a_2) _b_3) bool_false)))
u16_add = (\a0-> \a1-> ((a0::Word16) + a1))
cmp_as_eql = (\_cmp_1-> (let _65 = _cmp_1 in (case _65 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
word_eql = (\_a_2-> (\_b_3-> (u cmp_as_eql (u (u word_cmp _a_2) _b_3))))
u16_eql = (\a0-> \a1-> ((a0::Word16) == a1))
bits_o = (\_pred_1-> (1,\t-> t _pred_1))
bits_i = (\_pred_1-> (2,\t-> t _pred_1))
word_to_bits = (\_a_2-> (let _66 = _a_2 in (case _66 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_67-> (u bits_o (u word_to_bits _67))); (2,f) -> u f (\_68-> (u bits_i (u word_to_bits _68))); })))
word_trim = (\_new_size_2-> (\_word_3-> (let _69 = _new_size_2 in (if _69==0 then word_e else (let _70 = _word_3 in (case _70 of {(0,f) -> u f ((u word_o (u (u word_trim (_69-1)) word_e))); (1,f) -> u f (\_71-> (u word_o (u (u word_trim (_69-1)) _71))); (2,f) -> u f (\_72-> (u word_i (u (u word_trim (_69-1)) _72))); }))))))
bits_concat = (\_a_1-> (\_b_2-> (let _73 = _a_1 in (case _73 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_74-> (u bits_o (u (u bits_concat _74) _b_2))); (2,f) -> u f (\_75-> (u bits_i (u (u bits_concat _75) _b_2))); }))))
bits_reverse_tco = (\_a_1-> (\_r_2-> (let _76 = _a_1 in (case _76 of {(0,f) -> u f (_r_2); (1,f) -> u f (\_77-> (u (u bits_reverse_tco _77) (u bits_o _r_2))); (2,f) -> u f (\_78-> (u (u bits_reverse_tco _78) (u bits_i _r_2))); }))))
bits_reverse = (\_a_1-> (u (u bits_reverse_tco _a_1) bits_e))
fm_name_to_bits = (\_name_1-> (let _79 = _name_1 in (if null (_79::String) then bits_e else (let _chr_4=(fromIntegral (fromEnum (head _79 :: Char)) :: Word16) in (let _u16_5=(let _80 = (u (u (u u16_btw 65) _chr_4) 90) in (if _80 then (((_chr_4::Word16) - 65)) else (let _81 = (u (u (u u16_btw 97) _chr_4) 122) in (if _81 then (((_chr_4::Word16) - 71)) else (let _82 = (u (u (u u16_btw 48) _chr_4) 57) in (if _82 then (((_chr_4::Word16) + 4)) else (let _83 = (((46::Word16) == _chr_4)) in (if _83 then 62 else (let _84 = (((95::Word16) == _chr_4)) in (if _84 then 63 else 0)))))))))) in (let _bts_6=(let _85 = _u16_5 in (u word_to_bits (u (u word_trim 6) (u16_to_word _85)))) in (u (u bits_concat (u bits_reverse _bts_6)) (u fm_name_to_bits (tail _79)))))))))
fm_get = (\_name_2-> (\_map_3-> (u (u map_get (u fm_name_to_bits _name_2)) _map_3)))
string_cons = (\_head_1-> (\_tail_2-> ((toEnum (fromIntegral _head_1 :: Int) :: Char) : _tail_2)))
fm_synth_file_of = (\_name_1-> (let _86 = _name_1 in (if null (_86::String) then ".fm" else (let _87 = ((((fromIntegral (fromEnum (head _86 :: Char)) :: Word16)::Word16) == 46)) in (if _87 then ".fm" else (u (u string_cons (fromIntegral (fromEnum (head _86 :: Char)) :: Word16)) (u fm_synth_file_of (tail _86))))))))
io_get_file = (\_name_1-> (u (u (u io_ask "get_file") _name_1) (\_file_2-> (u io_end _file_2))))
parser = (\_v_1-> ())
parser_reply = (\_v_1-> ())
parser_reply_error = (\_idx_2-> (\_code_3-> (\_err_4-> (0,\t-> t _idx_2 _code_3 _err_4))))
parser_bind = (\_parse_3-> (\_next_4-> (\_idx_5-> (\_code_6-> (let _88 = (u (u _parse_3 _idx_5) _code_6) in (case _88 of {(0,f) -> u f (\_89 _90 _91-> (u (u (u parser_reply_error _89) _90) _91)); (1,f) -> u f (\_92 _93 _94-> (u (u (u _next_4 _94) _92) _93)); }))))))
parser_reply_value = (\_idx_2-> (\_code_3-> (\_val_4-> (1,\t-> t _idx_2 _code_3 _val_4))))
parser_pure = (\_value_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_value _idx_3) _code_4) _value_2))))
parser_monad = (u (u monad_new parser_bind) parser_pure)
parser_is_eof = (\_idx_1-> (\_code_2-> (let _95 = _code_2 in (if null (_95::String) then (u (u (u parser_reply_value _idx_1) _code_2) bool_true) else (u (u (u parser_reply_value _idx_1) _code_2) bool_false)))))
monad_pure = (\_m_2-> (let _96 = _m_2 in (case _96 of {(0,f) -> u f (\_97 _98-> _98); })))
maybe_some = (\_value_2-> (1,\t-> t _value_2))
parser_errorat_new = (\_idx_1-> (\_code_2-> (\_err_3-> (0,\t-> t _idx_1 _code_2 _err_3))))
nat_gtn = (\a0-> \a1-> ((a0::Integer) > a1))
parser_errorat_combine = (\_a_1-> (\_b_2-> (let _99 = _a_1 in (case _99 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_100-> (let _101 = _b_2 in (case _101 of {(0,f) -> u f (_a_1); (1,f) -> u f (\_102-> (let _103 = _100 in (case _103 of {(0,f) -> u f (\_104 _105 _106-> (let _107 = _102 in (case _107 of {(0,f) -> u f (\_108 _109 _110-> (let _111 = (((_104::Integer) > _108)) in (if _111 then _a_1 else _b_2))); }))); }))); }))); }))))
parser_first_of_go = (\_pars_2-> (\_err_3-> (\_idx_4-> (\_code_5-> (let _112 = _pars_2 in (case _112 of {(0,f) -> u f ((let _113 = _err_3 in (case _113 of {(0,f) -> u f ((u (u (u parser_reply_error _idx_4) _code_5) "No parse.")); (1,f) -> u f (\_114-> (let _115 = _114 in (case _115 of {(0,f) -> u f (\_116 _117 _118-> (u (u (u parser_reply_error _116) _117) _118)); }))); }))); (1,f) -> u f (\_119 _120-> (let _parsed_8=(u (u _119 _idx_4) _code_5) in (let _121 = _parsed_8 in (case _121 of {(0,f) -> u f (\_122 _123 _124-> (let _neo_12=(u maybe_some (u (u (u parser_errorat_new _122) _123) _124)) in (let _err_13=(u (u parser_errorat_combine _neo_12) _err_3) in (u (u (u (u parser_first_of_go _120) _err_13) _idx_4) _code_5)))); (1,f) -> u f (\_125 _126 _127-> (u (u (u parser_reply_value _125) _126) _127)); })))); }))))))
parser_first_of = (\_pars_2-> (u (u parser_first_of_go _pars_2) maybe_none))
list_cons = (\_head_2-> (\_tail_3-> (1,\t-> t _head_2 _tail_3)))
list = (\_a_1-> ())
list_nil = (0,\t-> t)
parser_many_go = (\_parse_2-> (\_values_3-> (\_idx_4-> (\_code_5-> (let _128 = (u (u _parse_2 _idx_4) _code_5) in (case _128 of {(0,f) -> u f (\_129 _130 _131-> (u (u (u parser_reply_value _idx_4) _code_5) (u _values_3 list_nil))); (1,f) -> u f (\_132 _133 _134-> (u (u (u (u parser_many_go _parse_2) (\_xs_9-> (u _values_3 (u (u list_cons _134) _xs_9)))) _132) _133)); }))))))
parser_many = (\_parser_2-> (u (u parser_many_go _parser_2) (\_x_3-> _x_3)))
unit_new = ()
string_concat = (\a0-> \a1-> ((a0::String) ++ a1))
string_flatten_go = (\_xs_1-> (\_res_2-> (let _135 = _xs_1 in (case _135 of {(0,f) -> u f (_res_2); (1,f) -> u f (\_136 _137-> (u (u string_flatten_go _137) (((_res_2::String) ++ _136)))); }))))
string_flatten = (\_xs_1-> (u (u string_flatten_go _xs_1) ""))
string_nil = []
parser_text_go = (\_text_1-> (\_idx_2-> (\_code_3-> (let _138 = _text_1 in (if null (_138::String) then (u (u (u parser_reply_value _idx_2) _code_3) unit_new) else (let _139 = _code_3 in (if null (_139::String) then (let _error_6=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found end of file.") list_nil)))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_6)) else (let _140 = ((((fromIntegral (fromEnum (head _138 :: Char)) :: Word16)::Word16) == (fromIntegral (fromEnum (head _139 :: Char)) :: Word16))) in (if _140 then (u (u (u parser_text (tail _138)) (u nat_succ _idx_2)) (tail _139)) else (let _error_8=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found '") (u (u list_cons (u (u string_cons (fromIntegral (fromEnum (head _139 :: Char)) :: Word16)) string_nil)) (u (u list_cons "'.") list_nil)))))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_8)))))))))))
parser_text = (\_text_1-> (\_idx_2-> (\_code_3-> (let _141 = (u (u (u parser_text_go _text_1) _idx_2) _code_3) in (case _141 of {(0,f) -> u f (\_142 _143 _144-> (u (u (u parser_reply_error _idx_2) _code_3) _144)); (1,f) -> u f (\_145 _146 _147-> (u (u (u parser_reply_value _145) _146) _147)); })))))
parser_until_go = (\_until_2-> (\_parse_3-> (\_values_4-> (\_idx_5-> (\_code_6-> (let _until_reply_7=(u (u _until_2 _idx_5) _code_6) in (let _148 = _until_reply_7 in (case _148 of {(0,f) -> u f (\_149 _150 _151-> (let _reply_11=(u (u _parse_3 _idx_5) _code_6) in (let _152 = _reply_11 in (case _152 of {(0,f) -> u f (\_153 _154 _155-> (u (u (u parser_reply_error _153) _154) _155)); (1,f) -> u f (\_156 _157 _158-> (u (u (u (u (u parser_until_go _until_2) _parse_3) (\_xs_15-> (u _values_4 (u (u list_cons _158) _xs_15)))) _156) _157)); })))); (1,f) -> u f (\_159 _160 _161-> (u (u (u parser_reply_value _159) _160) (u _values_4 list_nil))); }))))))))
parser_until = (\_until_2-> (\_parse_3-> (u (u (u parser_until_go _until_2) _parse_3) (\_x_4-> _x_4))))
parser_one = (\_idx_1-> (\_code_2-> (let _162 = _code_2 in (if null (_162::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected end of file.") else (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _162)) (fromIntegral (fromEnum (head _162 :: Char)) :: Word16))))))
fm_parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_text "//")) (\__1-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text "\n")) parser_one)) (\__2-> (u (u monad_pure parser_monad) unit_new)))))) list_nil)))))
fm_parser_text = (\_text_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u parser_text _text_1))))
parser_many1 = (\_parser_2-> (u (u (u monad_bind parser_monad) _parser_2) (\_head_3-> (u (u (u monad_bind parser_monad) (u parser_many _parser_2)) (\_tail_4-> (u (u monad_pure parser_monad) (u (u list_cons _head_3) _tail_4)))))))
fm_name_is_letter = (\_chr_1-> (let _163 = (u (u (u u16_btw 65) _chr_1) 90) in (if _163 then bool_true else (let _164 = (u (u (u u16_btw 97) _chr_1) 122) in (if _164 then bool_true else (let _165 = (u (u (u u16_btw 48) _chr_1) 57) in (if _165 then bool_true else (let _166 = (((46::Word16) == _chr_1)) in (if _166 then bool_true else (let _167 = (((95::Word16) == _chr_1)) in (if _167 then bool_true else bool_false)))))))))))
fm_parser_letter = (\_idx_1-> (\_code_2-> (let _168 = _code_2 in (if null (_168::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected eof.") else (let _169 = (u fm_name_is_letter (fromIntegral (fromEnum (head _168 :: Char)) :: Word16)) in (if _169 then (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _168)) (fromIntegral (fromEnum (head _168 :: Char)) :: Word16)) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected letter.")))))))
list_fold = (\_list_2-> (\_nil_4-> (\_cons_5-> (let _170 = _list_2 in (case _170 of {(0,f) -> u f (_nil_4); (1,f) -> u f (\_171 _172-> (u (u _cons_5 _171) (u (u (u list_fold _172) _nil_4) _cons_5))); })))))
fm_parser_name1 = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many1 fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
pair = (\_a_1-> (\_b_2-> ()))
parser_until1 = (\_cond_2-> (\_parser_3-> (u (u (u monad_bind parser_monad) _parser_3) (\_head_4-> (u (u (u monad_bind parser_monad) (u (u parser_until _cond_2) _parser_3)) (\_tail_5-> (u (u monad_pure parser_monad) (u (u list_cons _head_4) _tail_5))))))))
parser_maybe = (\_parse_2-> (\_idx_3-> (\_code_4-> (let _173 = (u (u _parse_2 _idx_3) _code_4) in (case _173 of {(0,f) -> u f (\_174 _175 _176-> (u (u (u parser_reply_value _idx_3) _code_4) maybe_none)); (1,f) -> u f (\_177 _178 _179-> (u (u (u parser_reply_value _177) _178) (u maybe_some _179))); })))))
fm_parser_item = (\_parser_2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) _parser_2) (\_value_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__5-> (u (u monad_pure parser_monad) _value_4))))))))
fm_parser_name = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
parser_get_code = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _code_2)))
parser_get_index = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _idx_1)))
fm_parser_init = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_from_2-> (u (u monad_pure parser_monad) _from_2)))))
fm_origin_new = (\_file_1-> (\_from_2-> (\_upto_3-> (0,\t-> t _file_1 _from_2 _upto_3))))
fm_parser_stop = (\_from_1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_upto_2-> (let _orig_3=(u (u (u fm_origin_new "") _from_1) _upto_2) in (u (u monad_pure parser_monad) _orig_3)))))
fm_term_ori = (\_orig_1-> (\_expr_2-> (15,\t-> t _orig_1 _expr_2)))
fm_term_typ = (2,\t-> t)
fm_parser_type = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "Type")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) fm_term_typ))))))))
fm_term_all = (\_eras_1-> (\_self_2-> (\_name_3-> (\_xtyp_4-> (\_body_5-> (3,\t-> t _eras_1 _self_2 _name_3 _xtyp_4 _body_5))))))
fm_parser_forall = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_self_2-> (u (u (u monad_bind parser_monad) fm_parser_binder) (\_bind_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text "->"))) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_5-> (let _term_6=(u (u (u list_fold _bind_3) _body_5) (\_x_6-> (\_t_7-> (let _180 = _x_6 in (case _180 of {(0,f) -> u f (\_181 _182 _183-> (u (u (u (u (u fm_term_all _181) "") _182) _183) (\_s_11-> (\_x_12-> _t_7)))); }))))) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (u (u monad_pure parser_monad) (let _184 = _term_6 in (case _184 of {(0,f) -> u f (\_185 _186-> _term_6); (1,f) -> u f (\_187-> _term_6); (2,f) -> u f (_term_6); (3,f) -> u f (\_188 _189 _190 _191 _192-> (u (u fm_term_ori _orig_7) (u (u (u (u (u fm_term_all _188) _self_2) _190) _191) _192))); (4,f) -> u f (\_193 _194-> _term_6); (5,f) -> u f (\_195 _196-> _term_6); (6,f) -> u f (\_197 _198 _199-> _term_6); (7,f) -> u f (\_200 _201 _202-> _term_6); (8,f) -> u f (\_203 _204 _205-> _term_6); (9,f) -> u f (\_206 _207 _208-> _term_6); (10,f) -> u f (\_209-> _term_6); (11,f) -> u f (\_210-> _term_6); (12,f) -> u f (\_211-> _term_6); (13,f) -> u f (\_212-> _term_6); (14,f) -> u f (\_213 _214 _215 _216 _217 _218-> _term_6); (15,f) -> u f (\_219 _220-> _term_6); }))))))))))))))))
fm_term_lam = (\_name_1-> (\_body_2-> (4,\t-> t _name_1 _body_2)))
fm_parser_make_lambda = (\_names_1-> (\_body_2-> (let _221 = _names_1 in (case _221 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_222 _223-> (u (u fm_term_lam _222) (\_x_5-> (u (u fm_parser_make_lambda _223) _body_2)))); }))))
fm_parser_lambda = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_erased = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "<")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ">")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_nameless = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "()")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (let _expr_5=(u (u fm_term_lam "") (\_x_5-> _body_3)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) _expr_5)))))))))))
fm_parser_parenthesis = (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__3-> (u (u monad_pure parser_monad) _term_2)))))))
fm_term_ref = (\_name_1-> (1,\t-> t _name_1))
fm_term_app = (\_func_1-> (\_argm_2-> (5,\t-> t _func_1 _argm_2)))
fm_term_hol = (\_path_1-> (10,\t-> t _path_1))
fm_term_let = (\_name_1-> (\_expr_2-> (\_body_3-> (6,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_letforin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_8-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__9-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_10-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_12-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_13-> (let _term_14=(u fm_term_ref "List.for") in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_hol bits_e)) in (let _term_16=(u (u fm_term_app _term_15) _list_8) in (let _term_17=(u (u fm_term_app _term_16) (u fm_term_hol bits_e)) in (let _term_18=(u (u fm_term_app _term_17) (u fm_term_ref _name_3)) in (let _lamb_19=(u (u fm_term_lam _elem_6) (\_i_19-> (u (u fm_term_lam _name_3) (\_x_20-> _loop_10)))) in (let _term_20=(u (u fm_term_app _term_18) _lamb_19) in (let _term_21=(u (u (u fm_term_let _name_3) _term_20) (\_x_21-> _body_12)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_13) _term_21))))))))))))))))))))))))))))))))))))
fm_parser_let = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_let _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_parser_get = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_nam0_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_nam1_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_9-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__10-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (let _term_13=_expr_9 in (let _term_14=(u (u fm_term_app _term_13) (u (u fm_term_lam "x") (\_x_14-> (u fm_term_hol bits_e)))) in (let _term_15=(u (u fm_term_app _term_14) (u (u fm_term_lam _nam0_4) (\_x_15-> (u (u fm_term_lam _nam1_6) (\_y_16-> _body_11))))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) _term_15)))))))))))))))))))))))))))))
fm_term_def = (\_name_1-> (\_expr_2-> (\_body_3-> (7,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_def = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "def ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_def _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_parser_if = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "if ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_cond_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "then")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_tcse_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "else")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_fcse_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (let _term_9=_cond_3 in (let _term_10=(u (u fm_term_app _term_9) (u (u fm_term_lam "") (\_x_10-> (u fm_term_hol bits_e)))) in (let _term_11=(u (u fm_term_app _term_10) _tcse_5) in (let _term_12=(u (u fm_term_app _term_11) _fcse_7) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) _term_12))))))))))))))))))))))
list_mapped = (\_as_2-> (\_f_4-> (let _224 = _as_2 in (case _224 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_225 _226-> (u (u list_cons (u _f_4 _225)) (u (u list_mapped _226) _f_4))); }))))
pair_new = (\_fst_3-> (\_snd_4-> (0,\t-> t _fst_3 _snd_4)))
fm_backslash = 92
fm_escapes = (u (u list_cons (u (u pair_new "\\b") 8)) (u (u list_cons (u (u pair_new "\\f") 12)) (u (u list_cons (u (u pair_new "\\n") 10)) (u (u list_cons (u (u pair_new "\\r") 13)) (u (u list_cons (u (u pair_new "\\t") 9)) (u (u list_cons (u (u pair_new "\\v") 11)) (u (u list_cons (u (u pair_new (u (u string_cons fm_backslash) (u (u string_cons fm_backslash) string_nil))) fm_backslash)) (u (u list_cons (u (u pair_new "\\\"") 34)) (u (u list_cons (u (u pair_new "\\0") 0)) (u (u list_cons (u (u pair_new "\\'") 39)) list_nil))))))))))
fm_parser_char_single = (u parser_first_of (u (u list_cons (u parser_first_of (u (u list_mapped fm_escapes) (\_esc_1-> (let _227 = _esc_1 in (case _227 of {(0,f) -> u f (\_228 _229-> (u (u (u monad_bind parser_monad) (u parser_text _228)) (\__4-> (u (u monad_pure parser_monad) _229)))); })))))) (u (u list_cons parser_one) list_nil)))
fm_term_chr = (\_chrx_1-> (12,\t-> t _chrx_1))
fm_parser_char = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "'")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_char_single) (\_chrx_3-> (u (u (u monad_bind parser_monad) (u parser_text "'")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u fm_term_chr _chrx_3)))))))))))))
fm_term_str = (\_strx_1-> (13,\t-> t _strx_1))
fm_parser_string = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (let _quot_2=(u (u string_cons 34) string_nil) in (u (u (u monad_bind parser_monad) (u fm_parser_text _quot_2)) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text _quot_2)) fm_parser_char_single)) (\_chrs_4-> (let _strx_5=(u (u (u list_fold _chrs_4) string_nil) string_cons) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u fm_term_str _strx_5)))))))))))))
fm_parser_pair = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val0_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (let _term_8=(u fm_term_ref "Pair.new") in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _val0_3) in (let _term_12=(u (u fm_term_app _term_11) _val1_5) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_12)))))))))))))))))))))
fm_parser_sigma_type = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_typ0_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_typ1_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (let _term_9=(u fm_term_ref "Sigma") in (let _term_10=(u (u fm_term_app _term_9) _typ0_5) in (let _term_11=(u (u fm_term_app _term_10) (u (u fm_term_lam "x") (\_x_11-> _typ1_7))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) _term_11)))))))))))))))))))))
fm_parser_some = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "some(")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Maybe.some") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _expr_3) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_8)))))))))))))))
fm_parser_apply = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "apply(")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_func_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_equa_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (let _term_8=(u fm_term_ref "Equal.apply") in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) (u fm_term_hol bits_e)) in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) _func_3) in (let _term_14=(u (u fm_term_app _term_13) _equa_5) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_14)))))))))))))))))))))))
fm_name_read = (\_str_1-> _str_1)
fm_parser_list = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "[")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "]")) (u fm_parser_item fm_parser_term))) (\_vals_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u (u list_fold _vals_3) (u (u fm_term_app (u fm_term_ref (u fm_name_read "List.nil"))) (u fm_term_hol bits_e))) (\_x_5-> (\_xs_6-> (let _term_7=(u fm_term_ref (u fm_name_read "List.cons")) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_hol bits_e)) in (let _term_9=(u (u fm_term_app _term_8) _x_5) in (let _term_10=(u (u fm_term_app _term_9) _xs_6) in (u (u fm_term_ori _orig_4) _term_10)))))))))))))))))
fm_parser_log = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "log(")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text ")")) (u fm_parser_item fm_parser_term))) (\_strs_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_cont_4-> (let _term_5=(u fm_term_ref "Debug.log") in (let _term_6=(u (u fm_term_app _term_5) (u fm_term_hol bits_e)) in (let _args_7=(u (u (u list_fold _strs_3) (u fm_term_ref "String.nil")) (\_x_7-> (\_xs_8-> (let _arg_9=(u fm_term_ref "String.concat") in (let _arg_10=(u (u fm_term_app _arg_9) _x_7) in (let _arg_11=(u (u fm_term_app _arg_10) _xs_8) in _arg_11)))))) in (let _term_8=(u (u fm_term_app _term_6) _args_7) in (let _term_9=(u (u fm_term_app _term_8) (u (u fm_term_lam "x") (\_x_9-> _cont_4))) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9)))))))))))))))))
fm_parser_forin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_9-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (let _term_11=(u fm_term_ref "List.for") in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) _list_5) in (let _term_14=(u (u fm_term_app _term_13) (u fm_term_hol bits_e)) in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_ref _name_7)) in (let _lamb_16=(u (u fm_term_lam _elem_3) (\_i_16-> (u (u fm_term_lam _name_7) (\_x_17-> _loop_9)))) in (let _term_17=(u (u fm_term_app _term_15) _lamb_16) in (let _term_18=(u (u (u fm_term_let _name_7) _term_17) (\_x_18-> (u fm_term_ref _name_7))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_18))))))))))))))))))))))))))))))
fm_parser_forin2 = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_9-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__10-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (let _term_13=(u fm_term_ref "List.for") in (let _term_14=(u (u fm_term_app _term_13) (u fm_term_hol bits_e)) in (let _term_15=(u (u fm_term_app _term_14) _list_5) in (let _term_16=(u (u fm_term_app _term_15) (u fm_term_hol bits_e)) in (let _term_17=(u (u fm_term_app _term_16) (u fm_term_ref _name_7)) in (let _lamb_18=(u (u fm_term_lam _elem_3) (\_i_18-> (u (u fm_term_lam _name_7) (\_x_19-> _loop_9)))) in (let _term_19=(u (u fm_term_app _term_17) _lamb_18) in (let _term_20=(u (u (u fm_term_let _name_7) _term_19) (\_x_20-> _body_11)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) _term_20))))))))))))))))))))))))))))))))))
fm_parser_do_statements = (\_monad_name_1-> (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "var ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (let _term_10=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_11=(u (u fm_term_app _term_10) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) (u fm_term_hol bits_e)) in (let _term_14=(u (u fm_term_app _term_13) _expr_6) in (let _term_15=(u (u fm_term_app _term_14) (u (u fm_term_lam _name_4) (\_x_15-> _body_8))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) _term_15))))))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) (u (u (u fm_term_let _name_4) _expr_6) (\_x_10-> _body_8))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "return ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.pure")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) _expr_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_10))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _expr_3) in (let _term_12=(u (u fm_term_app _term_11) (u (u fm_term_lam "") (\_x_12-> _body_5))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_12))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_2-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__3-> (u (u monad_pure parser_monad) _expr_2)))))) list_nil)))))))
fm_parser_do = (u (u (u monad_bind parser_monad) (u fm_parser_text "do ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__3-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _name_2)) (\_term_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__5-> (u (u monad_pure parser_monad) _term_4)))))))))))
fm_term_nat = (\_natx_1-> (11,\t-> t _natx_1))
fm_term_unroll_nat = (\_natx_1-> (let _230 = _natx_1 in (if _230==0 then (u fm_term_ref (u fm_name_read "Nat.zero")) else (let _func_3=(u fm_term_ref (u fm_name_read "Nat.succ")) in (let _argm_4=(u fm_term_nat (_230-1)) in (u (u fm_term_app _func_3) _argm_4))))))
u16_to_bits = (\_a_1-> (let _231 = _a_1 in (u word_to_bits (u16_to_word _231))))
fm_term_unroll_chr_bits = (\_bits_1-> (let _232 = _bits_1 in (case _232 of {(0,f) -> u f ((u fm_term_ref (u fm_name_read "Bits.e"))); (1,f) -> u f (\_233-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.o"))) (u fm_term_unroll_chr_bits _233))); (2,f) -> u f (\_234-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.i"))) (u fm_term_unroll_chr_bits _234))); })))
fm_term_unroll_chr = (\_chrx_1-> (let _bits_2=(u u16_to_bits _chrx_1) in (let _term_3=(u fm_term_ref (u fm_name_read "Word.from_bits")) in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_nat 16)) in (let _term_5=(u (u fm_term_app _term_4) (u fm_term_unroll_chr_bits _bits_2)) in (let _term_6=(u (u fm_term_app (u fm_term_ref (u fm_name_read "U16.new"))) _term_5) in _term_6))))))
fm_term_unroll_str = (\_strx_1-> (let _235 = _strx_1 in (if null (_235::String) then (u fm_term_ref (u fm_name_read "String.nil")) else (let _char_4=(u fm_term_chr (fromIntegral (fromEnum (head _235 :: Char)) :: Word16)) in (let _term_5=(u fm_term_ref (u fm_name_read "String.cons")) in (let _term_6=(u (u fm_term_app _term_5) _char_4) in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_str (tail _235))) in _term_7)))))))
fm_term_reduce = (\_term_1-> (\_defs_2-> (let _236 = _term_1 in (case _236 of {(0,f) -> u f (\_237 _238-> _term_1); (1,f) -> u f (\_239-> (let _240 = (u (u fm_get _239) _defs_2) in (case _240 of {(0,f) -> u f ((u fm_term_ref _239)); (1,f) -> u f (\_241-> (let _242 = _241 in (case _242 of {(0,f) -> u f (\_243 _244 _245 _246 _247 _248-> (u (u fm_term_reduce _246) _defs_2)); }))); }))); (2,f) -> u f (_term_1); (3,f) -> u f (\_249 _250 _251 _252 _253-> _term_1); (4,f) -> u f (\_254 _255-> _term_1); (5,f) -> u f (\_256 _257-> (let _func_5=(u (u fm_term_reduce _256) _defs_2) in (let _258 = _func_5 in (case _258 of {(0,f) -> u f (\_259 _260-> _term_1); (1,f) -> u f (\_261-> _term_1); (2,f) -> u f (_term_1); (3,f) -> u f (\_262 _263 _264 _265 _266-> _term_1); (4,f) -> u f (\_267 _268-> (u (u fm_term_reduce (u _268 _257)) _defs_2)); (5,f) -> u f (\_269 _270-> _term_1); (6,f) -> u f (\_271 _272 _273-> _term_1); (7,f) -> u f (\_274 _275 _276-> _term_1); (8,f) -> u f (\_277 _278 _279-> _term_1); (9,f) -> u f (\_280 _281 _282-> _term_1); (10,f) -> u f (\_283-> _term_1); (11,f) -> u f (\_284-> _term_1); (12,f) -> u f (\_285-> _term_1); (13,f) -> u f (\_286-> _term_1); (14,f) -> u f (\_287 _288 _289 _290 _291 _292-> _term_1); (15,f) -> u f (\_293 _294-> _term_1); })))); (6,f) -> u f (\_295 _296 _297-> (u (u fm_term_reduce (u _297 _296)) _defs_2)); (7,f) -> u f (\_298 _299 _300-> (u (u fm_term_reduce (u _300 _299)) _defs_2)); (8,f) -> u f (\_301 _302 _303-> (u (u fm_term_reduce _302) _defs_2)); (9,f) -> u f (\_304 _305 _306-> _term_1); (10,f) -> u f (\_307-> _term_1); (11,f) -> u f (\_308-> (u (u fm_term_reduce (u fm_term_unroll_nat _308)) _defs_2)); (12,f) -> u f (\_309-> (u (u fm_term_reduce (u fm_term_unroll_chr _309)) _defs_2)); (13,f) -> u f (\_310-> (u (u fm_term_reduce (u fm_term_unroll_str _310)) _defs_2)); (14,f) -> u f (\_311 _312 _313 _314 _315 _316-> _term_1); (15,f) -> u f (\_317 _318-> (u (u fm_term_reduce _318) _defs_2)); }))))
map_new = (0,\t-> t)
fm_def_new = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_stat_6-> (0,\t-> t _file_1 _code_2 _name_3 _term_4 _type_5 _stat_6)))))))
fm_status_init = (0,\t-> t)
fm_parser_case_with = (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_6-> (u (u monad_pure parser_monad) (u (u (u (u (u (u fm_def_new "") "") _name_2) _term_6) _type_4) fm_status_init))))))))))))))
fm_parser_case_case = (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__4-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _term_3))))))))))
map_tie = (\_val_2-> (\_lft_3-> (\_rgt_4-> (1,\t-> t _val_2 _lft_3 _rgt_4))))
map_set = (\_bits_2-> (\_val_3-> (\_map_4-> (let _319 = _bits_2 in (case _319 of {(0,f) -> u f ((let _320 = _map_4 in (case _320 of {(0,f) -> u f ((u (u (u map_tie (u maybe_some _val_3)) map_new) map_new)); (1,f) -> u f (\_321 _322 _323-> (u (u (u map_tie (u maybe_some _val_3)) _322) _323)); }))); (1,f) -> u f (\_324-> (let _325 = _map_4 in (case _325 of {(0,f) -> u f ((u (u (u map_tie maybe_none) (u (u (u map_set _324) _val_3) map_new)) map_new)); (1,f) -> u f (\_326 _327 _328-> (u (u (u map_tie _326) (u (u (u map_set _324) _val_3) _327)) _328)); }))); (2,f) -> u f (\_329-> (let _330 = _map_4 in (case _330 of {(0,f) -> u f ((u (u (u map_tie maybe_none) map_new) (u (u (u map_set _329) _val_3) map_new))); (1,f) -> u f (\_331 _332 _333-> (u (u (u map_tie _331) _332) (u (u (u map_set _329) _val_3) _333))); }))); })))))
map_from_list = (\_f_3-> (\_xs_4-> (let _334 = _xs_4 in (case _334 of {(0,f) -> u f (map_new); (1,f) -> u f (\_335 _336-> (let _337 = _335 in (case _337 of {(0,f) -> u f (\_338 _339-> (u (u (u map_set (u _f_3 _338)) _339) (u (u map_from_list _f_3) _336))); }))); }))))
fm_term_cse = (\_path_1-> (\_expr_2-> (\_name_3-> (\_with_4-> (\_cses_5-> (\_moti_6-> (14,\t-> t _path_1 _expr_2 _name_3 _with_4 _cses_5 _moti_6)))))))
fm_parser_case = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "case ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "as")) (\__5-> fm_parser_name1)))) (\_name_5-> (let _name_6=(let _340 = _name_5 in (case _340 of {(0,f) -> u f ((let _341 = (u (u fm_term_reduce _expr_4) map_new) in (case _341 of {(0,f) -> u f (\_342 _343-> _342); (1,f) -> u f (\_344-> _344); (2,f) -> u f ((u fm_name_read "self")); (3,f) -> u f (\_345 _346 _347 _348 _349-> (u fm_name_read "self")); (4,f) -> u f (\_350 _351-> (u fm_name_read "self")); (5,f) -> u f (\_352 _353-> (u fm_name_read "self")); (6,f) -> u f (\_354 _355 _356-> (u fm_name_read "self")); (7,f) -> u f (\_357 _358 _359-> (u fm_name_read "self")); (8,f) -> u f (\_360 _361 _362-> (u fm_name_read "self")); (9,f) -> u f (\_363 _364 _365-> (u fm_name_read "self")); (10,f) -> u f (\_366-> (u fm_name_read "self")); (11,f) -> u f (\_367-> (u fm_name_read "self")); (12,f) -> u f (\_368-> (u fm_name_read "self")); (13,f) -> u f (\_369-> (u fm_name_read "self")); (14,f) -> u f (\_370 _371 _372 _373 _374 _375-> (u fm_name_read "self")); (15,f) -> u f (\_376 _377-> (u fm_name_read "self")); }))); (1,f) -> u f (\_378-> _378); })) in (u (u (u monad_bind parser_monad) (u parser_many fm_parser_case_with)) (\_wyth_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__8-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) fm_parser_case_case)) (\_cses_9-> (let _cses_10=(u (u map_from_list fm_name_to_bits) _cses_9) in (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_12-> (u (u monad_pure parser_monad) (u maybe_some _term_12))))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "!")) (\__11-> (u (u monad_pure parser_monad) maybe_none)))) (u (u list_cons (u (u monad_pure parser_monad) (u maybe_some (u fm_term_hol bits_e)))) list_nil))))) (\_moti_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) (u (u (u (u (u (u fm_term_cse bits_e) _expr_4) _name_6) _wyth_7) _cses_10) _moti_11)))))))))))))))))))))))))
fm_parser_open = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "open ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "as")) (\__5-> fm_parser_name1)))) (\_name_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (let _name_7=(let _379 = _name_5 in (case _379 of {(0,f) -> u f ((let _380 = (u (u fm_term_reduce _expr_4) map_new) in (case _380 of {(0,f) -> u f (\_381 _382-> _381); (1,f) -> u f (\_383-> _383); (2,f) -> u f ((u fm_name_read "self")); (3,f) -> u f (\_384 _385 _386 _387 _388-> (u fm_name_read "self")); (4,f) -> u f (\_389 _390-> (u fm_name_read "self")); (5,f) -> u f (\_391 _392-> (u fm_name_read "self")); (6,f) -> u f (\_393 _394 _395-> (u fm_name_read "self")); (7,f) -> u f (\_396 _397 _398-> (u fm_name_read "self")); (8,f) -> u f (\_399 _400 _401-> (u fm_name_read "self")); (9,f) -> u f (\_402 _403 _404-> (u fm_name_read "self")); (10,f) -> u f (\_405-> (u fm_name_read "self")); (11,f) -> u f (\_406-> (u fm_name_read "self")); (12,f) -> u f (\_407-> (u fm_name_read "self")); (13,f) -> u f (\_408-> (u fm_name_read "self")); (14,f) -> u f (\_409 _410 _411 _412 _413 _414-> (u fm_name_read "self")); (15,f) -> u f (\_415 _416-> (u fm_name_read "self")); }))); (1,f) -> u f (\_417-> _417); })) in (let _wyth_8=list_nil in (u (u (u monad_bind parser_monad) fm_parser_term) (\_rest_9-> (let _cses_10=(u (u map_from_list fm_name_to_bits) (u (u list_cons (u (u pair_new "_") _rest_9)) list_nil)) in (let _moti_11=(u maybe_some (u fm_term_hol bits_e)) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) (u (u (u (u (u (u fm_term_cse bits_e) _expr_4) _name_7) _wyth_8) _cses_10) _moti_11)))))))))))))))))))))))
parser_digit = (\_idx_1-> (\_code_2-> (let _418 = _code_2 in (if null (_418::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit.") else (let _sidx_5=(u nat_succ _idx_1) in (let _419 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 48)) in (if _419 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 0) else (let _420 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 49)) in (if _420 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 1) else (let _421 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 50)) in (if _421 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 2) else (let _422 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 51)) in (if _422 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 3) else (let _423 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 52)) in (if _423 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 4) else (let _424 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 53)) in (if _424 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 5) else (let _425 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 54)) in (if _425 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 6) else (let _426 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 55)) in (if _426 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 7) else (let _427 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 56)) in (if _427 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 8) else (let _428 = ((((fromIntegral (fromEnum (head _418 :: Char)) :: Word16)::Word16) == 57)) in (if _428 then (u (u (u parser_reply_value _sidx_5) (tail _418)) 9) else (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit."))))))))))))))))))))))))))
nat_add = (\a0-> \a1-> ((a0::Integer) + a1))
nat_mul = (\a0-> \a1-> ((a0::Integer) * a1))
nat_from_base_go = (\_b_1-> (\_ds_2-> (\_p_3-> (\_res_4-> (let _429 = _ds_2 in (case _429 of {(0,f) -> u f (_res_4); (1,f) -> u f (\_430 _431-> (u (u (u (u nat_from_base_go _b_1) _431) (((_b_1::Integer) * _p_3))) ((((((_430::Integer) * _p_3))::Integer) + _res_4)))); }))))))
list_reverse_go = (\_xs_2-> (\_res_3-> (let _432 = _xs_2 in (case _432 of {(0,f) -> u f (_res_3); (1,f) -> u f (\_433 _434-> (u (u list_reverse_go _434) (u (u list_cons _433) _res_3))); }))))
list_reverse = (\_xs_2-> (u (u list_reverse_go _xs_2) list_nil))
nat_from_base = (\_base_1-> (\_ds_2-> (u (u (u (u nat_from_base_go _base_1) (u list_reverse _ds_2)) 1) 0)))
parser_nat = (u (u (u monad_bind parser_monad) (u parser_many1 parser_digit)) (\_digits_1-> (u (u monad_pure parser_monad) (u (u nat_from_base 10) _digits_1))))
bits_tail = (\_a_1-> (let _435 = _a_1 in (case _435 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_436-> _436); (2,f) -> u f (\_437-> _437); })))
bits_inc = (\_a_1-> (let _438 = _a_1 in (case _438 of {(0,f) -> u f ((u bits_i bits_e)); (1,f) -> u f (\_439-> (u bits_i _439)); (2,f) -> u f (\_440-> (u bits_o (u bits_inc _440))); })))
nat_to_bits = (\_n_1-> (let _441 = _n_1 in (if _441==0 then bits_e else (u bits_inc (u nat_to_bits (_441-1))))))
maybe_to_bool = (\_m_2-> (let _442 = _m_2 in (case _442 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_443-> bool_true); })))
fm_term_gol = (\_name_1-> (\_dref_2-> (\_verb_3-> (9,\t-> t _name_1 _dref_2 _verb_3))))
fm_parser_goal = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "?")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u parser_many (u (u (u monad_bind parser_monad) (u fm_parser_text "-")) (\__4-> (u (u (u monad_bind parser_monad) parser_nat) (\_nat_5-> (let _bits_6=(u bits_reverse (u bits_tail (u bits_reverse (u nat_to_bits _nat_5)))) in (u (u monad_pure parser_monad) _bits_6)))))))) (\_dref_4-> (u (u (u monad_bind parser_monad) (u (u (u monad_bind parser_monad) (u parser_maybe (u parser_text "-"))) (\_verb_5-> (u (u monad_pure parser_monad) (u maybe_to_bool _verb_5))))) (\_verb_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u (u (u fm_term_gol _name_3) _dref_4) _verb_5)))))))))))))))
fm_parser_hole = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "_")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_hol bits_e)))))))))
fm_parser_nat = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u (u (u monad_bind parser_monad) parser_nat) (\_natx_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) (u fm_term_nat _natx_3)))))))))))
string_eql = (\a0-> \a1-> ((a0::String) == a1))
parser_fail = (\_error_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_error _idx_3) _code_4) _error_2))))
fm_parser_reference = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (let _444 = (((_name_2::String) == "case")) in (if _444 then (u parser_fail "Reserved keyword.") else (let _445 = (((_name_2::String) == "do")) in (if _445 then (u parser_fail "Reserved keyword.") else (let _446 = (((_name_2::String) == "if")) in (if _446 then (u parser_fail "Reserved keyword.") else (let _447 = (((_name_2::String) == "let")) in (if _447 then (u parser_fail "Reserved keyword.") else (let _448 = (((_name_2::String) == "def")) in (if _448 then (u parser_fail "Reserved keyword.") else (let _449 = (((_name_2::String) == "true")) in (if _449 then (u (u monad_pure parser_monad) (u fm_term_ref "Bool.true")) else (let _450 = (((_name_2::String) == "false")) in (if _450 then (u (u monad_pure parser_monad) (u fm_term_ref "Bool.false")) else (let _451 = (((_name_2::String) == "unit")) in (if _451 then (u (u monad_pure parser_monad) (u fm_term_ref "Unit.new")) else (let _452 = (((_name_2::String) == "none")) in (if _452 then (let _term_3=(u fm_term_ref "Maybe.none") in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_hol bits_e)) in (u (u monad_pure parser_monad) _term_4))) else (let _453 = (((_name_2::String) == "refl")) in (if _453 then (let _term_3=(u fm_term_ref "Equal.refl") in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_hol bits_e)) in (let _term_5=(u (u fm_term_app _term_4) (u fm_term_hol bits_e)) in (u (u monad_pure parser_monad) _term_5)))) else (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_ref _name_2)))))))))))))))))))))))))))))
list_for = (\_xs_2-> (\_b_4-> (\_f_5-> (let _454 = _xs_2 in (case _454 of {(0,f) -> u f (_b_4); (1,f) -> u f (\_455 _456-> (u (u (u list_for _456) (u (u _f_5 _455) _b_4)) _f_5)); })))))
fm_parser_application = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) (u parser_text "(")) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_term))) (\_args_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u (u list_for _args_4) _func_2) (\_x_6-> (\_f_7-> (u (u fm_term_app _f_7) _x_6)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))
parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) list_nil))))
parser_spaces_text = (\_text_1-> (u (u (u monad_bind parser_monad) parser_spaces) (\__2-> (u parser_text _text_1))))
fm_parser_application_erased = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) parser_get_index) (\_init_3-> (u (u (u monad_bind parser_monad) (u parser_text "<")) (\__4-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u parser_spaces_text ">")) (u fm_parser_item fm_parser_term))) (\_args_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_3)) (\_orig_6-> (let _expr_7=(u (u (u list_for _args_5) _func_2) (\_x_7-> (\_f_8-> (u (u fm_term_app _f_8) _x_7)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _expr_7)))))))))))))
fm_parser_arrow = (\_init_1-> (\_xtyp_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "->")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u (u (u fm_term_all bool_false) "") "") _xtyp_2) (\_s_6-> (\_x_7-> _body_4)))))))))))))
fm_parser_op = (\_sym_1-> (\_ref_2-> (\_init_3-> (\_val0_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text _sym_1)) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_3)) (\_orig_7-> (let _term_8=(u fm_term_ref _ref_2) in (let _term_9=(u (u fm_term_app _term_8) _val0_4) in (let _term_10=(u (u fm_term_app _term_9) _val1_6) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_10)))))))))))))))
fm_parser_add = (u (u fm_parser_op "+") "Nat.add")
fm_parser_sub = (u (u fm_parser_op "+") "Nat.add")
fm_parser_mul = (u (u fm_parser_op "*") "Nat.mul")
fm_parser_div = (u (u fm_parser_op "/") "Nat.div")
fm_parser_mod = (u (u fm_parser_op "%") "Nat.mod")
fm_parser_cons = (\_init_1-> (\_head_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "&")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_tail_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "List.cons") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _head_2) in (let _term_9=(u (u fm_term_app _term_8) _tail_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9))))))))))))))))
fm_parser_concat = (\_init_1-> (\_lst0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "++")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_lst1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "List.concat") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _lst0_2) in (let _term_9=(u (u fm_term_app _term_8) _lst1_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9))))))))))))))))
fm_parser_string_concat = (\_init_1-> (\_str0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "|")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_str1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "String.concat") in (let _term_7=(u (u fm_term_app _term_6) _str0_2) in (let _term_8=(u (u fm_term_app _term_7) _str1_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_9-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) _term_8)))))))))))))))
fm_parser_sigma = (\_init_1-> (\_val0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Sigma.new") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_hol bits_e)) in (let _term_9=(u (u fm_term_app _term_8) _val0_2) in (let _term_10=(u (u fm_term_app _term_9) _val1_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_10)))))))))))))))
fm_parser_equality = (\_init_1-> (\_val0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "==")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Equal") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _val0_2) in (let _term_9=(u (u fm_term_app _term_8) _val1_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_9))))))))))))))
fm_term_ann = (\_done_1-> (\_term_2-> (\_type_3-> (8,\t-> t _done_1 _term_2 _type_3))))
fm_parser_annotation = (\_init_1-> (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "::")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u fm_term_ann bool_false) _term_2) _type_4)))))))))))
fm_parser_suffix = (\_init_1-> (\_term_2-> (\_idx_3-> (\_code_4-> (let _suffix_parser_5=(u parser_first_of (u (u list_cons (u (u fm_parser_application _init_1) _term_2)) (u (u list_cons (u (u fm_parser_application_erased _init_1) _term_2)) (u (u list_cons (u (u fm_parser_arrow _init_1) _term_2)) (u (u list_cons (u (u fm_parser_add _init_1) _term_2)) (u (u list_cons (u (u fm_parser_sub _init_1) _term_2)) (u (u list_cons (u (u fm_parser_mul _init_1) _term_2)) (u (u list_cons (u (u fm_parser_div _init_1) _term_2)) (u (u list_cons (u (u fm_parser_mod _init_1) _term_2)) (u (u list_cons (u (u fm_parser_cons _init_1) _term_2)) (u (u list_cons (u (u fm_parser_concat _init_1) _term_2)) (u (u list_cons (u (u fm_parser_string_concat _init_1) _term_2)) (u (u list_cons (u (u fm_parser_sigma _init_1) _term_2)) (u (u list_cons (u (u fm_parser_equality _init_1) _term_2)) (u (u list_cons (u (u fm_parser_annotation _init_1) _term_2)) list_nil))))))))))))))) in (let _457 = (u (u _suffix_parser_5 _idx_3) _code_4) in (case _457 of {(0,f) -> u f (\_458 _459 _460-> (u (u (u parser_reply_value _idx_3) _code_4) _term_2)); (1,f) -> u f (\_461 _462 _463-> (u (u (u (u fm_parser_suffix _init_1) _463) _461) _462)); })))))))
fm_parser_term = (u (u (u monad_bind parser_monad) parser_get_code) (\_code_1-> (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons fm_parser_type) (u (u list_cons fm_parser_forall) (u (u list_cons fm_parser_lambda) (u (u list_cons fm_parser_lambda_erased) (u (u list_cons fm_parser_lambda_nameless) (u (u list_cons fm_parser_parenthesis) (u (u list_cons fm_parser_letforin) (u (u list_cons fm_parser_let) (u (u list_cons fm_parser_get) (u (u list_cons fm_parser_def) (u (u list_cons fm_parser_if) (u (u list_cons fm_parser_char) (u (u list_cons fm_parser_string) (u (u list_cons fm_parser_pair) (u (u list_cons fm_parser_sigma_type) (u (u list_cons fm_parser_some) (u (u list_cons fm_parser_apply) (u (u list_cons fm_parser_list) (u (u list_cons fm_parser_log) (u (u list_cons fm_parser_forin) (u (u list_cons fm_parser_forin2) (u (u list_cons fm_parser_do) (u (u list_cons fm_parser_case) (u (u list_cons fm_parser_open) (u (u list_cons fm_parser_goal) (u (u list_cons fm_parser_hole) (u (u list_cons fm_parser_nat) (u (u list_cons fm_parser_reference) list_nil)))))))))))))))))))))))))))))) (\_term_3-> (u (u fm_parser_suffix _init_2) _term_3)))))))
fm_parser_name_term = (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_3-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _type_3))))))))
fm_binder_new = (\_eras_1-> (\_name_2-> (\_term_3-> (0,\t-> t _eras_1 _name_2 _term_3))))
fm_parser_binder_homo = (\_eras_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text (let _464 = _eras_1 in (if _464 then "<" else "(")))) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text (let _465 = _eras_1 in (if _465 then ">" else ")")))) (u fm_parser_item fm_parser_name_term))) (\_bind_3-> (u (u monad_pure parser_monad) (u (u list_mapped _bind_3) (\_pair_4-> (let _466 = _pair_4 in (case _466 of {(0,f) -> u f (\_467 _468-> (u (u (u fm_binder_new _eras_1) _467) _468)); }))))))))))
list_concat = (\_as_2-> (\_bs_3-> (let _469 = _as_2 in (case _469 of {(0,f) -> u f (_bs_3); (1,f) -> u f (\_470 _471-> (u (u list_cons _470) (u (u list_concat _471) _bs_3))); }))))
list_flatten = (\_xs_2-> (let _472 = _xs_2 in (case _472 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_473 _474-> (u (u list_concat _473) (u list_flatten _474))); })))
fm_parser_binder = (u (u (u monad_bind parser_monad) (u parser_many1 (u parser_first_of (u (u list_cons (u fm_parser_binder_homo bool_true)) (u (u list_cons (u fm_parser_binder_homo bool_false)) list_nil))))) (\_lists_1-> (u (u monad_pure parser_monad) (u list_flatten _lists_1))))
fm_parser_make_forall = (\_binds_1-> (\_body_2-> (let _475 = _binds_1 in (case _475 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_476 _477-> (let _478 = _476 in (case _478 of {(0,f) -> u f (\_479 _480 _481-> (u (u (u (u (u fm_term_all _479) "") _480) _481) (\_s_8-> (\_x_9-> (u (u fm_parser_make_forall _477) _body_2))))); }))); }))))
list_at = (\_index_2-> (\_list_3-> (let _482 = _list_3 in (case _482 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_483 _484-> (let _485 = _index_2 in (if _485==0 then (u maybe_some _483) else (u (u list_at (_485-1)) _484)))); }))))
list_at_last = (\_index_2-> (\_list_3-> (u (u list_at _index_2) (u list_reverse _list_3))))
fm_term_var = (\_name_1-> (\_indx_2-> (0,\t-> t _name_1 _indx_2)))
pair_snd = (\_pair_3-> (let _486 = _pair_3 in (case _486 of {(0,f) -> u f (\_487 _488-> _488); })))
fm_name_eql = (\_a_1-> (\_b_2-> (((_a_1::String) == _b_2))))
fm_context_find = (\_name_1-> (\_ctx_2-> (let _489 = _ctx_2 in (case _489 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_490 _491-> (let _492 = _490 in (case _492 of {(0,f) -> u f (\_493 _494-> (let _495 = (u (u fm_name_eql _name_1) _493) in (if _495 then (u maybe_some _494) else (u (u fm_context_find _name_1) _491)))); }))); }))))
list_length = (\_xs_2-> (let _496 = _xs_2 in (case _496 of {(0,f) -> u f (0); (1,f) -> u f (\_497 _498-> (u nat_succ (u list_length _498))); })))
fm_path_o = (\_path_1-> (\_x_2-> (u _path_1 (u bits_o _x_2))))
fm_path_i = (\_path_1-> (\_x_2-> (u _path_1 (u bits_i _x_2))))
fm_path_to_bits = (\_path_1-> (u _path_1 bits_e))
fm_term_bind = (\_vars_1-> (\_path_2-> (\_term_3-> (let _499 = _term_3 in (case _499 of {(0,f) -> u f (\_500 _501-> (let _502 = (u (u list_at_last _501) _vars_1) in (case _502 of {(0,f) -> u f ((u (u fm_term_var _500) _501)); (1,f) -> u f (\_503-> (u pair_snd _503)); }))); (1,f) -> u f (\_504-> (let _505 = (u (u fm_context_find _504) _vars_1) in (case _505 of {(0,f) -> u f ((u fm_term_ref _504)); (1,f) -> u f (\_506-> _506); }))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_507 _508 _509 _510 _511-> (let _vlen_9=(u list_length _vars_1) in (u (u (u (u (u fm_term_all _507) _508) _509) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _510)) (\_s_10-> (\_x_11-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _509) _x_11)) (u (u list_cons (u (u pair_new _508) _s_10)) _vars_1))) (u fm_path_i _path_2)) (u (u _511 (u (u fm_term_var _508) _vlen_9)) (u (u fm_term_var _509) (u nat_succ _vlen_9))))))))); (4,f) -> u f (\_512 _513-> (let _vlen_6=(u list_length _vars_1) in (u (u fm_term_lam _512) (\_x_7-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _512) _x_7)) _vars_1)) (u fm_path_o _path_2)) (u _513 (u (u fm_term_var _512) _vlen_6))))))); (5,f) -> u f (\_514 _515-> (u (u fm_term_app (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _514)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _515))); (6,f) -> u f (\_516 _517 _518-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_let _516) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _517)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _516) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _518 (u (u fm_term_var _516) _vlen_7))))))); (7,f) -> u f (\_519 _520 _521-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_def _519) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _520)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _519) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _521 (u (u fm_term_var _519) _vlen_7))))))); (8,f) -> u f (\_522 _523 _524-> (u (u (u fm_term_ann _522) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _523)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _524))); (9,f) -> u f (\_525 _526 _527-> (u (u (u fm_term_gol _525) _526) _527)); (10,f) -> u f (\_528-> (u fm_term_hol (u fm_path_to_bits _path_2))); (11,f) -> u f (\_529-> (u fm_term_nat _529)); (12,f) -> u f (\_530-> (u fm_term_chr _530)); (13,f) -> u f (\_531-> (u fm_term_str _531)); (14,f) -> u f (\_532 _533 _534 _535 _536 _537-> (let _expr_10=(u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _533) in (let _name_11=_534 in (let _wyth_12=_535 in (let _cses_13=_536 in (let _moti_14=_537 in (u (u (u (u (u (u fm_term_cse (u fm_path_to_bits _path_2)) _expr_10) _name_11) _wyth_12) _cses_13) _moti_14))))))); (15,f) -> u f (\_538 _539-> (u (u fm_term_ori _538) (u (u (u fm_term_bind _vars_1) _path_2) _539))); })))))
fm_status_done = (2,\t-> t)
fm_set = (\_name_2-> (\_val_3-> (\_map_4-> (u (u (u map_set (u fm_name_to_bits _name_2)) _val_3) _map_4))))
fm_define = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_done_6-> (\_defs_7-> (let _stat_8=(let _540 = _done_6 in (if _540 then fm_status_done else fm_status_init)) in (u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_4) _type_5) _stat_8)) _defs_7)))))))))
fm_parser_file_def = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_binder)) (\_args_5-> (let _args_6=(u list_flatten _args_5) in (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_9-> (let _type_10=(u (u fm_parser_make_forall _args_6) _type_8) in (let _term_11=(u (u fm_parser_make_lambda (u (u list_mapped _args_6) (\_x_11-> (let _541 = _x_11 in (case _541 of {(0,f) -> u f (\_542 _543 _544-> _543); }))))) _term_9) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_i _x_12))) _type_10) in (let _term_13=(u (u (u fm_term_bind list_nil) (\_x_13-> (u bits_o _x_13))) _term_11) in (let _defs_14=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _name_4) _term_13) _type_12) bool_false) _defs_3) in (u (u monad_pure parser_monad) _defs_14))))))))))))))))))))
maybe_default = (\_a_2-> (\_m_3-> (let _545 = _m_3 in (case _545 of {(0,f) -> u f (_a_2); (1,f) -> u f (\_546-> _546); }))))
fm_constructor_new = (\_name_1-> (\_args_2-> (\_inds_3-> (0,\t-> t _name_1 _args_2 _inds_3))))
fm_parser_constructor = (\_namespace_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_args_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _args_5=(u (u maybe_default list_nil) _args_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u monad_pure parser_monad) (u (u (u fm_constructor_new _name_2) _args_5) _inds_6)))))))))))
fm_datatype_new = (\_name_1-> (\_pars_2-> (\_inds_3-> (\_ctrs_4-> (0,\t-> t _name_1 _pars_2 _inds_3 _ctrs_4)))))
fm_parser_datatype = (u (u (u monad_bind parser_monad) (u fm_parser_text "type ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_pars_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _pars_5=(u (u maybe_default list_nil) _pars_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__7-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) (u fm_parser_item (u fm_parser_constructor _name_2)))) (\_ctrs_8-> (u (u monad_pure parser_monad) (u (u (u (u fm_datatype_new _name_2) _pars_5) _inds_6) _ctrs_8))))))))))))))))
fm_datatype_build_term_motive_go = (\_type_1-> (\_name_2-> (\_inds_3-> (let _547 = _inds_3 in (case _547 of {(0,f) -> u f ((let _548 = _type_1 in (case _548 of {(0,f) -> u f (\_549 _550 _551 _552-> (let _slf_8=(u fm_term_ref _name_2) in (let _slf_9=(u (u (u list_for _550) _slf_8) (\_var_9-> (\_slf_10-> (u (u fm_term_app _slf_10) (u fm_term_ref (let _553 = _var_9 in (case _553 of {(0,f) -> u f (\_554 _555 _556-> _555); }))))))) in (let _slf_10=(u (u (u list_for _551) _slf_9) (\_var_10-> (\_slf_11-> (u (u fm_term_app _slf_11) (u fm_term_ref (let _557 = _var_10 in (case _557 of {(0,f) -> u f (\_558 _559 _560-> _559); }))))))) in (u (u (u (u (u fm_term_all bool_false) "") "") _slf_10) (\_s_11-> (\_x_12-> fm_term_typ))))))); }))); (1,f) -> u f (\_561 _562-> (let _563 = _561 in (case _563 of {(0,f) -> u f (\_564 _565 _566-> (u (u (u (u (u fm_term_all _564) "") _565) _566) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_motive_go _type_1) _name_2) _562))))); }))); })))))
fm_datatype_build_term_motive = (\_type_1-> (let _567 = _type_1 in (case _567 of {(0,f) -> u f (\_568 _569 _570 _571-> (u (u (u fm_datatype_build_term_motive_go _type_1) _568) _570)); })))
fm_datatype_build_term_constructor_go = (\_type_1-> (\_ctor_2-> (\_args_3-> (let _572 = _args_3 in (case _572 of {(0,f) -> u f ((let _573 = _type_1 in (case _573 of {(0,f) -> u f (\_574 _575 _576 _577-> (let _578 = _ctor_2 in (case _578 of {(0,f) -> u f (\_579 _580 _581-> (let _ret_11=(u fm_term_ref (u fm_name_read "P")) in (let _ret_12=(u (u (u list_for _581) _ret_11) (\_var_12-> (\_ret_13-> (u (u fm_term_app _ret_13) (let _582 = _var_12 in (case _582 of {(0,f) -> u f (\_583 _584 _585-> _585); })))))) in (let _ctr_13=(u string_flatten (u (u list_cons _574) (u (u list_cons (u fm_name_read ".")) (u (u list_cons _579) list_nil)))) in (let _slf_14=(u fm_term_ref _ctr_13) in (let _slf_15=(u (u (u list_for _575) _slf_14) (\_var_15-> (\_slf_16-> (u (u fm_term_app _slf_16) (u fm_term_ref (let _586 = _var_15 in (case _586 of {(0,f) -> u f (\_587 _588 _589-> _588); }))))))) in (let _slf_16=(u (u (u list_for _580) _slf_15) (\_var_16-> (\_slf_17-> (u (u fm_term_app _slf_17) (u fm_term_ref (let _590 = _var_16 in (case _590 of {(0,f) -> u f (\_591 _592 _593-> _592); }))))))) in (u (u fm_term_app _ret_12) _slf_16)))))))); }))); }))); (1,f) -> u f (\_594 _595-> (let _596 = _594 in (case _596 of {(0,f) -> u f (\_597 _598 _599-> (let _eras_9=_597 in (let _name_10=_598 in (let _xtyp_11=_599 in (let _body_12=(u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _595) in (u (u (u (u (u fm_term_all _eras_9) "") _name_10) _xtyp_11) (\_s_13-> (\_x_14-> _body_12)))))))); }))); })))))
fm_datatype_build_term_constructor = (\_type_1-> (\_ctor_2-> (let _600 = _ctor_2 in (case _600 of {(0,f) -> u f (\_601 _602 _603-> (u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _602)); }))))
fm_datatype_build_term_constructors_go = (\_type_1-> (\_name_2-> (\_ctrs_3-> (let _604 = _ctrs_3 in (case _604 of {(0,f) -> u f ((let _605 = _type_1 in (case _605 of {(0,f) -> u f (\_606 _607 _608 _609-> (let _ret_8=(u fm_term_ref (u fm_name_read "P")) in (let _ret_9=(u (u (u list_for _608) _ret_8) (\_var_9-> (\_ret_10-> (u (u fm_term_app _ret_10) (u fm_term_ref (let _610 = _var_9 in (case _610 of {(0,f) -> u f (\_611 _612 _613-> _612); }))))))) in (u (u fm_term_app _ret_9) (u fm_term_ref (((_name_2::String) ++ ".Self"))))))); }))); (1,f) -> u f (\_614 _615-> (let _616 = _614 in (case _616 of {(0,f) -> u f (\_617 _618 _619-> (u (u (u (u (u fm_term_all bool_false) "") _617) (u (u fm_datatype_build_term_constructor _type_1) _614)) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _name_2) _615))))); }))); })))))
fm_datatype_build_term_constructors = (\_type_1-> (let _620 = _type_1 in (case _620 of {(0,f) -> u f (\_621 _622 _623 _624-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _621) _624)); })))
fm_datatype_build_term_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _625 = _pars_3 in (case _625 of {(0,f) -> u f ((let _626 = _inds_4 in (case _626 of {(0,f) -> u f ((u (u (u (u (u fm_term_all bool_true) (((_name_2::String) ++ ".Self"))) (u fm_name_read "P")) (u fm_datatype_build_term_motive _type_1)) (\_s_5-> (\_x_6-> (u fm_datatype_build_term_constructors _type_1))))); (1,f) -> u f (\_627 _628-> (let _629 = _627 in (case _629 of {(0,f) -> u f (\_630 _631 _632-> (u (u fm_term_lam _631) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _pars_3) _628)))); }))); }))); (1,f) -> u f (\_633 _634-> (let _635 = _633 in (case _635 of {(0,f) -> u f (\_636 _637 _638-> (u (u fm_term_lam _637) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _634) _inds_4)))); }))); }))))))
fm_datatype_build_term = (\_type_1-> (let _639 = _type_1 in (case _639 of {(0,f) -> u f (\_640 _641 _642 _643-> (u (u (u (u fm_datatype_build_term_go _type_1) _640) _641) _642)); })))
fm_datatype_build_type_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _644 = _pars_3 in (case _644 of {(0,f) -> u f ((let _645 = _inds_4 in (case _645 of {(0,f) -> u f (fm_term_typ); (1,f) -> u f (\_646 _647-> (let _648 = _646 in (case _648 of {(0,f) -> u f (\_649 _650 _651-> (u (u (u (u (u fm_term_all bool_false) "") _650) _651) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _pars_3) _647))))); }))); }))); (1,f) -> u f (\_652 _653-> (let _654 = _652 in (case _654 of {(0,f) -> u f (\_655 _656 _657-> (u (u (u (u (u fm_term_all bool_false) "") _656) _657) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _653) _inds_4))))); }))); }))))))
fm_datatype_build_type = (\_type_1-> (let _658 = _type_1 in (case _658 of {(0,f) -> u f (\_659 _660 _661 _662-> (u (u (u (u fm_datatype_build_type_go _type_1) _659) _660) _661)); })))
fm_constructor_build_term_opt_go = (\_type_1-> (\_ctor_2-> (\_ctrs_3-> (let _663 = _ctrs_3 in (case _663 of {(0,f) -> u f ((let _664 = _ctor_2 in (case _664 of {(0,f) -> u f (\_665 _666 _667-> (let _ret_7=(u fm_term_ref _665) in (let _ret_8=(u (u (u list_for _666) _ret_7) (\_arg_8-> (\_ret_9-> (u (u fm_term_app _ret_9) (u fm_term_ref (let _668 = _arg_8 in (case _668 of {(0,f) -> u f (\_669 _670 _671-> _670); }))))))) in _ret_8))); }))); (1,f) -> u f (\_672 _673-> (let _674 = _672 in (case _674 of {(0,f) -> u f (\_675 _676 _677-> (u (u fm_term_lam _675) (\_x_9-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _673)))); }))); })))))
fm_constructor_build_term_opt = (\_type_1-> (\_ctor_2-> (let _678 = _type_1 in (case _678 of {(0,f) -> u f (\_679 _680 _681 _682-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _682)); }))))
fm_constructor_build_term_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _683 = _pars_4 in (case _683 of {(0,f) -> u f ((let _684 = _args_5 in (case _684 of {(0,f) -> u f ((u (u fm_term_lam (u fm_name_read "P")) (\_x_6-> (u (u fm_constructor_build_term_opt _type_1) _ctor_2)))); (1,f) -> u f (\_685 _686-> (let _687 = _685 in (case _687 of {(0,f) -> u f (\_688 _689 _690-> (u (u fm_term_lam _689) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _pars_4) _686)))); }))); }))); (1,f) -> u f (\_691 _692-> (let _693 = _691 in (case _693 of {(0,f) -> u f (\_694 _695 _696-> (u (u fm_term_lam _695) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _692) _args_5)))); }))); })))))))
fm_constructor_build_term = (\_type_1-> (\_ctor_2-> (let _697 = _type_1 in (case _697 of {(0,f) -> u f (\_698 _699 _700 _701-> (let _702 = _ctor_2 in (case _702 of {(0,f) -> u f (\_703 _704 _705-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _698) _699) _704)); }))); }))))
fm_constructor_build_type_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _706 = _pars_4 in (case _706 of {(0,f) -> u f ((let _707 = _args_5 in (case _707 of {(0,f) -> u f ((let _708 = _type_1 in (case _708 of {(0,f) -> u f (\_709 _710 _711 _712-> (let _713 = _ctor_2 in (case _713 of {(0,f) -> u f (\_714 _715 _716-> (let _type_13=(u fm_term_ref _name_3) in (let _type_14=(u (u (u list_for _710) _type_13) (\_var_14-> (\_type_15-> (u (u fm_term_app _type_15) (u fm_term_ref (let _717 = _var_14 in (case _717 of {(0,f) -> u f (\_718 _719 _720-> _719); }))))))) in (let _type_15=(u (u (u list_for _716) _type_14) (\_var_15-> (\_type_16-> (u (u fm_term_app _type_16) (let _721 = _var_15 in (case _721 of {(0,f) -> u f (\_722 _723 _724-> _724); })))))) in _type_15)))); }))); }))); (1,f) -> u f (\_725 _726-> (let _727 = _725 in (case _727 of {(0,f) -> u f (\_728 _729 _730-> (u (u (u (u (u fm_term_all _728) "") _729) _730) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _pars_4) _726))))); }))); }))); (1,f) -> u f (\_731 _732-> (let _733 = _731 in (case _733 of {(0,f) -> u f (\_734 _735 _736-> (u (u (u (u (u fm_term_all _734) "") _735) _736) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _732) _args_5))))); }))); })))))))
fm_constructor_build_type = (\_type_1-> (\_ctor_2-> (let _737 = _type_1 in (case _737 of {(0,f) -> u f (\_738 _739 _740 _741-> (let _742 = _ctor_2 in (case _742 of {(0,f) -> u f (\_743 _744 _745-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _738) _739) _744)); }))); }))))
fm_parser_file_adt = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_datatype) (\_adt_4-> (let _746 = _adt_4 in (case _746 of {(0,f) -> u f (\_747 _748 _749 _750-> (let _term_9=(u fm_datatype_build_term _adt_4) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_i _x_10))) _term_9) in (let _type_11=(u fm_datatype_build_type _adt_4) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_o _x_12))) _type_11) in (let _defs_13=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _747) _term_10) _type_12) bool_false) _defs_3) in (let _defs_14=(u (u (u list_fold _750) _defs_13) (\_ctr_14-> (\_defs_15-> (let _typ_name_16=_747 in (let _ctr_name_17=(u string_flatten (u (u list_cons _typ_name_16) (u (u list_cons (u fm_name_read ".")) (u (u list_cons (let _751 = _ctr_14 in (case _751 of {(0,f) -> u f (\_752 _753 _754-> _752); }))) list_nil)))) in (let _ctr_term_18=(u (u fm_constructor_build_term _adt_4) _ctr_14) in (let _ctr_term_19=(u (u (u fm_term_bind list_nil) (\_x_19-> (u bits_i _x_19))) _ctr_term_18) in (let _ctr_type_20=(u (u fm_constructor_build_type _adt_4) _ctr_14) in (let _ctr_type_21=(u (u (u fm_term_bind list_nil) (\_x_21-> (u bits_o _x_21))) _ctr_type_20) in (u (u (u (u (u (u (u fm_define _file_1) _code_2) _ctr_name_17) _ctr_term_19) _ctr_type_21) bool_false) _defs_15)))))))))) in (u (u monad_pure parser_monad) _defs_14)))))))); })))))))
parser_eof = (\_idx_1-> (\_code_2-> (let _755 = _code_2 in (if null (_755::String) then (u (u (u parser_reply_value _idx_1) _code_2) unit_new) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected end-of-file.")))))
fm_parser_file_end = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__4-> (u (u (u monad_bind parser_monad) parser_eof) (\__5-> (u (u monad_pure parser_monad) _defs_3))))))))
fm_parser_file = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) parser_is_eof) (\_stop_4-> (let _756 = _stop_4 in (if _756 then (u (u monad_pure parser_monad) _defs_3) else (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "#")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_file_6-> (u (u (u fm_parser_file _file_6) _code_2) _defs_3)))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u fm_parser_file_def _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_adt _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_end _file_1) _code_2) _defs_3)) list_nil))))) (\_defs_5-> (u (u (u fm_parser_file _file_1) _code_2) _defs_5)))) list_nil))))))))))
either = (\_a_1-> (\_b_2-> ()))
string_join_go = (\_sep_1-> (\_list_2-> (\_fst_3-> (let _757 = _list_2 in (case _757 of {(0,f) -> u f (""); (1,f) -> u f (\_758 _759-> (u string_flatten (u (u list_cons (let _760 = _fst_3 in (if _760 then "" else _sep_1))) (u (u list_cons _758) (u (u list_cons (u (u (u string_join_go _sep_1) _759) bool_false)) list_nil))))); })))))
string_join = (\_sep_1-> (\_list_2-> (u (u (u string_join_go _sep_1) _list_2) bool_true)))
fm_highlight_end = (\_col_1-> (\_row_2-> (\_res_3-> (u (u string_join "\n") _res_3))))
maybe_extract = (\_m_2-> (\_a_4-> (\_f_5-> (let _761 = _m_2 in (case _761 of {(0,f) -> u f (_a_4); (1,f) -> u f (\_762-> (u _f_5 _762)); })))))
nat_is_zero = (\_n_1-> (let _763 = _n_1 in (if _763==0 then bool_true else bool_false)))
nat_double = (\_n_1-> (let _764 = _n_1 in (if _764==0 then nat_zero else (u nat_succ (u nat_succ (u nat_double (_764-1)))))))
nat_pred = (\_n_1-> (let _765 = _n_1 in (if _765==0 then nat_zero else (_765-1))))
list_take = (\_n_2-> (\_xs_3-> (let _766 = _xs_3 in (case _766 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_767 _768-> (let _769 = _n_2 in (if _769==0 then list_nil else (u (u list_cons _767) (u (u list_take (_769-1)) _768))))); }))))
string_reverse_go = (\_xs_1-> (\_res_2-> (let _770 = _xs_1 in (if null (_770::String) then _res_2 else (u (u string_reverse_go (tail _770)) (u (u string_cons (fromIntegral (fromEnum (head _770 :: Char)) :: Word16)) _res_2))))))
string_reverse = (\_xs_1-> (u (u string_reverse_go _xs_1) string_nil))
string_pad_right = (\_size_1-> (\_chr_2-> (\_str_3-> (let _771 = _size_1 in (if _771==0 then _str_3 else (let _772 = _str_3 in (if null (_772::String) then (u (u string_cons _chr_2) (u (u (u string_pad_right (_771-1)) _chr_2) "")) else (u (u string_cons (fromIntegral (fromEnum (head _772 :: Char)) :: Word16)) (u (u (u string_pad_right (_771-1)) _chr_2) (tail _772))))))))))
string_pad_left = (\_size_1-> (\_chr_2-> (\_str_3-> (u string_reverse (u (u (u string_pad_right _size_1) _chr_2) (u string_reverse _str_3))))))
either_left = (\_value_3-> (0,\t-> t _value_3))
either_right = (\_value_3-> (1,\t-> t _value_3))
nat_sub_rem = (\_n_1-> (\_m_2-> (let _773 = _m_2 in (if _773==0 then (u either_left _n_1) else (let _774 = _n_1 in (if _774==0 then (u either_right (u nat_succ (_773-1))) else (u (u nat_sub_rem (_774-1)) (_773-1))))))))
nat_div_mod_go = (\_n_1-> (\_m_2-> (\_d_3-> (let _775 = (u (u nat_sub_rem _n_1) _m_2) in (case _775 of {(0,f) -> u f (\_776-> (u (u (u nat_div_mod_go _776) _m_2) (u nat_succ _d_3))); (1,f) -> u f (\_777-> (u (u pair_new _d_3) _n_1)); })))))
nat_div_mod = (\_n_1-> (\_m_2-> (u (u (u nat_div_mod_go _n_1) _m_2) nat_zero)))
nat_to_base_go = (\_base_1-> (\_nat_2-> (\_res_3-> (let _778 = (u (u nat_div_mod _nat_2) _base_1) in (case _778 of {(0,f) -> u f (\_779 _780-> (let _781 = _779 in (if _781==0 then (u (u list_cons _780) _res_3) else (u (u (u nat_to_base_go _base_1) _779) (u (u list_cons _780) _res_3))))); })))))
nat_to_base = (\_base_1-> (\_nat_2-> (u (u (u nat_to_base_go _base_1) _nat_2) list_nil)))
nat_ltn = (\a0-> \a1-> ((a0::Integer) < a1))
nat_sub = (\a0-> \a1-> ((a0::Integer) - a1))
nat_mod = (\_n_1-> (\_m_2-> (let _782 = (((_n_1::Integer) < _m_2)) in (if _782 then _n_1 else (u (u nat_mod (((_n_1::Integer) - _m_2))) _m_2)))))
nat_lte = (\a0-> \a1-> ((a0::Integer) <= a1))
nat_show_digit = (\_base_1-> (\_n_2-> (let _m_3=(u (u nat_mod _n_2) _base_1) in (let _base64_4=(u (u list_cons 48) (u (u list_cons 49) (u (u list_cons 50) (u (u list_cons 51) (u (u list_cons 52) (u (u list_cons 53) (u (u list_cons 54) (u (u list_cons 55) (u (u list_cons 56) (u (u list_cons 57) (u (u list_cons 65) (u (u list_cons 66) (u (u list_cons 67) (u (u list_cons 68) (u (u list_cons 69) (u (u list_cons 70) (u (u list_cons 71) (u (u list_cons 72) (u (u list_cons 73) (u (u list_cons 74) (u (u list_cons 75) (u (u list_cons 76) (u (u list_cons 77) (u (u list_cons 78) (u (u list_cons 79) (u (u list_cons 80) (u (u list_cons 81) (u (u list_cons 82) (u (u list_cons 83) (u (u list_cons 84) (u (u list_cons 85) (u (u list_cons 86) (u (u list_cons 87) (u (u list_cons 88) (u (u list_cons 89) (u (u list_cons 90) (u (u list_cons 97) (u (u list_cons 98) (u (u list_cons 99) (u (u list_cons 100) (u (u list_cons 101) (u (u list_cons 102) (u (u list_cons 103) (u (u list_cons 104) (u (u list_cons 105) (u (u list_cons 106) (u (u list_cons 107) (u (u list_cons 108) (u (u list_cons 109) (u (u list_cons 110) (u (u list_cons 111) (u (u list_cons 112) (u (u list_cons 113) (u (u list_cons 114) (u (u list_cons 115) (u (u list_cons 116) (u (u list_cons 117) (u (u list_cons 118) (u (u list_cons 119) (u (u list_cons 120) (u (u list_cons 121) (u (u list_cons 122) (u (u list_cons 43) (u (u list_cons 47) list_nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (let _783 = (((((_base_1::Integer) > 0)) && (((_base_1::Integer) <= 64)))) in (if _783 then (let _784 = (u (u list_at _m_3) _base64_4) in (case _784 of {(0,f) -> u f (35); (1,f) -> u f (\_785-> _785); })) else 35))))))
nat_to_string_base = (\_base_1-> (\_nat_2-> (u (u (u list_fold (u (u nat_to_base _base_1) _nat_2)) string_nil) (\_n_3-> (\_str_4-> (u (u string_cons (u (u nat_show_digit _base_1) _n_3)) _str_4))))))
nat_show = (\_n_1-> (u (u nat_to_string_base 10) _n_1))
bool_not = (\a0-> (not a0))
fm_color = (\_col_1-> (\_str_2-> (u (u string_cons 27) (u (u string_cons 91) (((_col_1::String) ++ (u (u string_cons 109) (((_str_2::String) ++ (u (u string_cons 27) (u (u string_cons 91) (u (u string_cons 48) (u (u string_cons 109) string_nil)))))))))))))
fm_highlight_tc = (\_code_1-> (\_ix0_2-> (\_ix1_3-> (\_col_4-> (\_row_5-> (\_lft_6-> (\_lin_7-> (\_res_8-> (let _786 = _code_1 in (if null (_786::String) then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _787 = ((((fromIntegral (fromEnum (head _786 :: Char)) :: Word16)::Word16) == 10)) in (if _787 then (let _stp_11=(u (u (u maybe_extract _lft_6) bool_false) nat_is_zero) in (let _788 = _stp_11 in (if _788 then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _spa_12=3 in (let _siz_13=(u nat_succ (u nat_double _spa_12)) in (let _lft_14=(let _789 = _ix1_3 in (if _789==0 then (let _790 = _lft_6 in (case _790 of {(0,f) -> u f ((u maybe_some _spa_12)); (1,f) -> u f (\_791-> (u maybe_some (u nat_pred _791))); })) else _lft_6)) in (let _ix0_15=(u nat_pred _ix0_2) in (let _ix1_16=(u nat_pred _ix1_3) in (let _col_17=0 in (let _row_18=(u nat_succ _row_5) in (let _res_19=(u (u list_take _siz_13) (u (u list_cons (u string_reverse _lin_7)) _res_8)) in (let _lin_20=(u string_reverse (u string_flatten (u (u list_cons (u (u (u string_pad_left 4) 32) (u nat_show _row_18))) (u (u list_cons " | ") list_nil)))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _786)) _ix0_15) _ix1_16) _col_17) _row_18) _lft_14) _lin_20) _res_19))))))))))))) else (let _chr_11=(u (u string_cons (fromIntegral (fromEnum (head _786 :: Char)) :: Word16)) string_nil) in (let _chr_12=(let _792 = (((u nat_is_zero _ix0_2) && ((not (u nat_is_zero _ix1_3))))) in (if _792 then (u string_reverse (u (u fm_color "31") (u (u fm_color "4") _chr_11))) else _chr_11)) in (let _ix0_13=(u nat_pred _ix0_2) in (let _ix1_14=(u nat_pred _ix1_3) in (let _col_15=(u nat_succ _col_4) in (let _lin_16=(u string_flatten (u (u list_cons _chr_12) (u (u list_cons _lin_7) list_nil))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _786)) _ix0_13) _ix1_14) _col_15) _row_5) _lft_6) _lin_16) _res_8)))))))))))))))))))
fm_highlight = (\_code_1-> (\_idx0_2-> (\_idx1_3-> (u (u (u (u (u (u (u (u fm_highlight_tc _code_1) _idx0_2) _idx1_3) 0) 1) maybe_none) (u string_reverse "   1 | ")) list_nil))))
fm_defs_read = (\_file_1-> (\_code_2-> (\_defs_3-> (let _793 = (u (u (u (u (u fm_parser_file _file_1) _code_2) _defs_3) 0) _code_2) in (case _793 of {(0,f) -> u f (\_794 _795 _796-> (let _err_7=_796 in (let _hig_8=(u (u (u fm_highlight _code_2) _794) (u nat_succ _794)) in (let _str_9=(u string_flatten (u (u list_cons _err_7) (u (u list_cons "\n") (u (u list_cons _hig_8) list_nil)))) in (u either_left _str_9))))); (1,f) -> u f (\_797 _798 _799-> (u either_right _799)); })))))
fm_synth_load = (\_name_1-> (\_defs_2-> (let _file_3=(u fm_synth_file_of _name_1) in (u (u (u monad_bind io_monad) (u io_get_file _file_3)) (\_code_4-> (let _read_5=(u (u (u fm_defs_read _file_3) _code_4) _defs_2) in (let _800 = _read_5 in (case _800 of {(0,f) -> u f (\_801-> (u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_802-> (let _defs_7=_802 in (let _803 = (u (u fm_get _name_1) _defs_7) in (case _803 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_804-> (u (u monad_pure io_monad) (u maybe_some _defs_7))); })))); }))))))))
io_print = (\_text_1-> (u (u (u io_ask "print") _text_1) (\_skip_2-> (u io_end unit_new))))
fm_status_wait = (1,\t-> t)
fm_check = (\_v_1-> ())
fm_check_result = (\_value_2-> (\_errors_3-> (0,\t-> t _value_2 _errors_3)))
fm_check_bind = (\_a_3-> (\_f_4-> (let _805 = _a_3 in (case _805 of {(0,f) -> u f (\_806 _807-> (let _808 = _806 in (case _808 of {(0,f) -> u f ((u (u fm_check_result maybe_none) _807)); (1,f) -> u f (\_809-> (let _810 = (u _f_4 _809) in (case _810 of {(0,f) -> u f (\_811 _812-> (u (u fm_check_result _811) (u (u list_concat _807) _812))); }))); }))); }))))
fm_check_pure = (\_value_2-> (u (u fm_check_result (u maybe_some _value_2)) list_nil))
fm_check_monad = (u (u monad_new fm_check_bind) fm_check_pure)
fm_error_undefined_reference = (\_origin_1-> (\_name_2-> (5,\t-> t _origin_1 _name_2)))
fm_error_waiting = (\_name_1-> (2,\t-> t _name_1))
fm_error_indirect = (\_name_1-> (3,\t-> t _name_1))
maybe_mapped = (\_m_2-> (\_f_4-> (let _813 = _m_2 in (case _813 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_814-> (u maybe_some (u _f_4 _814))); }))))
fm_mpath_o = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_o))
fm_mpath_i = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_i))
fm_error_cant_infer = (\_origin_1-> (\_term_2-> (\_context_3-> (6,\t-> t _origin_1 _term_2 _context_3))))
fm_error_type_mismatch = (\_origin_1-> (\_expected_2-> (\_detected_3-> (\_context_4-> (0,\t-> t _origin_1 _expected_2 _detected_3 _context_4)))))
fm_error_show_goal = (\_name_1-> (\_dref_2-> (\_verb_3-> (\_goal_4-> (\_context_5-> (1,\t-> t _name_1 _dref_2 _verb_3 _goal_4 _context_5))))))
list_tail = (\_xs_2-> (let _815 = _xs_2 in (case _815 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_816 _817-> _817); })))
fm_smartmotive_vals_cont = (\_expr_1-> (\_term_2-> (\_args_3-> (\_defs_4-> (let _818 = (u (u fm_term_reduce _term_2) _defs_4) in (case _818 of {(0,f) -> u f (\_819 _820-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (1,f) -> u f (\_821-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (2,f) -> u f ((u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (3,f) -> u f (\_822 _823 _824 _825 _826-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (4,f) -> u f (\_827 _828-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (5,f) -> u f (\_829 _830-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _829) (u (u list_cons _830) _args_3)) _defs_4)); (6,f) -> u f (\_831 _832 _833-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (7,f) -> u f (\_834 _835 _836-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (8,f) -> u f (\_837 _838 _839-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (9,f) -> u f (\_840 _841 _842-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (10,f) -> u f (\_843-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (11,f) -> u f (\_844-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (12,f) -> u f (\_845-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (13,f) -> u f (\_846-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (14,f) -> u f (\_847 _848 _849 _850 _851 _852-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (15,f) -> u f (\_853 _854-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); }))))))
fm_smartmotive_vals = (\_expr_1-> (\_type_2-> (\_defs_3-> (let _855 = (u (u fm_term_reduce _type_2) _defs_3) in (case _855 of {(0,f) -> u f (\_856 _857-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (1,f) -> u f (\_858-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (2,f) -> u f ((u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (3,f) -> u f (\_859 _860 _861 _862 _863-> (u (u (u fm_smartmotive_vals _expr_1) (u (u _863 fm_term_typ) fm_term_typ)) _defs_3)); (4,f) -> u f (\_864 _865-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (5,f) -> u f (\_866 _867-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (6,f) -> u f (\_868 _869 _870-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (7,f) -> u f (\_871 _872 _873-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (8,f) -> u f (\_874 _875 _876-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (9,f) -> u f (\_877 _878 _879-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (10,f) -> u f (\_880-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (11,f) -> u f (\_881-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (12,f) -> u f (\_882-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (13,f) -> u f (\_883-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (14,f) -> u f (\_884 _885 _886 _887 _888 _889-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (15,f) -> u f (\_890 _891-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); })))))
fm_smartmotive_nams_cont = (\_name_1-> (\_term_2-> (\_binds_3-> (\_defs_4-> (let _892 = (u (u fm_term_reduce _term_2) _defs_4) in (case _892 of {(0,f) -> u f (\_893 _894-> (u (u list_cons _name_1) (u list_tail _binds_3))); (1,f) -> u f (\_895-> (u (u list_cons _name_1) (u list_tail _binds_3))); (2,f) -> u f ((u (u list_cons _name_1) (u list_tail _binds_3))); (3,f) -> u f (\_896 _897 _898 _899 _900-> (u (u (u (u fm_smartmotive_nams_cont _name_1) (u (u _900 (u fm_term_ref _897)) (u fm_term_ref _898))) (u (u list_cons (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _898) list_nil))))) _binds_3)) _defs_4)); (4,f) -> u f (\_901 _902-> (u (u list_cons _name_1) (u list_tail _binds_3))); (5,f) -> u f (\_903 _904-> (u (u list_cons _name_1) (u list_tail _binds_3))); (6,f) -> u f (\_905 _906 _907-> (u (u list_cons _name_1) (u list_tail _binds_3))); (7,f) -> u f (\_908 _909 _910-> (u (u list_cons _name_1) (u list_tail _binds_3))); (8,f) -> u f (\_911 _912 _913-> (u (u list_cons _name_1) (u list_tail _binds_3))); (9,f) -> u f (\_914 _915 _916-> (u (u list_cons _name_1) (u list_tail _binds_3))); (10,f) -> u f (\_917-> (u (u list_cons _name_1) (u list_tail _binds_3))); (11,f) -> u f (\_918-> (u (u list_cons _name_1) (u list_tail _binds_3))); (12,f) -> u f (\_919-> (u (u list_cons _name_1) (u list_tail _binds_3))); (13,f) -> u f (\_920-> (u (u list_cons _name_1) (u list_tail _binds_3))); (14,f) -> u f (\_921 _922 _923 _924 _925 _926-> (u (u list_cons _name_1) (u list_tail _binds_3))); (15,f) -> u f (\_927 _928-> (u (u list_cons _name_1) (u list_tail _binds_3))); }))))))
fm_smartmotive_nams = (\_name_1-> (\_type_2-> (\_defs_3-> (let _929 = (u (u fm_term_reduce _type_2) _defs_3) in (case _929 of {(0,f) -> u f (\_930 _931-> list_nil); (1,f) -> u f (\_932-> list_nil); (2,f) -> u f (list_nil); (3,f) -> u f (\_933 _934 _935 _936 _937-> (u (u (u (u fm_smartmotive_nams_cont _name_1) _936) list_nil) _defs_3)); (4,f) -> u f (\_938 _939-> list_nil); (5,f) -> u f (\_940 _941-> list_nil); (6,f) -> u f (\_942 _943 _944-> list_nil); (7,f) -> u f (\_945 _946 _947-> list_nil); (8,f) -> u f (\_948 _949 _950-> list_nil); (9,f) -> u f (\_951 _952 _953-> list_nil); (10,f) -> u f (\_954-> list_nil); (11,f) -> u f (\_955-> list_nil); (12,f) -> u f (\_956-> list_nil); (13,f) -> u f (\_957-> list_nil); (14,f) -> u f (\_958 _959 _960 _961 _962 _963-> list_nil); (15,f) -> u f (\_964 _965-> list_nil); })))))
list_zip = (\_as_3-> (\_bs_4-> (let _966 = _as_3 in (case _966 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_967 _968-> (let _969 = _bs_4 in (case _969 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_970 _971-> (u (u list_cons (u (u pair_new _967) _970)) (u (u list_zip _968) _971))); }))); }))))
nat_gte = (\a0-> \a1-> ((a0::Integer) >= a1))
fm_term_serialize_name = (\_name_1-> (u fm_name_to_bits _name_1))
fm_term_serialize = (\_term_1-> (\_depth_2-> (\_init_3-> (\_x_4-> (let _972 = _term_1 in (case _972 of {(0,f) -> u f (\_973 _974-> (let _975 = (((_974::Integer) >= _init_3)) in (if _975 then (let _name_7=(u bits_concat (u nat_to_bits (u nat_pred (((_depth_2::Integer) - _974))))) in (u bits_o (u bits_o (u bits_i (u _name_7 _x_4))))) else (let _name_7=(u bits_concat (u nat_to_bits _974)) in (u bits_o (u bits_i (u bits_o (u _name_7 _x_4)))))))); (1,f) -> u f (\_976-> (let _name_6=(u bits_concat (u fm_term_serialize_name _976)) in (u bits_o (u bits_o (u bits_o (u _name_6 _x_4)))))); (2,f) -> u f ((u bits_o (u bits_i (u bits_i _x_4)))); (3,f) -> u f (\_977 _978 _979 _980 _981-> (let _eras_10=(let _982 = _977 in (if _982 then bits_i else bits_o)) in (let _self_11=(u bits_concat (u fm_name_to_bits _978)) in (let _xtyp_12=(u (u (u fm_term_serialize _980) _depth_2) _init_3) in (let _body_13=(u (u (u fm_term_serialize (u (u _981 (u (u fm_term_var _978) _depth_2)) (u (u fm_term_var _979) (u nat_succ _depth_2)))) (u nat_succ (u nat_succ _depth_2))) _init_3) in (u bits_i (u bits_o (u bits_o (u _eras_10 (u _self_11 (u _xtyp_12 (u _body_13 _x_4)))))))))))); (4,f) -> u f (\_983 _984-> (let _body_7=(u (u (u fm_term_serialize (u _984 (u (u fm_term_var _983) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_o (u bits_i (u _body_7 _x_4)))))); (5,f) -> u f (\_985 _986-> (let _func_7=(u (u (u fm_term_serialize _985) _depth_2) _init_3) in (let _argm_8=(u (u (u fm_term_serialize _986) _depth_2) _init_3) in (u bits_i (u bits_i (u bits_o (u _func_7 (u _argm_8 _x_4)))))))); (6,f) -> u f (\_987 _988 _989-> (let _expr_8=(u (u (u fm_term_serialize _988) _depth_2) _init_3) in (let _body_9=(u (u (u fm_term_serialize (u _989 (u (u fm_term_var _987) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_i (u bits_i (u _expr_8 (u _body_9 _x_4)))))))); (7,f) -> u f (\_990 _991 _992-> (u (u (u (u fm_term_serialize (u _992 _991)) _depth_2) _init_3) _x_4)); (8,f) -> u f (\_993 _994 _995-> (u (u (u (u fm_term_serialize _994) _depth_2) _init_3) _x_4)); (9,f) -> u f (\_996 _997 _998-> (let _name_8=(u bits_concat (u fm_name_to_bits _996)) in (u bits_o (u bits_o (u bits_o (u _name_8 _x_4)))))); (10,f) -> u f (\_999-> _x_4); (11,f) -> u f (\_1000-> (u (u (u (u fm_term_serialize (u fm_term_unroll_nat _1000)) _depth_2) _init_3) _x_4)); (12,f) -> u f (\_1001-> (u (u (u (u fm_term_serialize (u fm_term_unroll_chr _1001)) _depth_2) _init_3) _x_4)); (13,f) -> u f (\_1002-> (u (u (u (u fm_term_serialize (u fm_term_unroll_str _1002)) _depth_2) _init_3) _x_4)); (14,f) -> u f (\_1003 _1004 _1005 _1006 _1007 _1008-> _x_4); (15,f) -> u f (\_1009 _1010-> (u (u (u (u fm_term_serialize _1010) _depth_2) _init_3) _x_4)); }))))))
bits_eql = (\_a_1-> (\_b_2-> (let _1011 = _a_1 in (case _1011 of {(0,f) -> u f ((let _1012 = _b_2 in (case _1012 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_1013-> bool_false); (2,f) -> u f (\_1014-> bool_false); }))); (1,f) -> u f (\_1015-> (let _1016 = _b_2 in (case _1016 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1017-> (u (u bits_eql _1015) _1017)); (2,f) -> u f (\_1018-> bool_false); }))); (2,f) -> u f (\_1019-> (let _1020 = _b_2 in (case _1020 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1021-> bool_false); (2,f) -> u f (\_1022-> (u (u bits_eql _1019) _1022)); }))); }))))
fm_term_identical = (\_a_1-> (\_b_2-> (\_lv_3-> (let _ah_4=(u (u (u (u fm_term_serialize _a_1) _lv_3) _lv_3) bits_e) in (let _bh_5=(u (u (u (u fm_term_serialize _b_2) _lv_3) _lv_3) bits_e) in (u (u bits_eql _ah_4) _bh_5))))))
fm_smartmotive_replace = (\_term_1-> (\_from_2-> (\_to_3-> (\_lv_4-> (let _1023 = (u (u (u fm_term_identical _term_1) _from_2) _lv_4) in (if _1023 then _to_3 else (let _1024 = _term_1 in (case _1024 of {(0,f) -> u f (\_1025 _1026-> (u (u fm_term_var _1025) _1026)); (1,f) -> u f (\_1027-> (u fm_term_ref _1027)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_1028 _1029 _1030 _1031 _1032-> (let _xtyp_10=(u (u (u (u fm_smartmotive_replace _1031) _from_2) _to_3) _lv_4) in (let _body_11=(u (u _1032 (u fm_term_ref _1029)) (u fm_term_ref _1030)) in (let _body_12=(u (u (u (u fm_smartmotive_replace _body_11) _from_2) _to_3) (u nat_succ (u nat_succ _lv_4))) in (u (u (u (u (u fm_term_all _1028) _1029) _1030) _xtyp_10) (\_s_13-> (\_x_14-> _body_12))))))); (4,f) -> u f (\_1033 _1034-> (let _body_7=(u _1034 (u fm_term_ref _1033)) in (let _body_8=(u (u (u (u fm_smartmotive_replace _body_7) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u fm_term_lam _1033) (\_x_9-> _body_8))))); (5,f) -> u f (\_1035 _1036-> (let _func_7=(u (u (u (u fm_smartmotive_replace _1035) _from_2) _to_3) _lv_4) in (let _argm_8=(u (u (u (u fm_smartmotive_replace _1036) _from_2) _to_3) _lv_4) in (u (u fm_term_app _func_7) _argm_8)))); (6,f) -> u f (\_1037 _1038 _1039-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _1038) _from_2) _to_3) _lv_4) in (let _body_9=(u _1039 (u fm_term_ref _1037)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_let _1037) _expr_8) (\_x_11-> _body_10)))))); (7,f) -> u f (\_1040 _1041 _1042-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _1041) _from_2) _to_3) _lv_4) in (let _body_9=(u _1042 (u fm_term_ref _1040)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_def _1040) _expr_8) (\_x_11-> _body_10)))))); (8,f) -> u f (\_1043 _1044 _1045-> (let _term_8=(u (u (u (u fm_smartmotive_replace _1044) _from_2) _to_3) _lv_4) in (let _type_9=(u (u (u (u fm_smartmotive_replace _1045) _from_2) _to_3) _lv_4) in (u (u (u fm_term_ann _1043) _term_8) _type_9)))); (9,f) -> u f (\_1046 _1047 _1048-> _term_1); (10,f) -> u f (\_1049-> _term_1); (11,f) -> u f (\_1050-> _term_1); (12,f) -> u f (\_1051-> _term_1); (13,f) -> u f (\_1052-> _term_1); (14,f) -> u f (\_1053 _1054 _1055 _1056 _1057 _1058-> _term_1); (15,f) -> u f (\_1059 _1060-> (u (u (u (u fm_smartmotive_replace _1060) _from_2) _to_3) _lv_4)); }))))))))
fm_smartmotive_make = (\_name_1-> (\_expr_2-> (\_type_3-> (\_moti_4-> (\_lv_5-> (\_defs_6-> (let _vals_7=(u (u (u fm_smartmotive_vals _expr_2) _type_3) _defs_6) in (let _nams_8=(u (u (u fm_smartmotive_nams _name_1) _type_3) _defs_6) in (let _subs_9=(u (u list_zip _nams_8) _vals_7) in (let _moti_10=(u (u (u list_fold _subs_9) _moti_4) (\_sub_10-> (\_moti_11-> (let _1061 = _sub_10 in (case _1061 of {(0,f) -> u f (\_1062 _1063-> (u (u (u (u fm_smartmotive_replace _moti_11) _1063) (u fm_term_ref _1062)) _lv_5)); }))))) in _moti_10))))))))))
fm_term_desugar_cse_motive = (\_wyth_1-> (\_moti_2-> (let _1064 = _wyth_1 in (case _1064 of {(0,f) -> u f (_moti_2); (1,f) -> u f (\_1065 _1066-> (let _1067 = _1065 in (case _1067 of {(0,f) -> u f (\_1068 _1069 _1070 _1071 _1072 _1073-> (u (u (u (u (u fm_term_all bool_false) "") _1070) _1072) (\_s_11-> (\_x_12-> (u (u fm_term_desugar_cse_motive _1066) _moti_2))))); }))); }))))
string_is_empty = (\_str_1-> (let _1074 = _str_1 in (if null (_1074::String) then bool_true else bool_false)))
fm_term_desugar_cse_argument = (\_name_1-> (\_wyth_2-> (\_type_3-> (\_body_4-> (\_defs_5-> (let _1075 = (u (u fm_term_reduce _type_3) _defs_5) in (case _1075 of {(0,f) -> u f (\_1076 _1077-> (let _1078 = _wyth_2 in (case _1078 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1079 _1080-> (let _1081 = _1079 in (case _1081 of {(0,f) -> u f (\_1082 _1083 _1084 _1085 _1086 _1087-> (u (u fm_term_lam _1084) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1080) _type_3) _body_4) _defs_5)))); }))); }))); (1,f) -> u f (\_1088-> (let _1089 = _wyth_2 in (case _1089 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1090 _1091-> (let _1092 = _1090 in (case _1092 of {(0,f) -> u f (\_1093 _1094 _1095 _1096 _1097 _1098-> (u (u fm_term_lam _1095) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1091) _type_3) _body_4) _defs_5)))); }))); }))); (2,f) -> u f ((let _1099 = _wyth_2 in (case _1099 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1100 _1101-> (let _1102 = _1100 in (case _1102 of {(0,f) -> u f (\_1103 _1104 _1105 _1106 _1107 _1108-> (u (u fm_term_lam _1105) (\_x_14-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1101) _type_3) _body_4) _defs_5)))); }))); }))); (3,f) -> u f (\_1109 _1110 _1111 _1112 _1113-> (u (u fm_term_lam (let _1114 = (u string_is_empty _1111) in (if _1114 then _name_1 else (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _1111) list_nil))))))) (\_x_11-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _wyth_2) (u (u _1113 (u (u fm_term_var _1110) 0)) (u (u fm_term_var _1111) 0))) _body_4) _defs_5)))); (4,f) -> u f (\_1115 _1116-> (let _1117 = _wyth_2 in (case _1117 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1118 _1119-> (let _1120 = _1118 in (case _1120 of {(0,f) -> u f (\_1121 _1122 _1123 _1124 _1125 _1126-> (u (u fm_term_lam _1123) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1119) _type_3) _body_4) _defs_5)))); }))); }))); (5,f) -> u f (\_1127 _1128-> (let _1129 = _wyth_2 in (case _1129 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1130 _1131-> (let _1132 = _1130 in (case _1132 of {(0,f) -> u f (\_1133 _1134 _1135 _1136 _1137 _1138-> (u (u fm_term_lam _1135) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1131) _type_3) _body_4) _defs_5)))); }))); }))); (6,f) -> u f (\_1139 _1140 _1141-> (let _1142 = _wyth_2 in (case _1142 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1143 _1144-> (let _1145 = _1143 in (case _1145 of {(0,f) -> u f (\_1146 _1147 _1148 _1149 _1150 _1151-> (u (u fm_term_lam _1148) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1144) _type_3) _body_4) _defs_5)))); }))); }))); (7,f) -> u f (\_1152 _1153 _1154-> (let _1155 = _wyth_2 in (case _1155 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1156 _1157-> (let _1158 = _1156 in (case _1158 of {(0,f) -> u f (\_1159 _1160 _1161 _1162 _1163 _1164-> (u (u fm_term_lam _1161) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1157) _type_3) _body_4) _defs_5)))); }))); }))); (8,f) -> u f (\_1165 _1166 _1167-> (let _1168 = _wyth_2 in (case _1168 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1169 _1170-> (let _1171 = _1169 in (case _1171 of {(0,f) -> u f (\_1172 _1173 _1174 _1175 _1176 _1177-> (u (u fm_term_lam _1174) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1170) _type_3) _body_4) _defs_5)))); }))); }))); (9,f) -> u f (\_1178 _1179 _1180-> (let _1181 = _wyth_2 in (case _1181 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1182 _1183-> (let _1184 = _1182 in (case _1184 of {(0,f) -> u f (\_1185 _1186 _1187 _1188 _1189 _1190-> (u (u fm_term_lam _1187) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1183) _type_3) _body_4) _defs_5)))); }))); }))); (10,f) -> u f (\_1191-> (let _1192 = _wyth_2 in (case _1192 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1193 _1194-> (let _1195 = _1193 in (case _1195 of {(0,f) -> u f (\_1196 _1197 _1198 _1199 _1200 _1201-> (u (u fm_term_lam _1198) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1194) _type_3) _body_4) _defs_5)))); }))); }))); (11,f) -> u f (\_1202-> (let _1203 = _wyth_2 in (case _1203 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1204 _1205-> (let _1206 = _1204 in (case _1206 of {(0,f) -> u f (\_1207 _1208 _1209 _1210 _1211 _1212-> (u (u fm_term_lam _1209) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1205) _type_3) _body_4) _defs_5)))); }))); }))); (12,f) -> u f (\_1213-> (let _1214 = _wyth_2 in (case _1214 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1215 _1216-> (let _1217 = _1215 in (case _1217 of {(0,f) -> u f (\_1218 _1219 _1220 _1221 _1222 _1223-> (u (u fm_term_lam _1220) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1216) _type_3) _body_4) _defs_5)))); }))); }))); (13,f) -> u f (\_1224-> (let _1225 = _wyth_2 in (case _1225 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1226 _1227-> (let _1228 = _1226 in (case _1228 of {(0,f) -> u f (\_1229 _1230 _1231 _1232 _1233 _1234-> (u (u fm_term_lam _1231) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1227) _type_3) _body_4) _defs_5)))); }))); }))); (14,f) -> u f (\_1235 _1236 _1237 _1238 _1239 _1240-> (let _1241 = _wyth_2 in (case _1241 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1242 _1243-> (let _1244 = _1242 in (case _1244 of {(0,f) -> u f (\_1245 _1246 _1247 _1248 _1249 _1250-> (u (u fm_term_lam _1247) (\_x_20-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1243) _type_3) _body_4) _defs_5)))); }))); }))); (15,f) -> u f (\_1251 _1252-> (let _1253 = _wyth_2 in (case _1253 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1254 _1255-> (let _1256 = _1254 in (case _1256 of {(0,f) -> u f (\_1257 _1258 _1259 _1260 _1261 _1262-> (u (u fm_term_lam _1259) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1255) _type_3) _body_4) _defs_5)))); }))); }))); })))))))
maybe_or = (\_a_2-> (\_b_3-> (let _1263 = _a_2 in (case _1263 of {(0,f) -> u f (_b_3); (1,f) -> u f (\_1264-> (u maybe_some _1264)); }))))
fm_term_desugar_cse_cases = (\_expr_1-> (\_name_2-> (\_wyth_3-> (\_cses_4-> (\_type_5-> (\_defs_6-> (\_ctxt_7-> (let _1265 = (u (u fm_term_reduce _type_5) _defs_6) in (case _1265 of {(0,f) -> u f (\_1266 _1267-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1268 = _defn_10 in (case _1268 of {(0,f) -> u f (\_1269 _1270 _1271 _1272 _1273 _1274-> _1272); })))))) in _expr_10)); (1,f) -> u f (\_1275-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1276 = _defn_9 in (case _1276 of {(0,f) -> u f (\_1277 _1278 _1279 _1280 _1281 _1282-> _1280); })))))) in _expr_9)); (2,f) -> u f ((let _expr_8=(u (u (u list_for _wyth_3) _expr_1) (\_defn_8-> (\_expr_9-> (u (u fm_term_app _expr_9) (let _1283 = _defn_8 in (case _1283 of {(0,f) -> u f (\_1284 _1285 _1286 _1287 _1288 _1289-> _1287); })))))) in _expr_8)); (3,f) -> u f (\_1290 _1291 _1292 _1293 _1294-> (let _got_13=(u (u maybe_or (u (u fm_get _1292) _cses_4)) (u (u fm_get "_") _cses_4)) in (let _1295 = _got_13 in (case _1295 of {(0,f) -> u f ((let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (let _1296 = _defn_14 in (case _1296 of {(0,f) -> u f (\_1297 _1298 _1299 _1300 _1301 _1302-> (u (u fm_term_app _expr_15) _1300)); }))))) in _expr_14)); (1,f) -> u f (\_1303-> (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) _wyth_3) _1293) _1303) _defs_6) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1294 (u (u fm_term_var _1291) 0)) (u (u fm_term_var _1292) 0)) in (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _wyth_3) _cses_4) _type_17) _defs_6) _ctxt_7))))); })))); (4,f) -> u f (\_1304 _1305-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1306 = _defn_10 in (case _1306 of {(0,f) -> u f (\_1307 _1308 _1309 _1310 _1311 _1312-> _1310); })))))) in _expr_10)); (5,f) -> u f (\_1313 _1314-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1315 = _defn_10 in (case _1315 of {(0,f) -> u f (\_1316 _1317 _1318 _1319 _1320 _1321-> _1319); })))))) in _expr_10)); (6,f) -> u f (\_1322 _1323 _1324-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1325 = _defn_11 in (case _1325 of {(0,f) -> u f (\_1326 _1327 _1328 _1329 _1330 _1331-> _1329); })))))) in _expr_11)); (7,f) -> u f (\_1332 _1333 _1334-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1335 = _defn_11 in (case _1335 of {(0,f) -> u f (\_1336 _1337 _1338 _1339 _1340 _1341-> _1339); })))))) in _expr_11)); (8,f) -> u f (\_1342 _1343 _1344-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1345 = _defn_11 in (case _1345 of {(0,f) -> u f (\_1346 _1347 _1348 _1349 _1350 _1351-> _1349); })))))) in _expr_11)); (9,f) -> u f (\_1352 _1353 _1354-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1355 = _defn_11 in (case _1355 of {(0,f) -> u f (\_1356 _1357 _1358 _1359 _1360 _1361-> _1359); })))))) in _expr_11)); (10,f) -> u f (\_1362-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1363 = _defn_9 in (case _1363 of {(0,f) -> u f (\_1364 _1365 _1366 _1367 _1368 _1369-> _1367); })))))) in _expr_9)); (11,f) -> u f (\_1370-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1371 = _defn_9 in (case _1371 of {(0,f) -> u f (\_1372 _1373 _1374 _1375 _1376 _1377-> _1375); })))))) in _expr_9)); (12,f) -> u f (\_1378-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1379 = _defn_9 in (case _1379 of {(0,f) -> u f (\_1380 _1381 _1382 _1383 _1384 _1385-> _1383); })))))) in _expr_9)); (13,f) -> u f (\_1386-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1387 = _defn_9 in (case _1387 of {(0,f) -> u f (\_1388 _1389 _1390 _1391 _1392 _1393-> _1391); })))))) in _expr_9)); (14,f) -> u f (\_1394 _1395 _1396 _1397 _1398 _1399-> (let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (u (u fm_term_app _expr_15) (let _1400 = _defn_14 in (case _1400 of {(0,f) -> u f (\_1401 _1402 _1403 _1404 _1405 _1406-> _1404); })))))) in _expr_14)); (15,f) -> u f (\_1407 _1408-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1409 = _defn_10 in (case _1409 of {(0,f) -> u f (\_1410 _1411 _1412 _1413 _1414 _1415-> _1413); })))))) in _expr_10)); })))))))))
fm_term_desugar_cse = (\_expr_1-> (\_name_2-> (\_with_3-> (\_cses_4-> (\_moti_5-> (\_type_6-> (\_defs_7-> (\_ctxt_8-> (let _1416 = (u (u fm_term_reduce _type_6) _defs_7) in (case _1416 of {(0,f) -> u f (\_1417 _1418-> maybe_none); (1,f) -> u f (\_1419-> maybe_none); (2,f) -> u f (maybe_none); (3,f) -> u f (\_1420 _1421 _1422 _1423 _1424-> (let _moti_14=(u (u fm_term_desugar_cse_motive _with_3) _moti_5) in (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) list_nil) _1423) _moti_14) _defs_7) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1424 (u (u fm_term_var _1421) 0)) (u (u fm_term_var _1422) 0)) in (u maybe_some (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _with_3) _cses_4) _type_17) _defs_7) _ctxt_8))))))); (4,f) -> u f (\_1425 _1426-> maybe_none); (5,f) -> u f (\_1427 _1428-> maybe_none); (6,f) -> u f (\_1429 _1430 _1431-> maybe_none); (7,f) -> u f (\_1432 _1433 _1434-> maybe_none); (8,f) -> u f (\_1435 _1436 _1437-> maybe_none); (9,f) -> u f (\_1438 _1439 _1440-> maybe_none); (10,f) -> u f (\_1441-> maybe_none); (11,f) -> u f (\_1442-> maybe_none); (12,f) -> u f (\_1443-> maybe_none); (13,f) -> u f (\_1444-> maybe_none); (14,f) -> u f (\_1445 _1446 _1447 _1448 _1449 _1450-> maybe_none); (15,f) -> u f (\_1451 _1452-> maybe_none); }))))))))))
fm_error_patch = (\_path_1-> (\_term_2-> (4,\t-> t _path_1 _term_2)))
fm_mpath_to_bits = (\_path_1-> (let _1453 = _path_1 in (case _1453 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_1454-> (u _1454 bits_e)); })))
set_has = (\_bits_1-> (\_set_2-> (let _1455 = (u (u map_get _bits_1) _set_2) in (case _1455 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1456-> bool_true); }))))
fm_term_normalize = (\_term_1-> (\_defs_2-> (let _1457 = (u (u fm_term_reduce _term_1) _defs_2) in (case _1457 of {(0,f) -> u f (\_1458 _1459-> (u (u fm_term_var _1458) _1459)); (1,f) -> u f (\_1460-> (u fm_term_ref _1460)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_1461 _1462 _1463 _1464 _1465-> (u (u (u (u (u fm_term_all _1461) _1462) _1463) (u (u fm_term_normalize _1464) _defs_2)) (\_s_8-> (\_x_9-> (u (u fm_term_normalize (u (u _1465 _s_8) _x_9)) _defs_2))))); (4,f) -> u f (\_1466 _1467-> (u (u fm_term_lam _1466) (\_x_5-> (u (u fm_term_normalize (u _1467 _x_5)) _defs_2)))); (5,f) -> u f (\_1468 _1469-> (u (u fm_term_app (u (u fm_term_normalize _1468) _defs_2)) (u (u fm_term_normalize _1469) _defs_2))); (6,f) -> u f (\_1470 _1471 _1472-> (u (u (u fm_term_let _1470) (u (u fm_term_normalize _1471) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1472 _x_6)) _defs_2)))); (7,f) -> u f (\_1473 _1474 _1475-> (u (u (u fm_term_def _1473) (u (u fm_term_normalize _1474) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1475 _x_6)) _defs_2)))); (8,f) -> u f (\_1476 _1477 _1478-> (u (u (u fm_term_ann _1476) (u (u fm_term_normalize _1477) _defs_2)) (u (u fm_term_normalize _1478) _defs_2))); (9,f) -> u f (\_1479 _1480 _1481-> (u (u (u fm_term_gol _1479) _1480) _1481)); (10,f) -> u f (\_1482-> (u fm_term_hol _1482)); (11,f) -> u f (\_1483-> (u fm_term_nat _1483)); (12,f) -> u f (\_1484-> (u fm_term_chr _1484)); (13,f) -> u f (\_1485-> (u fm_term_str _1485)); (14,f) -> u f (\_1486 _1487 _1488 _1489 _1490 _1491-> _term_1); (15,f) -> u f (\_1492 _1493-> (u (u fm_term_normalize _1493) _defs_2)); }))))
fm_term_equal_patch = (\_path_2-> (\_term_3-> (\_ret_4-> (u (u fm_check_result (u maybe_some _ret_4)) (u (u list_cons (u (u fm_error_patch _path_2) (u (u fm_term_normalize _term_3) map_new))) list_nil)))))
fm_term_equal_extra_holes = (\_a_1-> (\_b_2-> (let _1494 = _a_1 in (case _1494 of {(0,f) -> u f (\_1495 _1496-> (let _1497 = _b_2 in (case _1497 of {(0,f) -> u f (\_1498 _1499-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1500-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1501 _1502 _1503 _1504 _1505-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1506 _1507-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1508 _1509-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1510 _1511 _1512-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1513 _1514 _1515-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1516 _1517 _1518-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1519 _1520 _1521-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1522-> (u (u (u fm_term_equal_patch _1522) _a_1) unit_new)); (11,f) -> u f (\_1523-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1524-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1525-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1526 _1527 _1528 _1529 _1530 _1531-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1532 _1533-> (u (u fm_term_equal_extra_holes _a_1) _1533)); }))); (1,f) -> u f (\_1534-> (let _1535 = _b_2 in (case _1535 of {(0,f) -> u f (\_1536 _1537-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1538-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1539 _1540 _1541 _1542 _1543-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1544 _1545-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1546 _1547-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1548 _1549 _1550-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1551 _1552 _1553-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1554 _1555 _1556-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1557 _1558 _1559-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1560-> (u (u (u fm_term_equal_patch _1560) _a_1) unit_new)); (11,f) -> u f (\_1561-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1562-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1563-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1564 _1565 _1566 _1567 _1568 _1569-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1570 _1571-> (u (u fm_term_equal_extra_holes _a_1) _1571)); }))); (2,f) -> u f ((let _1572 = _b_2 in (case _1572 of {(0,f) -> u f (\_1573 _1574-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1575-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1576 _1577 _1578 _1579 _1580-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1581 _1582-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1583 _1584-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1585 _1586 _1587-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1588 _1589 _1590-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1591 _1592 _1593-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1594 _1595 _1596-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1597-> (u (u (u fm_term_equal_patch _1597) _a_1) unit_new)); (11,f) -> u f (\_1598-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1599-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1600-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1601 _1602 _1603 _1604 _1605 _1606-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1607 _1608-> (u (u fm_term_equal_extra_holes _a_1) _1608)); }))); (3,f) -> u f (\_1609 _1610 _1611 _1612 _1613-> (let _1614 = _b_2 in (case _1614 of {(0,f) -> u f (\_1615 _1616-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1617-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1618 _1619 _1620 _1621 _1622-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1623 _1624-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1625 _1626-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1627 _1628 _1629-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1630 _1631 _1632-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1633 _1634 _1635-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1636 _1637 _1638-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1639-> (u (u (u fm_term_equal_patch _1639) _a_1) unit_new)); (11,f) -> u f (\_1640-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1641-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1642-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1643 _1644 _1645 _1646 _1647 _1648-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1649 _1650-> (u (u fm_term_equal_extra_holes _a_1) _1650)); }))); (4,f) -> u f (\_1651 _1652-> (let _1653 = _b_2 in (case _1653 of {(0,f) -> u f (\_1654 _1655-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1656-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1657 _1658 _1659 _1660 _1661-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1662 _1663-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1664 _1665-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1666 _1667 _1668-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1669 _1670 _1671-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1672 _1673 _1674-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1675 _1676 _1677-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1678-> (u (u (u fm_term_equal_patch _1678) _a_1) unit_new)); (11,f) -> u f (\_1679-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1680-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1681-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1682 _1683 _1684 _1685 _1686 _1687-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1688 _1689-> (u (u fm_term_equal_extra_holes _a_1) _1689)); }))); (5,f) -> u f (\_1690 _1691-> (let _1692 = _b_2 in (case _1692 of {(0,f) -> u f (\_1693 _1694-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1695-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1696 _1697 _1698 _1699 _1700-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1701 _1702-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1703 _1704-> (u (u (u monad_bind fm_check_monad) (u (u fm_term_equal_extra_holes _1690) _1703)) (\__7-> (u (u fm_term_equal_extra_holes _1691) _1704)))); (6,f) -> u f (\_1705 _1706 _1707-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1708 _1709 _1710-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1711 _1712 _1713-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1714 _1715 _1716-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1717-> (u (u (u fm_term_equal_patch _1717) _a_1) unit_new)); (11,f) -> u f (\_1718-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1719-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1720-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1721 _1722 _1723 _1724 _1725 _1726-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1727 _1728-> (u (u fm_term_equal_extra_holes _a_1) _1728)); }))); (6,f) -> u f (\_1729 _1730 _1731-> (let _1732 = _b_2 in (case _1732 of {(0,f) -> u f (\_1733 _1734-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1735-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1736 _1737 _1738 _1739 _1740-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1741 _1742-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1743 _1744-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1745 _1746 _1747-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1748 _1749 _1750-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1751 _1752 _1753-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1754 _1755 _1756-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1757-> (u (u (u fm_term_equal_patch _1757) _a_1) unit_new)); (11,f) -> u f (\_1758-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1759-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1760-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1761 _1762 _1763 _1764 _1765 _1766-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1767 _1768-> (u (u fm_term_equal_extra_holes _a_1) _1768)); }))); (7,f) -> u f (\_1769 _1770 _1771-> (let _1772 = _b_2 in (case _1772 of {(0,f) -> u f (\_1773 _1774-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1775-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1776 _1777 _1778 _1779 _1780-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1781 _1782-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1783 _1784-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1785 _1786 _1787-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1788 _1789 _1790-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1791 _1792 _1793-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1794 _1795 _1796-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1797-> (u (u (u fm_term_equal_patch _1797) _a_1) unit_new)); (11,f) -> u f (\_1798-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1799-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1800-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1801 _1802 _1803 _1804 _1805 _1806-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1807 _1808-> (u (u fm_term_equal_extra_holes _a_1) _1808)); }))); (8,f) -> u f (\_1809 _1810 _1811-> (let _1812 = _b_2 in (case _1812 of {(0,f) -> u f (\_1813 _1814-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1815-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1816 _1817 _1818 _1819 _1820-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1821 _1822-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1823 _1824-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1825 _1826 _1827-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1828 _1829 _1830-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1831 _1832 _1833-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1834 _1835 _1836-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1837-> (u (u (u fm_term_equal_patch _1837) _a_1) unit_new)); (11,f) -> u f (\_1838-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1839-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1840-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1841 _1842 _1843 _1844 _1845 _1846-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1847 _1848-> (u (u fm_term_equal_extra_holes _a_1) _1848)); }))); (9,f) -> u f (\_1849 _1850 _1851-> (let _1852 = _b_2 in (case _1852 of {(0,f) -> u f (\_1853 _1854-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1855-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1856 _1857 _1858 _1859 _1860-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1861 _1862-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1863 _1864-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1865 _1866 _1867-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1868 _1869 _1870-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1871 _1872 _1873-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1874 _1875 _1876-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1877-> (u (u (u fm_term_equal_patch _1877) _a_1) unit_new)); (11,f) -> u f (\_1878-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1879-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1880-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1881 _1882 _1883 _1884 _1885 _1886-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1887 _1888-> (u (u fm_term_equal_extra_holes _a_1) _1888)); }))); (10,f) -> u f (\_1889-> (u (u (u fm_term_equal_patch _1889) _b_2) unit_new)); (11,f) -> u f (\_1890-> (let _1891 = _b_2 in (case _1891 of {(0,f) -> u f (\_1892 _1893-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1894-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1895 _1896 _1897 _1898 _1899-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1900 _1901-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1902 _1903-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1904 _1905 _1906-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1907 _1908 _1909-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1910 _1911 _1912-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1913 _1914 _1915-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1916-> (u (u (u fm_term_equal_patch _1916) _a_1) unit_new)); (11,f) -> u f (\_1917-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1918-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1919-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1920 _1921 _1922 _1923 _1924 _1925-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1926 _1927-> (u (u fm_term_equal_extra_holes _a_1) _1927)); }))); (12,f) -> u f (\_1928-> (let _1929 = _b_2 in (case _1929 of {(0,f) -> u f (\_1930 _1931-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1932-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1933 _1934 _1935 _1936 _1937-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1938 _1939-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1940 _1941-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1942 _1943 _1944-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1945 _1946 _1947-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1948 _1949 _1950-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1951 _1952 _1953-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1954-> (u (u (u fm_term_equal_patch _1954) _a_1) unit_new)); (11,f) -> u f (\_1955-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1956-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1957-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1958 _1959 _1960 _1961 _1962 _1963-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1964 _1965-> (u (u fm_term_equal_extra_holes _a_1) _1965)); }))); (13,f) -> u f (\_1966-> (let _1967 = _b_2 in (case _1967 of {(0,f) -> u f (\_1968 _1969-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1970-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1971 _1972 _1973 _1974 _1975-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1976 _1977-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1978 _1979-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1980 _1981 _1982-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1983 _1984 _1985-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1986 _1987 _1988-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1989 _1990 _1991-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1992-> (u (u (u fm_term_equal_patch _1992) _a_1) unit_new)); (11,f) -> u f (\_1993-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1994-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1995-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1996 _1997 _1998 _1999 _2000 _2001-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_2002 _2003-> (u (u fm_term_equal_extra_holes _a_1) _2003)); }))); (14,f) -> u f (\_2004 _2005 _2006 _2007 _2008 _2009-> (let _2010 = _b_2 in (case _2010 of {(0,f) -> u f (\_2011 _2012-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_2013-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_2014 _2015 _2016 _2017 _2018-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_2019 _2020-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_2021 _2022-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_2023 _2024 _2025-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_2026 _2027 _2028-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_2029 _2030 _2031-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_2032 _2033 _2034-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_2035-> (u (u (u fm_term_equal_patch _2035) _a_1) unit_new)); (11,f) -> u f (\_2036-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_2037-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_2038-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_2039 _2040 _2041 _2042 _2043 _2044-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_2045 _2046-> (u (u fm_term_equal_extra_holes _a_1) _2046)); }))); (15,f) -> u f (\_2047 _2048-> (u (u fm_term_equal_extra_holes _2048) _b_2)); }))))
set_set = (\_bits_1-> (\_set_2-> (u (u (u map_set _bits_1) unit_new) _set_2)))
bool_eql = (\_a_1-> (\_b_2-> (let _2049 = _a_1 in (if _2049 then _b_2 else ((not _b_2))))))
fm_term_equal = (\_a_1-> (\_b_2-> (\_defs_3-> (\_lv_4-> (\_seen_5-> (let _ah_6=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _a_1) map_new)) _lv_4) _lv_4) bits_e) in (let _bh_7=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _b_2) map_new)) _lv_4) _lv_4) bits_e) in (let _2050 = (u (u bits_eql _ah_6) _bh_7) in (if _2050 then (u (u monad_pure fm_check_monad) bool_true) else (let _a1_8=(u (u fm_term_reduce _a_1) _defs_3) in (let _b1_9=(u (u fm_term_reduce _b_2) _defs_3) in (let _ah_10=(u (u (u (u fm_term_serialize _a1_8) _lv_4) _lv_4) bits_e) in (let _bh_11=(u (u (u (u fm_term_serialize _b1_9) _lv_4) _lv_4) bits_e) in (let _2051 = (u (u bits_eql _ah_10) _bh_11) in (if _2051 then (u (u monad_pure fm_check_monad) bool_true) else (let _id_12=(u (u bits_concat _ah_10) _bh_11) in (let _2052 = (u (u set_has _id_12) _seen_5) in (if _2052 then (u (u (u monad_bind fm_check_monad) (u (u fm_term_equal_extra_holes _a_1) _b_2)) (\__13-> (u (u monad_pure fm_check_monad) bool_true))) else (let _2053 = _a1_8 in (case _2053 of {(0,f) -> u f (\_2054 _2055-> (let _2056 = _b1_9 in (case _2056 of {(0,f) -> u f (\_2057 _2058-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2059-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2060 _2061 _2062 _2063 _2064-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2065 _2066-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2067 _2068-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2069 _2070 _2071-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2072 _2073 _2074-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2075 _2076 _2077-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2078 _2079 _2080-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2081-> (u (u (u fm_term_equal_patch _2081) _a_1) bool_true)); (11,f) -> u f (\_2082-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2083-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2084-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2085 _2086 _2087 _2088 _2089 _2090-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2091 _2092-> (u (u monad_pure fm_check_monad) bool_false)); }))); (1,f) -> u f (\_2093-> (let _2094 = _b1_9 in (case _2094 of {(0,f) -> u f (\_2095 _2096-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2097-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2098 _2099 _2100 _2101 _2102-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2103 _2104-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2105 _2106-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2107 _2108 _2109-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2110 _2111 _2112-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2113 _2114 _2115-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2116 _2117 _2118-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2119-> (u (u (u fm_term_equal_patch _2119) _a_1) bool_true)); (11,f) -> u f (\_2120-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2121-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2122-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2123 _2124 _2125 _2126 _2127 _2128-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2129 _2130-> (u (u monad_pure fm_check_monad) bool_false)); }))); (2,f) -> u f ((let _2131 = _b1_9 in (case _2131 of {(0,f) -> u f (\_2132 _2133-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2134-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2135 _2136 _2137 _2138 _2139-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2140 _2141-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2142 _2143-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2144 _2145 _2146-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2147 _2148 _2149-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2150 _2151 _2152-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2153 _2154 _2155-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2156-> (u (u (u fm_term_equal_patch _2156) _a_1) bool_true)); (11,f) -> u f (\_2157-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2158-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2159-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2160 _2161 _2162 _2163 _2164 _2165-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2166 _2167-> (u (u monad_pure fm_check_monad) bool_false)); }))); (3,f) -> u f (\_2168 _2169 _2170 _2171 _2172-> (let _2173 = _b1_9 in (case _2173 of {(0,f) -> u f (\_2174 _2175-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2176-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2177 _2178 _2179 _2180 _2181-> (let _seen_23=(u (u set_set _id_12) _seen_5) in (let _a1_body_24=(u (u _2172 (u (u fm_term_var _2169) _lv_4)) (u (u fm_term_var _2170) (u nat_succ _lv_4))) in (let _b1_body_25=(u (u _2181 (u (u fm_term_var _2178) _lv_4)) (u (u fm_term_var _2179) (u nat_succ _lv_4))) in (let _eq_self_26=(((_2169::String) == _2178)) in (let _eq_eras_27=(u (u bool_eql _2168) _2177) in (let _2182 = ((_eq_self_26 && _eq_eras_27)) in (if _2182 then (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2171) _2180) _defs_3) _lv_4) _seen_23)) (\_eq_type_28-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_24) _b1_body_25) _defs_3) (u nat_succ (u nat_succ _lv_4))) _seen_23)) (\_eq_body_29-> (u (u monad_pure fm_check_monad) ((_eq_type_28 && _eq_body_29))))))) else (u (u monad_pure fm_check_monad) bool_false))))))))); (4,f) -> u f (\_2183 _2184-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2185 _2186-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2187 _2188 _2189-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2190 _2191 _2192-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2193 _2194 _2195-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2196 _2197 _2198-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2199-> (u (u (u fm_term_equal_patch _2199) _a_1) bool_true)); (11,f) -> u f (\_2200-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2201-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2202-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2203 _2204 _2205 _2206 _2207 _2208-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2209 _2210-> (u (u monad_pure fm_check_monad) bool_false)); }))); (4,f) -> u f (\_2211 _2212-> (let _2213 = _b1_9 in (case _2213 of {(0,f) -> u f (\_2214 _2215-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2216-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2217 _2218 _2219 _2220 _2221-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2222 _2223-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (let _a1_body_18=(u _2212 (u (u fm_term_var _2211) _lv_4)) in (let _b1_body_19=(u _2223 (u (u fm_term_var _2222) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_18) _b1_body_19) _defs_3) (u nat_succ _lv_4)) _seen_17)) (\_eq_body_20-> (u (u monad_pure fm_check_monad) _eq_body_20))))))); (5,f) -> u f (\_2224 _2225-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2226 _2227 _2228-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2229 _2230 _2231-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2232 _2233 _2234-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2235 _2236 _2237-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2238-> (u (u (u fm_term_equal_patch _2238) _a_1) bool_true)); (11,f) -> u f (\_2239-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2240-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2241-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2242 _2243 _2244 _2245 _2246 _2247-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2248 _2249-> (u (u monad_pure fm_check_monad) bool_false)); }))); (5,f) -> u f (\_2250 _2251-> (let _2252 = _b1_9 in (case _2252 of {(0,f) -> u f (\_2253 _2254-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2255-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2256 _2257 _2258 _2259 _2260-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2261 _2262-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2263 _2264-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2250) _2263) _defs_3) _lv_4) _seen_17)) (\_eq_func_18-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2251) _2264) _defs_3) _lv_4) _seen_17)) (\_eq_argm_19-> (u (u monad_pure fm_check_monad) ((_eq_func_18 && _eq_argm_19))))))))); (6,f) -> u f (\_2265 _2266 _2267-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2268 _2269 _2270-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2271 _2272 _2273-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2274 _2275 _2276-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2277-> (u (u (u fm_term_equal_patch _2277) _a_1) bool_true)); (11,f) -> u f (\_2278-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2279-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2280-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2281 _2282 _2283 _2284 _2285 _2286-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2287 _2288-> (u (u monad_pure fm_check_monad) bool_false)); }))); (6,f) -> u f (\_2289 _2290 _2291-> (let _2292 = _b1_9 in (case _2292 of {(0,f) -> u f (\_2293 _2294-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2295-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2296 _2297 _2298 _2299 _2300-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2301 _2302-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2303 _2304-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2305 _2306 _2307-> (let _seen_19=(u (u set_set _id_12) _seen_5) in (let _a1_body_20=(u _2291 (u (u fm_term_var _2289) _lv_4)) in (let _b1_body_21=(u _2307 (u (u fm_term_var _2305) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2290) _2306) _defs_3) _lv_4) _seen_19)) (\_eq_expr_22-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_20) _b1_body_21) _defs_3) (u nat_succ _lv_4)) _seen_19)) (\_eq_body_23-> (u (u monad_pure fm_check_monad) ((_eq_expr_22 && _eq_body_23))))))))))); (7,f) -> u f (\_2308 _2309 _2310-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2311 _2312 _2313-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2314 _2315 _2316-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2317-> (u (u (u fm_term_equal_patch _2317) _a_1) bool_true)); (11,f) -> u f (\_2318-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2319-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2320-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2321 _2322 _2323 _2324 _2325 _2326-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2327 _2328-> (u (u monad_pure fm_check_monad) bool_false)); }))); (7,f) -> u f (\_2329 _2330 _2331-> (let _2332 = _b1_9 in (case _2332 of {(0,f) -> u f (\_2333 _2334-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2335-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2336 _2337 _2338 _2339 _2340-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2341 _2342-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2343 _2344-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2345 _2346 _2347-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2348 _2349 _2350-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2351 _2352 _2353-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2354 _2355 _2356-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2357-> (u (u (u fm_term_equal_patch _2357) _a_1) bool_true)); (11,f) -> u f (\_2358-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2359-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2360-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2361 _2362 _2363 _2364 _2365 _2366-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2367 _2368-> (u (u monad_pure fm_check_monad) bool_false)); }))); (8,f) -> u f (\_2369 _2370 _2371-> (let _2372 = _b1_9 in (case _2372 of {(0,f) -> u f (\_2373 _2374-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2375-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2376 _2377 _2378 _2379 _2380-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2381 _2382-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2383 _2384-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2385 _2386 _2387-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2388 _2389 _2390-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2391 _2392 _2393-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2394 _2395 _2396-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2397-> (u (u (u fm_term_equal_patch _2397) _a_1) bool_true)); (11,f) -> u f (\_2398-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2399-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2400-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2401 _2402 _2403 _2404 _2405 _2406-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2407 _2408-> (u (u monad_pure fm_check_monad) bool_false)); }))); (9,f) -> u f (\_2409 _2410 _2411-> (let _2412 = _b1_9 in (case _2412 of {(0,f) -> u f (\_2413 _2414-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2415-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2416 _2417 _2418 _2419 _2420-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2421 _2422-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2423 _2424-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2425 _2426 _2427-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2428 _2429 _2430-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2431 _2432 _2433-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2434 _2435 _2436-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2437-> (u (u (u fm_term_equal_patch _2437) _a_1) bool_true)); (11,f) -> u f (\_2438-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2439-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2440-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2441 _2442 _2443 _2444 _2445 _2446-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2447 _2448-> (u (u monad_pure fm_check_monad) bool_false)); }))); (10,f) -> u f (\_2449-> (u (u (u fm_term_equal_patch _2449) _b_2) bool_true)); (11,f) -> u f (\_2450-> (let _2451 = _b1_9 in (case _2451 of {(0,f) -> u f (\_2452 _2453-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2454-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2455 _2456 _2457 _2458 _2459-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2460 _2461-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2462 _2463-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2464 _2465 _2466-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2467 _2468 _2469-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2470 _2471 _2472-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2473 _2474 _2475-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2476-> (u (u (u fm_term_equal_patch _2476) _a_1) bool_true)); (11,f) -> u f (\_2477-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2478-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2479-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2480 _2481 _2482 _2483 _2484 _2485-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2486 _2487-> (u (u monad_pure fm_check_monad) bool_false)); }))); (12,f) -> u f (\_2488-> (let _2489 = _b1_9 in (case _2489 of {(0,f) -> u f (\_2490 _2491-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2492-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2493 _2494 _2495 _2496 _2497-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2498 _2499-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2500 _2501-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2502 _2503 _2504-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2505 _2506 _2507-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2508 _2509 _2510-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2511 _2512 _2513-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2514-> (u (u (u fm_term_equal_patch _2514) _a_1) bool_true)); (11,f) -> u f (\_2515-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2516-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2517-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2518 _2519 _2520 _2521 _2522 _2523-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2524 _2525-> (u (u monad_pure fm_check_monad) bool_false)); }))); (13,f) -> u f (\_2526-> (let _2527 = _b1_9 in (case _2527 of {(0,f) -> u f (\_2528 _2529-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2530-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2531 _2532 _2533 _2534 _2535-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2536 _2537-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2538 _2539-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2540 _2541 _2542-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2543 _2544 _2545-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2546 _2547 _2548-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2549 _2550 _2551-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2552-> (u (u (u fm_term_equal_patch _2552) _a_1) bool_true)); (11,f) -> u f (\_2553-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2554-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2555-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2556 _2557 _2558 _2559 _2560 _2561-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2562 _2563-> (u (u monad_pure fm_check_monad) bool_false)); }))); (14,f) -> u f (\_2564 _2565 _2566 _2567 _2568 _2569-> (let _2570 = _b1_9 in (case _2570 of {(0,f) -> u f (\_2571 _2572-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2573-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2574 _2575 _2576 _2577 _2578-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2579 _2580-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2581 _2582-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2583 _2584 _2585-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2586 _2587 _2588-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2589 _2590 _2591-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2592 _2593 _2594-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2595-> (u (u (u fm_term_equal_patch _2595) _a_1) bool_true)); (11,f) -> u f (\_2596-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2597-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2598-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2599 _2600 _2601 _2602 _2603 _2604-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2605 _2606-> (u (u monad_pure fm_check_monad) bool_false)); }))); (15,f) -> u f (\_2607 _2608-> (let _2609 = _b1_9 in (case _2609 of {(0,f) -> u f (\_2610 _2611-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2612-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2613 _2614 _2615 _2616 _2617-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2618 _2619-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2620 _2621-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2622 _2623 _2624-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2625 _2626 _2627-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2628 _2629 _2630-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2631 _2632 _2633-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2634-> (u (u (u fm_term_equal_patch _2634) _a_1) bool_true)); (11,f) -> u f (\_2635-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2636-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2637-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2638 _2639 _2640 _2641 _2642 _2643-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2644 _2645-> (u (u monad_pure fm_check_monad) bool_false)); }))); }))))))))))))))))))))
set_new = map_new
fm_term_check = (\_term_1-> (\_type_2-> (\_defs_3-> (\_ctx_4-> (\_path_5-> (\_orig_6-> (u (u (u monad_bind fm_check_monad) (let _2646 = _term_1 in (case _2646 of {(0,f) -> u f (\_2647 _2648-> (let _2649 = (u (u list_at_last _2648) _ctx_4) in (case _2649 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2647)) list_nil))); (1,f) -> u f (\_2650-> (u (u monad_pure fm_check_monad) (let _2651 = _2650 in (case _2651 of {(0,f) -> u f (\_2652 _2653-> _2653); })))); }))); (1,f) -> u f (\_2654-> (let _2655 = (u (u fm_get _2654) _defs_3) in (case _2655 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2654)) list_nil))); (1,f) -> u f (\_2656-> (let _2657 = _2656 in (case _2657 of {(0,f) -> u f (\_2658 _2659 _2660 _2661 _2662 _2663-> (let _ref_name_15=_2660 in (let _ref_type_16=_2662 in (let _ref_term_17=_2661 in (let _ref_stat_18=_2663 in (let _2664 = _ref_stat_18 in (case _2664 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_waiting _ref_name_15)) list_nil))); (1,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (2,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (3,f) -> u f (\_2665-> (u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_indirect _ref_name_15)) list_nil))); }))))))); }))); }))); (2,f) -> u f ((u (u monad_pure fm_check_monad) fm_term_typ)); (3,f) -> u f (\_2666 _2667 _2668 _2669 _2670-> (let _ctx_size_12=(u list_length _ctx_4) in (let _self_var_13=(u (u fm_term_var _2667) _ctx_size_12) in (let _body_var_14=(u (u fm_term_var _2668) (u nat_succ _ctx_size_12)) in (let _body_ctx_15=(u (u list_cons (u (u pair_new _2668) _2669)) (u (u list_cons (u (u pair_new _2667) _term_1)) _ctx_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2669) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__16-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u (u _2670 _self_var_13) _body_var_14)) (u maybe_some fm_term_typ)) _defs_3) _body_ctx_15) (u fm_mpath_i _path_5)) _orig_6)) (\__17-> (u (u monad_pure fm_check_monad) fm_term_typ)))))))))); (4,f) -> u f (\_2671 _2672-> (let _2673 = _type_2 in (case _2673 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2674-> (let _typv_10=(u (u fm_term_reduce _2674) _defs_3) in (let _2675 = _typv_10 in (case _2675 of {(0,f) -> u f (\_2676 _2677-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2678-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2679 _2680 _2681 _2682 _2683-> (let _ctx_size_16=(u list_length _ctx_4) in (let _self_var_17=_term_1 in (let _body_var_18=(u (u fm_term_var _2671) _ctx_size_16) in (let _body_typ_19=(u (u _2683 _self_var_17) _body_var_18) in (let _body_ctx_20=(u (u list_cons (u (u pair_new _2671) _2682)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u _2672 _body_var_18)) (u maybe_some _body_typ_19)) _defs_3) _body_ctx_20) (u fm_mpath_o _path_5)) _orig_6)) (\__21-> (u (u monad_pure fm_check_monad) _2674))))))))); (4,f) -> u f (\_2684 _2685-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2686 _2687-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2688 _2689 _2690-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2691 _2692 _2693-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2694 _2695 _2696-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2697 _2698 _2699-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2700-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2701-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2702-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2703-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2704 _2705 _2706 _2707 _2708 _2709-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2710 _2711-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2674) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))); }))); (5,f) -> u f (\_2712 _2713-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2712) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_func_typ_9-> (let _func_typ_10=(u (u fm_term_reduce _func_typ_9) _defs_3) in (let _2714 = _func_typ_10 in (case _2714 of {(0,f) -> u f (\_2715 _2716-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2717-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2718 _2719 _2720 _2721 _2722-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2713) (u maybe_some _2721)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__16-> (u (u monad_pure fm_check_monad) (u (u _2722 _2712) _2713))))); (4,f) -> u f (\_2723 _2724-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2725 _2726-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2727 _2728 _2729-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2730 _2731 _2732-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2733 _2734 _2735-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2736 _2737 _2738-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2739-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2740-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2741-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2742-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2743 _2744 _2745 _2746 _2747 _2748-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2749 _2750-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))))); (6,f) -> u f (\_2751 _2752 _2753-> (let _ctx_size_10=(u list_length _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2752) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_expr_typ_11-> (let _body_val_12=(u _2753 (u (u fm_term_var _2751) _ctx_size_10)) in (let _body_ctx_13=(u (u list_cons (u (u pair_new _2751) _expr_typ_11)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _body_val_12) _type_2) _defs_3) _body_ctx_13) (u fm_mpath_i _path_5)) _orig_6)) (\_body_typ_14-> (u (u monad_pure fm_check_monad) _body_typ_14))))))))); (7,f) -> u f (\_2754 _2755 _2756-> (u (u (u (u (u (u fm_term_check (u _2756 _2755)) _type_2) _defs_3) _ctx_4) _path_5) _orig_6)); (8,f) -> u f (\_2757 _2758 _2759-> (let _2760 = _2757 in (if _2760 then (u (u monad_pure fm_check_monad) _2759) else (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2758) (u maybe_some _2759)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__10-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2759) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__11-> (u (u monad_pure fm_check_monad) _2759)))))))); (9,f) -> u f (\_2761 _2762 _2763-> (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u (u fm_error_show_goal _2761) _2762) _2763) _type_2) _ctx_4)) list_nil))); (10,f) -> u f (\_2764-> (u (u fm_check_result _type_2) list_nil)); (11,f) -> u f (\_2765-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Nat"))); (12,f) -> u f (\_2766-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Char"))); (13,f) -> u f (\_2767-> (u (u monad_pure fm_check_monad) (u fm_term_ref "String"))); (14,f) -> u f (\_2768 _2769 _2770 _2771 _2772 _2773-> (let _expr_13=_2769 in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _expr_13) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_etyp_14-> (let _dsug_15=(let _2774 = _2773 in (case _2774 of {(0,f) -> u f ((let _moti_15=(let _2775 = _type_2 in (case _2775 of {(0,f) -> u f ((u fm_term_hol bits_e)); (1,f) -> u f (\_2776-> (let _size_16=(u list_length _ctx_4) in (let _moti_17=(u (u (u (u (u (u fm_smartmotive_make _2770) _2769) _etyp_14) _2776) _size_16) _defs_3) in _moti_17))); })) in (u maybe_some (u (u (u (u (u (u fm_term_cse _2768) _2769) _2770) _2771) _2772) (u maybe_some _moti_15))))); (1,f) -> u f (\_2777-> (u (u (u (u (u (u (u (u fm_term_desugar_cse _2769) _2770) _2771) _2772) _2777) _etyp_14) _defs_3) _ctx_4)); })) in (let _2778 = _dsug_15 in (case _2778 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2779-> (u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_patch (u fm_mpath_to_bits _path_5)) _2779)) list_nil))); }))))))); (15,f) -> u f (\_2780 _2781-> (u (u (u (u (u (u fm_term_check _2781) _type_2) _defs_3) _ctx_4) _path_5) (u maybe_some _2780))); }))) (\_infr_7-> (let _2782 = _type_2 in (case _2782 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _infr_7)) list_nil)); (1,f) -> u f (\_2783-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2783) _infr_7) _defs_3) (u list_length _ctx_4)) set_new)) (\_eqls_9-> (let _2784 = _eqls_9 in (if _2784 then (u (u monad_pure fm_check_monad) _2783) else (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) (u either_right _2783)) (u either_right _infr_7)) _ctx_4)) list_nil))))))); }))))))))))
fm_path_nil = (\_x_1-> _x_1)
fm_mpath_nil = (u maybe_some fm_path_nil)
list_is_empty = (\_list_2-> (let _2785 = _list_2 in (case _2785 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_2786 _2787-> bool_false); })))
fm_term_patch_at = (\_path_1-> (\_term_2-> (\_fn_3-> (let _2788 = _term_2 in (case _2788 of {(0,f) -> u f (\_2789 _2790-> (let _2791 = _path_1 in (case _2791 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2792-> _term_2); (2,f) -> u f (\_2793-> _term_2); }))); (1,f) -> u f (\_2794-> (let _2795 = _path_1 in (case _2795 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2796-> _term_2); (2,f) -> u f (\_2797-> _term_2); }))); (2,f) -> u f ((let _2798 = _path_1 in (case _2798 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2799-> _term_2); (2,f) -> u f (\_2800-> _term_2); }))); (3,f) -> u f (\_2801 _2802 _2803 _2804 _2805-> (let _2806 = _path_1 in (case _2806 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2807-> (u (u (u (u (u fm_term_all _2801) _2802) _2803) (u (u (u fm_term_patch_at _2807) _2804) _fn_3)) _2805)); (2,f) -> u f (\_2808-> (u (u (u (u (u fm_term_all _2801) _2802) _2803) _2804) (\_s_10-> (\_x_11-> (u (u (u fm_term_patch_at _2808) (u (u _2805 _s_10) _x_11)) _fn_3))))); }))); (4,f) -> u f (\_2809 _2810-> (let _2811 = _path_1 in (case _2811 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2812-> (u (u fm_term_lam _2809) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2810 _x_7)) _fn_3)))); (2,f) -> u f (\_2813-> (u (u fm_term_lam _2809) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2810 _x_7)) _fn_3)))); }))); (5,f) -> u f (\_2814 _2815-> (let _2816 = _path_1 in (case _2816 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2817-> (u (u fm_term_app (u (u (u fm_term_patch_at _2817) _2814) _fn_3)) _2815)); (2,f) -> u f (\_2818-> (u (u fm_term_app _2814) (u (u (u fm_term_patch_at _2818) _2815) _fn_3))); }))); (6,f) -> u f (\_2819 _2820 _2821-> (let _2822 = _path_1 in (case _2822 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2823-> (u (u (u fm_term_let _2819) (u (u (u fm_term_patch_at _2823) _2820) _fn_3)) _2821)); (2,f) -> u f (\_2824-> (u (u (u fm_term_let _2819) _2820) (\_x_8-> (u (u (u fm_term_patch_at _2824) (u _2821 _x_8)) _fn_3)))); }))); (7,f) -> u f (\_2825 _2826 _2827-> (let _2828 = _path_1 in (case _2828 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2829-> (u (u (u fm_term_def _2825) (u (u (u fm_term_patch_at _2829) _2826) _fn_3)) _2827)); (2,f) -> u f (\_2830-> (u (u (u fm_term_def _2825) _2826) (\_x_8-> (u (u (u fm_term_patch_at _2830) (u _2827 _x_8)) _fn_3)))); }))); (8,f) -> u f (\_2831 _2832 _2833-> (let _2834 = _path_1 in (case _2834 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2835-> (u (u (u fm_term_ann _2831) (u (u (u fm_term_patch_at _path_1) _2832) _fn_3)) _2833)); (2,f) -> u f (\_2836-> (u (u (u fm_term_ann _2831) (u (u (u fm_term_patch_at _path_1) _2832) _fn_3)) _2833)); }))); (9,f) -> u f (\_2837 _2838 _2839-> (let _2840 = _path_1 in (case _2840 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2841-> _term_2); (2,f) -> u f (\_2842-> _term_2); }))); (10,f) -> u f (\_2843-> (let _2844 = _path_1 in (case _2844 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2845-> _term_2); (2,f) -> u f (\_2846-> _term_2); }))); (11,f) -> u f (\_2847-> (let _2848 = _path_1 in (case _2848 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2849-> _term_2); (2,f) -> u f (\_2850-> _term_2); }))); (12,f) -> u f (\_2851-> (let _2852 = _path_1 in (case _2852 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2853-> _term_2); (2,f) -> u f (\_2854-> _term_2); }))); (13,f) -> u f (\_2855-> (let _2856 = _path_1 in (case _2856 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2857-> _term_2); (2,f) -> u f (\_2858-> _term_2); }))); (14,f) -> u f (\_2859 _2860 _2861 _2862 _2863 _2864-> (let _2865 = _path_1 in (case _2865 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2866-> _term_2); (2,f) -> u f (\_2867-> _term_2); }))); (15,f) -> u f (\_2868 _2869-> (u (u (u fm_term_patch_at _path_1) _2869) _fn_3)); })))))
fm_synth_fix = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_defs_6-> (\_errs_7-> (\_fixd_8-> (let _2870 = _errs_7 in (case _2870 of {(0,f) -> u f ((let _2871 = _fixd_8 in (if _2871 then (let _type_9=(u (u (u fm_term_bind list_nil) (\_x_9-> (u bits_i _x_9))) _type_5) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_o _x_10))) _term_4) in (let _defs_11=(u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_10) _type_9) fm_status_init)) _defs_6) in (u (u monad_pure io_monad) (u maybe_some _defs_11))))) else (u (u monad_pure io_monad) maybe_none)))); (1,f) -> u f (\_2872 _2873-> (let _2874 = _2872 in (case _2874 of {(0,f) -> u f (\_2875 _2876 _2877 _2878-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2873) _fixd_8)); (1,f) -> u f (\_2879 _2880 _2881 _2882 _2883-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2873) _fixd_8)); (2,f) -> u f (\_2884-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2884) _defs_6)) (\_defs_12-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_12) _2873) bool_true)))); (3,f) -> u f (\_2885-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2873) _fixd_8)); (4,f) -> u f (\_2886 _2887-> (let _2888 = _2886 in (case _2888 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_2889-> (let _term_14=(u (u (u fm_term_patch_at _2889) _term_4) (\_x_14-> _2887)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_14) _type_5) _defs_6) _2873) bool_true))); (2,f) -> u f (\_2890-> (let _type_14=(u (u (u fm_term_patch_at _2890) _type_5) (\_x_14-> _2887)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_14) _defs_6) _2873) bool_true))); }))); (5,f) -> u f (\_2891 _2892-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2892) _defs_6)) (\_defs_13-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_13) _2873) bool_true)))); (6,f) -> u f (\_2893 _2894 _2895-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2873) _fixd_8)); }))); }))))))))))
fm_status_fail = (\_errors_1-> (3,\t-> t _errors_1))
fm_synth_one = (\_name_1-> (\_defs_2-> (let _2896 = (u (u fm_get _name_1) _defs_2) in (case _2896 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u (u fm_synth_load _name_1) _defs_2)) (\_loaded_3-> (let _2897 = _loaded_3 in (case _2897 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "Undefined: ") (u (u list_cons _name_1) list_nil))))) (\__4-> (u (u monad_pure io_monad) _defs_2)))); (1,f) -> u f (\_2898-> (u (u fm_synth_one _name_1) _2898)); }))))); (1,f) -> u f (\_2899-> (let _2900 = _2899 in (case _2900 of {(0,f) -> u f (\_2901 _2902 _2903 _2904 _2905 _2906-> (let _file_10=_2901 in (let _code_11=_2902 in (let _name_12=_2903 in (let _term_13=_2904 in (let _type_14=_2905 in (let _stat_15=_2906 in (let _2907 = _stat_15 in (case _2907 of {(0,f) -> u f ((let _defs_16=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) fm_status_wait)) _defs_2) in (let _checked_17=(u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _type_14) (u maybe_some fm_term_typ)) _defs_16) list_nil) (u fm_mpath_i fm_mpath_nil)) maybe_none)) (\_chk_type_17-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _term_13) (u maybe_some _type_14)) _defs_16) list_nil) (u fm_mpath_o fm_mpath_nil)) maybe_none)) (\_chk_term_18-> (u (u monad_pure fm_check_monad) unit_new))))) in (let _2908 = _checked_17 in (case _2908 of {(0,f) -> u f (\_2909 _2910-> (let _2911 = (u list_is_empty _2910) in (if _2911 then (let _defs_20=(u (u (u (u (u (u (u fm_define _file_10) _code_11) _name_12) _term_13) _type_14) bool_true) _defs_16) in (u (u monad_pure io_monad) _defs_20)) else (u (u (u monad_bind io_monad) (u (u (u (u (u (u (u (u fm_synth_fix _file_10) _code_11) _name_12) _term_13) _type_14) _defs_16) _2910) bool_false)) (\_fixed_20-> (let _2912 = _fixed_20 in (case _2912 of {(0,f) -> u f ((let _stat_21=(u fm_status_fail _2910) in (let _defs_22=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) _stat_21)) _defs_16) in (u (u monad_pure io_monad) _defs_22)))); (1,f) -> u f (\_2913-> (u (u fm_synth_one _name_12) _2913)); }))))))); }))))); (1,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (2,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (3,f) -> u f (\_2914-> (u (u monad_pure io_monad) _defs_2)); }))))))))); }))); }))))
map_values_go = (\_xs_2-> (\_list_3-> (let _2915 = _xs_2 in (case _2915 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2916 _2917 _2918-> (let _list0_7=(let _2919 = _2916 in (case _2919 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2920-> (u (u list_cons _2920) _list_3)); })) in (let _list1_8=(u (u map_values_go _2917) _list0_7) in (let _list2_9=(u (u map_values_go _2918) _list1_8) in _list2_9)))); }))))
map_values = (\_xs_2-> (u (u map_values_go _xs_2) list_nil))
fm_name_show = (\_name_1-> _name_1)
bits_to_nat = (\_b_1-> (let _2921 = _b_1 in (case _2921 of {(0,f) -> u f (0); (1,f) -> u f (\_2922-> (((2::Integer) * (u bits_to_nat _2922)))); (2,f) -> u f (\_2923-> (u nat_succ (((2::Integer) * (u bits_to_nat _2923))))); })))
u16_show_hex = (\_a_1-> (let _2924 = _a_1 in (u (u nat_to_string_base 16) (u bits_to_nat (u word_to_bits (u16_to_word _2924))))))
fm_escape_char = (\_chr_1-> (let _2925 = (((_chr_1::Word16) == fm_backslash)) in (if _2925 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2926 = (((_chr_1::Word16) == 34)) in (if _2926 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2927 = (((_chr_1::Word16) == 39)) in (if _2927 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2928 = (u (u (u u16_btw 32) _chr_1) 126) in (if _2928 then (u (u string_cons _chr_1) string_nil) else (u string_flatten (u (u list_cons (u (u string_cons fm_backslash) string_nil)) (u (u list_cons "u{") (u (u list_cons (u u16_show_hex _chr_1)) (u (u list_cons "}") (u (u list_cons string_nil) list_nil)))))))))))))))
fm_escape = (\_str_1-> (let _2929 = _str_1 in (if null (_2929::String) then string_nil else (let _head_4=(u fm_escape_char (fromIntegral (fromEnum (head _2929 :: Char)) :: Word16)) in (let _tail_5=(u fm_escape (tail _2929)) in (((_head_4::String) ++ _tail_5)))))))
fm_term_core = (\_term_1-> (let _2930 = _term_1 in (case _2930 of {(0,f) -> u f (\_2931 _2932-> (u fm_name_show _2931)); (1,f) -> u f (\_2933-> (u fm_name_show _2933)); (2,f) -> u f ("*"); (3,f) -> u f (\_2934 _2935 _2936 _2937 _2938-> (let _eras_7=_2934 in (let _init_8=(let _2939 = _eras_7 in (if _2939 then "%" else "@")) in (let _self_9=(u fm_name_show _2935) in (let _name_10=(u fm_name_show _2936) in (let _xtyp_11=(u fm_term_core _2937) in (let _body_12=(u fm_term_core (u (u _2938 (u (u fm_term_var _2935) 0)) (u (u fm_term_var _2936) 0))) in (u string_flatten (u (u list_cons _init_8) (u (u list_cons _self_9) (u (u list_cons "(") (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _xtyp_11) (u (u list_cons ") ") (u (u list_cons _body_12) list_nil)))))))))))))))); (4,f) -> u f (\_2940 _2941-> (let _name_4=(u fm_name_show _2940) in (let _body_5=(u fm_term_core (u _2941 (u (u fm_term_var _2940) 0))) in (u string_flatten (u (u list_cons "#") (u (u list_cons _name_4) (u (u list_cons " ") (u (u list_cons _body_5) list_nil)))))))); (5,f) -> u f (\_2942 _2943-> (let _func_4=(u fm_term_core _2942) in (let _argm_5=(u fm_term_core _2943) in (u string_flatten (u (u list_cons "(") (u (u list_cons _func_4) (u (u list_cons " ") (u (u list_cons _argm_5) (u (u list_cons ")") list_nil))))))))); (6,f) -> u f (\_2944 _2945 _2946-> (let _name_5=(u fm_name_show _2944) in (let _expr_6=(u fm_term_core _2945) in (let _body_7=(u fm_term_core (u _2946 (u (u fm_term_var _2944) 0))) in (u string_flatten (u (u list_cons "!") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (7,f) -> u f (\_2947 _2948 _2949-> (let _name_5=(u fm_name_show _2947) in (let _expr_6=(u fm_term_core _2948) in (let _body_7=(u fm_term_core (u _2949 (u (u fm_term_var _2947) 0))) in (u string_flatten (u (u list_cons "$") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (8,f) -> u f (\_2950 _2951 _2952-> (let _term_5=(u fm_term_core _2951) in (let _type_6=(u fm_term_core _2952) in (u string_flatten (u (u list_cons "{") (u (u list_cons _term_5) (u (u list_cons ":") (u (u list_cons _type_6) (u (u list_cons "}") list_nil))))))))); (9,f) -> u f (\_2953 _2954 _2955-> "<GOL>"); (10,f) -> u f (\_2956-> "<HOL>"); (11,f) -> u f (\_2957-> (u string_flatten (u (u list_cons "+") (u (u list_cons (u nat_show _2957)) list_nil)))); (12,f) -> u f (\_2958-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _2958)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_2959-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _2959)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_2960 _2961 _2962 _2963 _2964 _2965-> "<CSE>"); (15,f) -> u f (\_2966 _2967-> (u fm_term_core _2967)); })))
fm_defs_core = (\_defs_1-> (let _result_2="" in (let _result_3=(u (u (u list_for (u map_values _defs_1)) _result_2) (\_defn_3-> (\_result_4-> (let _2968 = _defn_3 in (case _2968 of {(0,f) -> u f (\_2969 _2970 _2971 _2972 _2973 _2974-> (let _2975 = _2974 in (case _2975 of {(0,f) -> u f (_result_4); (1,f) -> u f (_result_4); (2,f) -> u f ((let _name_11=_2971 in (let _term_12=(u fm_term_core _2972) in (let _type_13=(u fm_term_core _2973) in (u string_flatten (u (u list_cons _result_4) (u (u list_cons _name_11) (u (u list_cons " : ") (u (u list_cons _type_13) (u (u list_cons " = ") (u (u list_cons _term_12) (u (u list_cons ";\n") list_nil)))))))))))); (3,f) -> u f (\_2976-> _result_4); }))); }))))) in _result_3)))
fm_to_core_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u (u monad_pure io_monad) (u fm_defs_core _defs_2)))))
maybe_bind = (\_m_3-> (\_f_4-> (let _2977 = _m_3 in (case _2977 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_2978-> (u _f_4 _2978)); }))))
maybe_monad = (u (u monad_new maybe_bind) maybe_some)
fm_term_show_as_nat_go = (\_term_1-> (let _2979 = _term_1 in (case _2979 of {(0,f) -> u f (\_2980 _2981-> maybe_none); (1,f) -> u f (\_2982-> (let _2983 = (((_2982::String) == "Nat.zero")) in (if _2983 then (u maybe_some 0) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_2984 _2985 _2986 _2987 _2988-> maybe_none); (4,f) -> u f (\_2989 _2990-> maybe_none); (5,f) -> u f (\_2991 _2992-> (let _2993 = _2991 in (case _2993 of {(0,f) -> u f (\_2994 _2995-> maybe_none); (1,f) -> u f (\_2996-> (let _2997 = (((_2996::String) == "Nat.succ")) in (if _2997 then (u (u (u monad_bind maybe_monad) (u fm_term_show_as_nat_go _2992)) (\_pred_5-> (u (u monad_pure maybe_monad) (u nat_succ _pred_5)))) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_2998 _2999 _3000 _3001 _3002-> maybe_none); (4,f) -> u f (\_3003 _3004-> maybe_none); (5,f) -> u f (\_3005 _3006-> maybe_none); (6,f) -> u f (\_3007 _3008 _3009-> maybe_none); (7,f) -> u f (\_3010 _3011 _3012-> maybe_none); (8,f) -> u f (\_3013 _3014 _3015-> maybe_none); (9,f) -> u f (\_3016 _3017 _3018-> maybe_none); (10,f) -> u f (\_3019-> maybe_none); (11,f) -> u f (\_3020-> maybe_none); (12,f) -> u f (\_3021-> maybe_none); (13,f) -> u f (\_3022-> maybe_none); (14,f) -> u f (\_3023 _3024 _3025 _3026 _3027 _3028-> maybe_none); (15,f) -> u f (\_3029 _3030-> maybe_none); }))); (6,f) -> u f (\_3031 _3032 _3033-> maybe_none); (7,f) -> u f (\_3034 _3035 _3036-> maybe_none); (8,f) -> u f (\_3037 _3038 _3039-> maybe_none); (9,f) -> u f (\_3040 _3041 _3042-> maybe_none); (10,f) -> u f (\_3043-> maybe_none); (11,f) -> u f (\_3044-> maybe_none); (12,f) -> u f (\_3045-> maybe_none); (13,f) -> u f (\_3046-> maybe_none); (14,f) -> u f (\_3047 _3048 _3049 _3050 _3051 _3052-> maybe_none); (15,f) -> u f (\_3053 _3054-> maybe_none); })))
fm_term_show_as_nat = (\_term_1-> (u (u maybe_mapped (u fm_term_show_as_nat_go _term_1)) nat_show))
fm_term_show_is_ref = (\_term_1-> (\_name_2-> (let _3055 = _term_1 in (case _3055 of {(0,f) -> u f (\_3056 _3057-> bool_false); (1,f) -> u f (\_3058-> (((_name_2::String) == _3058))); (2,f) -> u f (bool_false); (3,f) -> u f (\_3059 _3060 _3061 _3062 _3063-> bool_false); (4,f) -> u f (\_3064 _3065-> bool_false); (5,f) -> u f (\_3066 _3067-> bool_false); (6,f) -> u f (\_3068 _3069 _3070-> bool_false); (7,f) -> u f (\_3071 _3072 _3073-> bool_false); (8,f) -> u f (\_3074 _3075 _3076-> bool_false); (9,f) -> u f (\_3077 _3078 _3079-> bool_false); (10,f) -> u f (\_3080-> bool_false); (11,f) -> u f (\_3081-> bool_false); (12,f) -> u f (\_3082-> bool_false); (13,f) -> u f (\_3083-> bool_false); (14,f) -> u f (\_3084 _3085 _3086 _3087 _3088 _3089-> bool_false); (15,f) -> u f (\_3090 _3091-> bool_false); }))))
nat_eql = (\a0-> \a1-> ((a0::Integer) == a1))
fm_term_show_app = (\_term_1-> (\_path_2-> (\_args_3-> (let _3092 = _term_1 in (case _3092 of {(0,f) -> u f (\_3093 _3094-> (let _arity_6=(u list_length _args_3) in (let _3095 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3095 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3096 = _func_7 in (if null (_3096::String) then bool_false else ((((fromIntegral (fromEnum (head _3096 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3097 = _wrap_8 in (if _3097 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (1,f) -> u f (\_3098-> (let _arity_5=(u list_length _args_3) in (let _3099 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3099 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3100 = _func_6 in (if null (_3100::String) then bool_false else ((((fromIntegral (fromEnum (head _3100 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3101 = _wrap_7 in (if _3101 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (2,f) -> u f ((let _arity_4=(u list_length _args_3) in (let _3102 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_4::Integer) == 3)))) in (if _3102 then (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_6=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_7=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_6) (u (u list_cons " == ") (u (u list_cons _eq_rgt_7) list_nil))))))) else (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_6=(let _3103 = _func_5 in (if null (_3103::String) then bool_false else ((((fromIntegral (fromEnum (head _3103 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_7=(u (u string_join ",") _args_3) in (let _func_8=(let _3104 = _wrap_6 in (if _3104 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_5) (u (u list_cons ")") list_nil)))) else _func_5)) in (u string_flatten (u (u list_cons _func_8) (u (u list_cons "(") (u (u list_cons _args_7) (u (u list_cons ")") list_nil))))))))))))); (3,f) -> u f (\_3105 _3106 _3107 _3108 _3109-> (let _arity_9=(u list_length _args_3) in (let _3110 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_9::Integer) == 3)))) in (if _3110 then (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_11=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_12=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_11) (u (u list_cons " == ") (u (u list_cons _eq_rgt_12) list_nil))))))) else (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_11=(let _3111 = _func_10 in (if null (_3111::String) then bool_false else ((((fromIntegral (fromEnum (head _3111 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_12=(u (u string_join ",") _args_3) in (let _func_13=(let _3112 = _wrap_11 in (if _3112 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_10) (u (u list_cons ")") list_nil)))) else _func_10)) in (u string_flatten (u (u list_cons _func_13) (u (u list_cons "(") (u (u list_cons _args_12) (u (u list_cons ")") list_nil))))))))))))); (4,f) -> u f (\_3113 _3114-> (let _arity_6=(u list_length _args_3) in (let _3115 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3115 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3116 = _func_7 in (if null (_3116::String) then bool_false else ((((fromIntegral (fromEnum (head _3116 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3117 = _wrap_8 in (if _3117 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (5,f) -> u f (\_3118 _3119-> (let _argm_6=(u (u fm_term_show_go _3119) (u fm_mpath_i _path_2)) in (u (u (u fm_term_show_app _3118) (u fm_mpath_o _path_2)) (u (u list_cons _argm_6) _args_3)))); (6,f) -> u f (\_3120 _3121 _3122-> (let _arity_7=(u list_length _args_3) in (let _3123 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3123 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3124 = _func_8 in (if null (_3124::String) then bool_false else ((((fromIntegral (fromEnum (head _3124 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3125 = _wrap_9 in (if _3125 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (7,f) -> u f (\_3126 _3127 _3128-> (let _arity_7=(u list_length _args_3) in (let _3129 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3129 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3130 = _func_8 in (if null (_3130::String) then bool_false else ((((fromIntegral (fromEnum (head _3130 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3131 = _wrap_9 in (if _3131 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (8,f) -> u f (\_3132 _3133 _3134-> (let _arity_7=(u list_length _args_3) in (let _3135 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3135 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3136 = _func_8 in (if null (_3136::String) then bool_false else ((((fromIntegral (fromEnum (head _3136 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3137 = _wrap_9 in (if _3137 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (9,f) -> u f (\_3138 _3139 _3140-> (let _arity_7=(u list_length _args_3) in (let _3141 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3141 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3142 = _func_8 in (if null (_3142::String) then bool_false else ((((fromIntegral (fromEnum (head _3142 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3143 = _wrap_9 in (if _3143 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (10,f) -> u f (\_3144-> (let _arity_5=(u list_length _args_3) in (let _3145 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3145 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3146 = _func_6 in (if null (_3146::String) then bool_false else ((((fromIntegral (fromEnum (head _3146 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3147 = _wrap_7 in (if _3147 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (11,f) -> u f (\_3148-> (let _arity_5=(u list_length _args_3) in (let _3149 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3149 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3150 = _func_6 in (if null (_3150::String) then bool_false else ((((fromIntegral (fromEnum (head _3150 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3151 = _wrap_7 in (if _3151 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (12,f) -> u f (\_3152-> (let _arity_5=(u list_length _args_3) in (let _3153 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3153 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3154 = _func_6 in (if null (_3154::String) then bool_false else ((((fromIntegral (fromEnum (head _3154 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3155 = _wrap_7 in (if _3155 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (13,f) -> u f (\_3156-> (let _arity_5=(u list_length _args_3) in (let _3157 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3157 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3158 = _func_6 in (if null (_3158::String) then bool_false else ((((fromIntegral (fromEnum (head _3158 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3159 = _wrap_7 in (if _3159 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (14,f) -> u f (\_3160 _3161 _3162 _3163 _3164 _3165-> (let _arity_10=(u list_length _args_3) in (let _3166 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_10::Integer) == 3)))) in (if _3166 then (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_12=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_13=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_12) (u (u list_cons " == ") (u (u list_cons _eq_rgt_13) list_nil))))))) else (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_12=(let _3167 = _func_11 in (if null (_3167::String) then bool_false else ((((fromIntegral (fromEnum (head _3167 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_13=(u (u string_join ",") _args_3) in (let _func_14=(let _3168 = _wrap_12 in (if _3168 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_11) (u (u list_cons ")") list_nil)))) else _func_11)) in (u string_flatten (u (u list_cons _func_14) (u (u list_cons "(") (u (u list_cons _args_13) (u (u list_cons ")") list_nil))))))))))))); (15,f) -> u f (\_3169 _3170-> (let _arity_6=(u list_length _args_3) in (let _3171 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3171 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3172 = _func_7 in (if null (_3172::String) then bool_false else ((((fromIntegral (fromEnum (head _3172 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3173 = _wrap_8 in (if _3173 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); })))))
map_to_list_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _3174 = _xs_2 in (case _3174 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3175 _3176 _3177-> (let _list0_8=(let _3178 = _3175 in (case _3178 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3179-> (u (u list_cons (u (u pair_new (u bits_reverse _key_3)) _3179)) _list_4)); })) in (let _list1_9=(u (u (u map_to_list_go _3176) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_to_list_go _3177) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_to_list = (\_xs_2-> (u list_reverse (u (u (u map_to_list_go _xs_2) bits_e) list_nil)))
bits_chunks_of_go = (\_len_1-> (\_bits_2-> (\_need_3-> (\_chunk_4-> (let _3180 = _bits_2 in (case _3180 of {(0,f) -> u f ((u (u list_cons (u bits_reverse _chunk_4)) list_nil)); (1,f) -> u f (\_3181-> (let _3182 = _need_3 in (if _3182==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_o _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _3181) (_3182-1)) _chunk_7))))); (2,f) -> u f (\_3183-> (let _3184 = _need_3 in (if _3184==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_i _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _3183) (_3184-1)) _chunk_7))))); }))))))
bits_chunks_of = (\_len_1-> (\_bits_2-> (u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e)))
word_from_bits = (\_size_1-> (\_bits_2-> (let _3185 = _size_1 in (if _3185==0 then word_e else (let _3186 = _bits_2 in (case _3186 of {(0,f) -> u f ((u word_o (u (u word_from_bits (_3185-1)) bits_e))); (1,f) -> u f (\_3187-> (u word_o (u (u word_from_bits (_3185-1)) _3187))); (2,f) -> u f (\_3188-> (u word_i (u (u word_from_bits (_3185-1)) _3188))); }))))))
fm_name_from_bits = (\_bits_1-> (let _list_2=(u (u bits_chunks_of 6) _bits_1) in (let _name_3=(u (u (u list_fold _list_2) string_nil) (\_bts_3-> (\_name_4-> (let _u16_5=(u u16_new (u (u word_from_bits 16) (u bits_reverse _bts_3))) in (let _chr_6=(let _3189 = (u (u (u u16_btw 0) _u16_5) 25) in (if _3189 then (((_u16_5::Word16) + 65)) else (let _3190 = (u (u (u u16_btw 26) _u16_5) 51) in (if _3190 then (((_u16_5::Word16) + 71)) else (let _3191 = (u (u (u u16_btw 52) _u16_5) 61) in (if _3191 then (((_u16_5::Word16) - 4)) else (let _3192 = (((62::Word16) == _u16_5)) in (if _3192 then 46 else 95)))))))) in (u (u string_cons _chr_6) _name_4)))))) in _name_3)))
pair_fst = (\_pair_3-> (let _3193 = _pair_3 in (case _3193 of {(0,f) -> u f (\_3194 _3195-> _3194); })))
fm_term_show_go = (\_term_1-> (\_path_2-> (let _3196 = (u fm_term_show_as_nat _term_1) in (case _3196 of {(0,f) -> u f ((let _3197 = _term_1 in (case _3197 of {(0,f) -> u f (\_3198 _3199-> (u fm_name_show _3198)); (1,f) -> u f (\_3200-> (let _name_4=(u fm_name_show _3200) in (let _3201 = _path_2 in (case _3201 of {(0,f) -> u f (_name_4); (1,f) -> u f (\_3202-> (let _path_val_6=(u (u bits_concat (u fm_path_to_bits _3202)) (u bits_i bits_e)) in (let _path_str_7=(u nat_show (u bits_to_nat _path_val_6)) in (u string_flatten (u (u list_cons _name_4) (u (u list_cons (u (u fm_color "2") ((("-"::String) ++ _path_str_7)))) list_nil)))))); })))); (2,f) -> u f ("Type"); (3,f) -> u f (\_3203 _3204 _3205 _3206 _3207-> (let _eras_8=_3203 in (let _self_9=(u fm_name_show _3204) in (let _name_10=(u fm_name_show _3205) in (let _type_11=(u (u fm_term_show_go _3206) (u fm_mpath_o _path_2)) in (let _open_12=(let _3208 = _eras_8 in (if _3208 then "<" else "(")) in (let _clos_13=(let _3209 = _eras_8 in (if _3209 then ">" else ")")) in (let _body_14=(u (u fm_term_show_go (u (u _3207 (u (u fm_term_var _3204) 0)) (u (u fm_term_var _3205) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _self_9) (u (u list_cons _open_12) (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _type_11) (u (u list_cons _clos_13) (u (u list_cons " ") (u (u list_cons _body_14) list_nil))))))))))))))))); (4,f) -> u f (\_3210 _3211-> (let _name_5=(u fm_name_show _3210) in (let _body_6=(u (u fm_term_show_go (u _3211 (u (u fm_term_var _3210) 0))) (u fm_mpath_o _path_2)) in (u string_flatten (u (u list_cons "(") (u (u list_cons _name_5) (u (u list_cons ") ") (u (u list_cons _body_6) list_nil)))))))); (5,f) -> u f (\_3212 _3213-> (u (u (u fm_term_show_app _term_1) _path_2) list_nil)); (6,f) -> u f (\_3214 _3215 _3216-> (let _name_6=(u fm_name_show _3214) in (let _expr_7=(u (u fm_term_show_go _3215) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _3216 (u (u fm_term_var _3214) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "let ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (7,f) -> u f (\_3217 _3218 _3219-> (let _name_6=(u fm_name_show _3217) in (let _expr_7=(u (u fm_term_show_go _3218) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _3219 (u (u fm_term_var _3217) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "def ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (8,f) -> u f (\_3220 _3221 _3222-> (let _term_6=(u (u fm_term_show_go _3221) (u fm_mpath_o _path_2)) in (let _type_7=(u (u fm_term_show_go _3222) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _term_6) (u (u list_cons "::") (u (u list_cons _type_7) list_nil))))))); (9,f) -> u f (\_3223 _3224 _3225-> (let _name_6=(u fm_name_show _3223) in (u string_flatten (u (u list_cons "?") (u (u list_cons _name_6) list_nil))))); (10,f) -> u f (\_3226-> "_"); (11,f) -> u f (\_3227-> (u string_flatten (u (u list_cons (u nat_show _3227)) list_nil))); (12,f) -> u f (\_3228-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _3228)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_3229-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _3229)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_3230 _3231 _3232 _3233 _3234 _3235-> (let _expr_9=(u (u fm_term_show_go _3231) (u fm_mpath_o _path_2)) in (let _name_10=(u fm_name_show _3232) in (let _wyth_11=(u (u string_join "") (u (u list_mapped _3233) (\_defn_11-> (let _3236 = _defn_11 in (case _3236 of {(0,f) -> u f (\_3237 _3238 _3239 _3240 _3241 _3242-> (let _name_18=(u fm_name_show _3239) in (let _type_19=(u (u fm_term_show_go _3241) maybe_none) in (let _term_20=(u (u fm_term_show_go _3240) maybe_none) in (u string_flatten (u (u list_cons _name_18) (u (u list_cons ": ") (u (u list_cons _type_19) (u (u list_cons " = ") (u (u list_cons _term_20) (u (u list_cons ";") list_nil))))))))))); }))))) in (let _cses_12=(u map_to_list _3234) in (let _cses_13=(u (u string_join "") (u (u list_mapped _cses_12) (\_x_13-> (let _name_14=(u fm_name_from_bits (u pair_fst _x_13)) in (let _term_15=(u (u fm_term_show_go (u pair_snd _x_13)) maybe_none) in (u string_flatten (u (u list_cons _name_14) (u (u list_cons ": ") (u (u list_cons _term_15) (u (u list_cons "; ") list_nil)))))))))) in (let _moti_14=(let _3243 = _3235 in (case _3243 of {(0,f) -> u f (""); (1,f) -> u f (\_3244-> (u string_flatten (u (u list_cons ": ") (u (u list_cons (u (u fm_term_show_go _3244) maybe_none)) list_nil)))); })) in (u string_flatten (u (u list_cons "case ") (u (u list_cons _expr_9) (u (u list_cons " as ") (u (u list_cons _name_10) (u (u list_cons _wyth_11) (u (u list_cons " { ") (u (u list_cons _cses_13) (u (u list_cons "}") (u (u list_cons _moti_14) list_nil))))))))))))))))); (15,f) -> u f (\_3245 _3246-> (u (u fm_term_show_go _3246) _path_2)); }))); (1,f) -> u f (\_3247-> _3247); }))))
fm_term_show = (\_term_1-> (u (u fm_term_show_go _term_1) maybe_none))
fm_error_relevant = (\_errors_1-> (\_got_2-> (let _3248 = _errors_1 in (case _3248 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_3249 _3250-> (let _keep_5=(let _3251 = _3249 in (case _3251 of {(0,f) -> u f (\_3252 _3253 _3254 _3255-> ((not _got_2))); (1,f) -> u f (\_3256 _3257 _3258 _3259 _3260-> bool_true); (2,f) -> u f (\_3261-> bool_false); (3,f) -> u f (\_3262-> bool_false); (4,f) -> u f (\_3263 _3264-> bool_false); (5,f) -> u f (\_3265 _3266-> ((not _got_2))); (6,f) -> u f (\_3267 _3268 _3269-> ((not _got_2))); })) in (let _got_6=(let _3270 = _3249 in (case _3270 of {(0,f) -> u f (\_3271 _3272 _3273 _3274-> bool_true); (1,f) -> u f (\_3275 _3276 _3277 _3278 _3279-> _got_2); (2,f) -> u f (\_3280-> _got_2); (3,f) -> u f (\_3281-> _got_2); (4,f) -> u f (\_3282 _3283-> _got_2); (5,f) -> u f (\_3284 _3285-> bool_true); (6,f) -> u f (\_3286 _3287 _3288-> _got_2); })) in (let _tail_7=(u (u fm_error_relevant _3250) _got_6) in (let _3289 = _keep_5 in (if _3289 then (u (u list_cons _3249) _tail_7) else _tail_7)))))); }))))
fm_context_show = (\_context_1-> (let _3290 = _context_1 in (case _3290 of {(0,f) -> u f (""); (1,f) -> u f (\_3291 _3292-> (let _3293 = _3291 in (case _3293 of {(0,f) -> u f (\_3294 _3295-> (let _name_6=(u fm_name_show _3294) in (let _type_7=(u fm_term_show _3295) in (let _rest_8=(u fm_context_show _3292) in (u string_flatten (u (u list_cons _rest_8) (u (u list_cons "- ") (u (u list_cons _name_6) (u (u list_cons ": ") (u (u list_cons _type_7) (u (u list_cons "\n") list_nil))))))))))); }))); })))
fm_term_expand_at = (\_path_1-> (\_term_2-> (\_defs_3-> (u (u (u fm_term_patch_at _path_1) _term_2) (\_term_4-> (let _3296 = _term_4 in (case _3296 of {(0,f) -> u f (\_3297 _3298-> _term_4); (1,f) -> u f (\_3299-> (let _3300 = (u (u fm_get _3299) _defs_3) in (case _3300 of {(0,f) -> u f ((u fm_term_ref _3299)); (1,f) -> u f (\_3301-> (let _3302 = _3301 in (case _3302 of {(0,f) -> u f (\_3303 _3304 _3305 _3306 _3307 _3308-> _3306); }))); }))); (2,f) -> u f (_term_4); (3,f) -> u f (\_3309 _3310 _3311 _3312 _3313-> _term_4); (4,f) -> u f (\_3314 _3315-> _term_4); (5,f) -> u f (\_3316 _3317-> _term_4); (6,f) -> u f (\_3318 _3319 _3320-> _term_4); (7,f) -> u f (\_3321 _3322 _3323-> _term_4); (8,f) -> u f (\_3324 _3325 _3326-> _term_4); (9,f) -> u f (\_3327 _3328 _3329-> _term_4); (10,f) -> u f (\_3330-> _term_4); (11,f) -> u f (\_3331-> _term_4); (12,f) -> u f (\_3332-> _term_4); (13,f) -> u f (\_3333-> _term_4); (14,f) -> u f (\_3334 _3335 _3336 _3337 _3338 _3339-> _term_4); (15,f) -> u f (\_3340 _3341-> _term_4); })))))))
bool_or = (\a0-> \a1-> (a0 || a1))
fm_term_expand_ct = (\_term_1-> (\_defs_2-> (\_arity_3-> (let _3342 = _term_1 in (case _3342 of {(0,f) -> u f (\_3343 _3344-> (u (u fm_term_var _3343) _3344)); (1,f) -> u f (\_3345-> (let _expand_5=bool_false in (let _expand_6=(((((((_3345::String) == "Nat.succ")) && (((_arity_3::Integer) > 1)))) || _expand_5)) in (let _expand_7=(((((((_3345::String) == "Nat.zero")) && (((_arity_3::Integer) > 0)))) || _expand_6)) in (let _expand_8=(((((((_3345::String) == "Bool.true")) && (((_arity_3::Integer) > 0)))) || _expand_7)) in (let _expand_9=(((((((_3345::String) == "Bool.false")) && (((_arity_3::Integer) > 0)))) || _expand_8)) in (let _3346 = _expand_9 in (if _3346 then (let _3347 = (u (u fm_get _3345) _defs_2) in (case _3347 of {(0,f) -> u f ((u fm_term_ref _3345)); (1,f) -> u f (\_3348-> (let _3349 = _3348 in (case _3349 of {(0,f) -> u f (\_3350 _3351 _3352 _3353 _3354 _3355-> _3353); }))); })) else (u fm_term_ref _3345))))))))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_3356 _3357 _3358 _3359 _3360-> (u (u (u (u (u fm_term_all _3356) _3357) _3358) (u (u (u fm_term_expand_ct _3359) _defs_2) 0)) (\_s_9-> (\_x_10-> (u (u (u fm_term_expand_ct (u (u _3360 _s_9) _x_10)) _defs_2) 0))))); (4,f) -> u f (\_3361 _3362-> (u (u fm_term_lam _3361) (\_x_6-> (u (u (u fm_term_expand_ct (u _3362 _x_6)) _defs_2) 0)))); (5,f) -> u f (\_3363 _3364-> (u (u fm_term_app (u (u (u fm_term_expand_ct _3363) _defs_2) (u nat_succ _arity_3))) (u (u (u fm_term_expand_ct _3364) _defs_2) 0))); (6,f) -> u f (\_3365 _3366 _3367-> (u (u (u fm_term_let _3365) (u (u (u fm_term_expand_ct _3366) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _3367 _x_7)) _defs_2) 0)))); (7,f) -> u f (\_3368 _3369 _3370-> (u (u (u fm_term_def _3368) (u (u (u fm_term_expand_ct _3369) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _3370 _x_7)) _defs_2) 0)))); (8,f) -> u f (\_3371 _3372 _3373-> (u (u (u fm_term_ann _3371) (u (u (u fm_term_expand_ct _3372) _defs_2) 0)) (u (u (u fm_term_expand_ct _3373) _defs_2) 0))); (9,f) -> u f (\_3374 _3375 _3376-> (u (u (u fm_term_gol _3374) _3375) _3376)); (10,f) -> u f (\_3377-> (u fm_term_hol _3377)); (11,f) -> u f (\_3378-> (u fm_term_nat _3378)); (12,f) -> u f (\_3379-> (u fm_term_chr _3379)); (13,f) -> u f (\_3380-> (u fm_term_str _3380)); (14,f) -> u f (\_3381 _3382 _3383 _3384 _3385 _3386-> _term_1); (15,f) -> u f (\_3387 _3388-> (u (u fm_term_ori _3387) _3388)); })))))
fm_term_expand = (\_dref_1-> (\_term_2-> (\_defs_3-> (let _term_4=(u (u fm_term_normalize _term_2) map_new) in (let _term_5=(u (u (u list_for _dref_1) _term_4) (\_path_5-> (\_term_6-> (let _term_7=(u (u (u fm_term_expand_at _path_5) _term_6) _defs_3) in (let _term_8=(u (u fm_term_normalize _term_7) map_new) in (let _term_9=(u (u (u fm_term_expand_ct _term_8) _defs_3) 0) in (let _term_10=(u (u fm_term_normalize _term_9) map_new) in _term_10))))))) in _term_5)))))
fm_error_show = (\_error_1-> (\_defs_2-> (let _3389 = _error_1 in (case _3389 of {(0,f) -> u f (\_3390 _3391 _3392 _3393-> (let _expected_7=(let _3394 = _3391 in (case _3394 of {(0,f) -> u f (\_3395-> _3395); (1,f) -> u f (\_3396-> (u fm_term_show (u (u fm_term_normalize _3396) map_new))); })) in (let _detected_8=(let _3397 = _3392 in (case _3397 of {(0,f) -> u f (\_3398-> _3398); (1,f) -> u f (\_3399-> (u fm_term_show (u (u fm_term_normalize _3399) map_new))); })) in (u string_flatten (u (u list_cons "Type mismatch.\n") (u (u list_cons "- Expected: ") (u (u list_cons _expected_7) (u (u list_cons "\n") (u (u list_cons "- Detected: ") (u (u list_cons _detected_8) (u (u list_cons "\n") (u (u list_cons (let _3400 = _3393 in (case _3400 of {(0,f) -> u f (""); (1,f) -> u f (\_3401 _3402-> (u string_flatten (u (u list_cons "With context:\n") (u (u list_cons (u fm_context_show _3393)) list_nil)))); }))) list_nil)))))))))))); (1,f) -> u f (\_3403 _3404 _3405 _3406 _3407-> (let _goal_name_8=(u string_flatten (u (u list_cons "Goal ?") (u (u list_cons (u fm_name_show _3403)) (u (u list_cons ":\n") list_nil)))) in (let _with_type_9=(let _3408 = _3406 in (case _3408 of {(0,f) -> u f (""); (1,f) -> u f (\_3409-> (let _goal_10=(u (u (u fm_term_expand _3404) _3409) _defs_2) in (u string_flatten (u (u list_cons "With type: ") (u (u list_cons (let _3410 = _3405 in (if _3410 then (u (u fm_term_show_go _goal_10) (u maybe_some (\_x_11-> _x_11))) else (u fm_term_show _goal_10)))) (u (u list_cons "\n") list_nil)))))); })) in (let _with_ctxt_10=(let _3411 = _3407 in (case _3411 of {(0,f) -> u f (""); (1,f) -> u f (\_3412 _3413-> (u string_flatten (u (u list_cons "With ctxt:\n") (u (u list_cons (u fm_context_show _3407)) list_nil)))); })) in (u string_flatten (u (u list_cons _goal_name_8) (u (u list_cons _with_type_9) (u (u list_cons _with_ctxt_10) list_nil)))))))); (2,f) -> u f (\_3414-> (u string_flatten (u (u list_cons "Waiting for '") (u (u list_cons _3414) (u (u list_cons "'.") list_nil))))); (3,f) -> u f (\_3415-> (u string_flatten (u (u list_cons "Error on dependency '") (u (u list_cons _3415) (u (u list_cons "'.") list_nil))))); (4,f) -> u f (\_3416 _3417-> (u string_flatten (u (u list_cons "Patching: ") (u (u list_cons (u fm_term_show _3417)) list_nil)))); (5,f) -> u f (\_3418 _3419-> (u string_flatten (u (u list_cons "Undefined reference: ") (u (u list_cons (u fm_name_show _3419)) (u (u list_cons "\n") list_nil))))); (6,f) -> u f (\_3420 _3421 _3422-> (let _term_6=(u fm_term_show _3421) in (let _context_7=(u fm_context_show _3422) in (u string_flatten (u (u list_cons "Can't infer type of: ") (u (u list_cons _term_6) (u (u list_cons "\n") (u (u list_cons "With ctxt:\n") (u (u list_cons _context_7) list_nil))))))))); }))))
fm_error_origin = (\_error_1-> (let _3423 = _error_1 in (case _3423 of {(0,f) -> u f (\_3424 _3425 _3426 _3427-> _3424); (1,f) -> u f (\_3428 _3429 _3430 _3431 _3432-> maybe_none); (2,f) -> u f (\_3433-> maybe_none); (3,f) -> u f (\_3434-> maybe_none); (4,f) -> u f (\_3435 _3436-> maybe_none); (5,f) -> u f (\_3437 _3438-> _3437); (6,f) -> u f (\_3439 _3440 _3441-> _3439); })))
fm_defs_report_go = (\_defs_1-> (\_list_2-> (\_errs_3-> (\_typs_4-> (let _3442 = _list_2 in (case _3442 of {(0,f) -> u f ((u string_flatten (u (u list_cons _typs_4) (u (u list_cons "\n") (u (u list_cons (let _3443 = _errs_3 in (if null (_3443::String) then "All terms check." else _errs_3))) list_nil))))); (1,f) -> u f (\_3444 _3445-> (let _name_7=_3444 in (let _3446 = (u (u fm_get _name_7) _defs_1) in (case _3446 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_3) _typs_4)); (1,f) -> u f (\_3447-> (let _3448 = _3447 in (case _3448 of {(0,f) -> u f (\_3449 _3450 _3451 _3452 _3453 _3454-> (let _typs_15=(u string_flatten (u (u list_cons _typs_4) (u (u list_cons _name_7) (u (u list_cons ": ") (u (u list_cons (u fm_term_show _3453)) (u (u list_cons "\n") list_nil)))))) in (let _3455 = _3454 in (case _3455 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_3) _typs_15)); (1,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_3) _typs_15)); (2,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_3) _typs_15)); (3,f) -> u f (\_3456-> (let _3457 = _3456 in (case _3457 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_3) _typs_15)); (1,f) -> u f (\_3458 _3459-> (let _name_str_19=(u fm_name_show _3451) in (let _rel_errs_20=(u (u fm_error_relevant _3456) bool_false) in (let _rel_msgs_21=(u (u list_mapped _rel_errs_20) (\_err_21-> (u string_flatten (u (u list_cons (u (u fm_error_show _err_21) _defs_1)) (u (u list_cons (let _3460 = (u fm_error_origin _err_21) in (case _3460 of {(0,f) -> u f (""); (1,f) -> u f (\_3461-> (let _3462 = _3461 in (case _3462 of {(0,f) -> u f (\_3463 _3464 _3465-> (u string_flatten (u (u list_cons "Inside '") (u (u list_cons _3449) (u (u list_cons "':\n") (u (u list_cons (u (u (u fm_highlight _3450) _3464) _3465)) (u (u list_cons "\n") list_nil))))))); }))); }))) list_nil))))) in (let _errs_22=(u string_flatten (u (u list_cons _errs_3) (u (u list_cons (u (u string_join "\n") _rel_msgs_21)) (u (u list_cons "\n") list_nil)))) in (u (u (u (u fm_defs_report_go _defs_1) _3445) _errs_22) _typs_15)))))); }))); })))); }))); })))); }))))))
fm_defs_report = (\_defs_1-> (\_list_2-> (u (u (u (u fm_defs_report_go _defs_1) _list_2) "") "")))
fm_checker_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u io_print (u (u fm_defs_report _defs_2) (u (u list_cons _name_1) list_nil))))))
map_keys_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _3466 = _xs_2 in (case _3466 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3467 _3468 _3469-> (let _list0_8=(let _3470 = _3467 in (case _3470 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3471-> (u (u list_cons (u bits_reverse _key_3)) _list_4)); })) in (let _list1_9=(u (u (u map_keys_go _3468) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_keys_go _3469) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_keys = (\_xs_2-> (u list_reverse (u (u (u map_keys_go _xs_2) bits_e) list_nil)))
fm_synth_many = (\_names_1-> (\_defs_2-> (let _3472 = _names_1 in (case _3472 of {(0,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (1,f) -> u f (\_3473 _3474-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _3473) _defs_2)) (\_defs_5-> (u (u fm_synth_many _3474) _defs_5)))); }))))
fm_synth_file = (\_file_1-> (\_defs_2-> (u (u (u monad_bind io_monad) (u io_get_file _file_1)) (\_code_3-> (let _read_4=(u (u (u fm_defs_read _file_1) _code_3) _defs_2) in (let _3475 = _read_4 in (case _3475 of {(0,f) -> u f (\_3476-> (u (u monad_pure io_monad) (u either_left _3476))); (1,f) -> u f (\_3477-> (let _file_defs_6=_3477 in (let _file_keys_7=(u map_keys _file_defs_6) in (let _file_nams_8=(u (u list_mapped _file_keys_7) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _file_nams_8) _file_defs_6)) (\_defs_9-> (u (u monad_pure io_monad) (u either_right (u (u pair_new _file_nams_8) _defs_9))))))))); })))))))
fm_checker_io_file = (\_file_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_file _file_1) map_new)) (\_loaded_2-> (let _3478 = _loaded_2 in (case _3478 of {(0,f) -> u f (\_3479-> (u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "On '") (u (u list_cons _file_1) (u (u list_cons "':") list_nil)))))) (\__4-> (u io_print _3479)))); (1,f) -> u f (\_3480-> (let _3481 = _3480 in (case _3481 of {(0,f) -> u f (\_3482 _3483-> (let _nams_6=_3482 in (let _defs_7=_3483 in (u io_print (u (u fm_defs_report _defs_7) _nams_6))))); }))); })))))
io_purify = (\_io_2-> (let _3484 = _io_2 in (case _3484 of {(0,f) -> u f (\_3485-> _3485); (1,f) -> u f (\_3486 _3487 _3488-> (u io_purify (u _3488 ""))); })))
fm_checker_code = (\_code_1-> (let _3489 = (u (u (u fm_defs_read "Main.fm") _code_1) map_new) in (case _3489 of {(0,f) -> u f (\_3490-> _3490); (1,f) -> u f (\_3491-> (u io_purify (let _defs_3=_3491 in (let _nams_4=(u (u list_mapped (u map_keys _defs_3)) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _nams_4) _defs_3)) (\_defs_5-> (u (u monad_pure io_monad) (u (u fm_defs_report _defs_5) _nams_4)))))))); })))
fm_term_read = (\_code_1-> (let _3492 = (u (u fm_parser_term 0) _code_1) in (case _3492 of {(0,f) -> u f (\_3493 _3494 _3495-> maybe_none); (1,f) -> u f (\_3496 _3497 _3498-> (u maybe_some _3498)); })))
fm = (let ___1=fm_to_core_io_one in (let ___2=fm_checker_io_one in (let ___3=fm_checker_io_file in (let ___4=fm_checker_code in (let ___5=fm_term_read in (u fm_checker_io_file "Main.fm"))))))

