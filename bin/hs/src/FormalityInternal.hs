module FormalityInternal where
import Unsafe.Coerce
import Data.Word
import Data.Bits
import Debug.Trace
u = unsafeCoerce
run p = case p of {
  (1,f) -> (u f (\query param cont-> case query of {
    "print"    -> do { putStrLn param; run (cont ()); };
    "get_line" -> do { line <- getLine; run (u cont line); };
    "get_file" -> do { line <- readFile param; run (u cont line); };
    otherwise  -> do { u cont (); };
  }));
  (0,f) -> (u f (\value-> do { (return :: a -> IO a) value; }));
}
word_to_u16       w        = u word_to_u16_go 0 w 0
word_to_u16_go 16 w      x = u x
word_to_u16_go  i (0,f)  x = u word_to_u16_go (i+1) (0,\t-> t) (x::Word16)
word_to_u16_go  i (1,f)  x = u f (\w-> word_to_u16_go (i+1) w x)
word_to_u16_go  i (2,f)  x = u f (\w-> word_to_u16_go (i+1) w (x .|. (shiftL 1 i)))
u16_to_word       x        = u u16_to_word_go 0 x (0,\t-> t)
u16_to_word_go 16 x      w = u w
u16_to_word_go  i x      w = u u16_to_word_go (i+1) (x::Word16) (if (shiftR x (16-i-1) .&. 1) > 0 then (2,\t-> t w) else (1,\t-> t w))
monad_bind = (\_m_2-> (let _0 = _m_2 in (case _0 of {(0,f) -> u f (\_1 _2-> _1); })))
io = (\_a_1-> ())
monad_new = (\_bind_2-> (\_pure_3-> (0,\t-> t _bind_2 _pure_3)))
io_ask = (\_query_2-> (\_param_3-> (\_then_4-> (1,\t-> t _query_2 _param_3 _then_4))))
io_bind = (\_a_3-> (\_f_4-> (let _3 = _a_3 in (case _3 of {(0,f) -> u f (\_4-> (u _f_4 _4)); (1,f) -> u f (\_5 _6 _7-> (u (u (u io_ask _5) _6) (\_x_8-> (u (u io_bind (u _7 _x_8)) _f_4)))); }))))
io_end = (\_value_2-> (0,\t-> t _value_2))
io_monad = (u (u monad_new io_bind) io_end)
map = (\_a_1-> ())
maybe = (\_a_1-> ())
maybe_none = (0,\t-> t)
map_get = (\_bits_2-> (\_map_3-> (let _8 = _bits_2 in (case _8 of {(0,f) -> u f ((let _9 = _map_3 in (case _9 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_10 _11 _12-> _10); }))); (1,f) -> u f (\_13-> (let _14 = _map_3 in (case _14 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_15 _16 _17-> (u (u map_get _13) _16)); }))); (2,f) -> u f (\_18-> (let _19 = _map_3 in (case _19 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_20 _21 _22-> (u (u map_get _18) _22)); }))); }))))
bits_e = (0,\t-> t)
bool_false = False
bool_and = (\a0-> \a1-> (a0 && a1))
bool_true = True
cmp_as_lte = (\_cmp_1-> (let _23 = _cmp_1 in (case _23 of {(0,f) -> u f (bool_true); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
cmp_ltn = (0,\t-> t)
cmp_gtn = (2,\t-> t)
word_cmp_go = (\_a_2-> (\_b_3-> (\_c_4-> (let _24 = _a_2 in (case _24 of {(0,f) -> u f ((\_b_5-> _c_4)); (1,f) -> u f (\_25-> (\_b_7-> (let _26 = _b_7 in (case _26 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_27-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _27) _c_4))); (2,f) -> u f (\_28-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _28) cmp_ltn))); })) _25)); (2,f) -> u f (\_29-> (\_b_7-> (let _30 = _b_7 in (case _30 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_31-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _31) cmp_gtn))); (2,f) -> u f (\_32-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _32) _c_4))); })) _29)); })) _b_3)))
cmp_eql = (1,\t-> t)
word_cmp = (\_a_2-> (\_b_3-> (u (u (u word_cmp_go _a_2) _b_3) cmp_eql)))
word_lte = (\_a_2-> (\_b_3-> (u cmp_as_lte (u (u word_cmp _a_2) _b_3))))
nat_succ = (\_pred_1-> 1+_pred_1)
nat_zero = 0
u16_lte = (\a0-> \a1-> ((a0::Word16) <= a1))
u16_btw = (\_a_1-> (\_b_2-> (\_c_3-> (((((_a_1::Word16) <= _b_2)) && (((_b_2::Word16) <= _c_3)))))))
u16_new = (\_value_1-> (word_to_u16 _value_1))
word_e = (0,\t-> t)
word = (\_size_1-> ())
word_i = (\_pred_2-> (2,\t-> t _pred_2))
word_o = (\_pred_2-> (1,\t-> t _pred_2))
word_subber = (\_a_2-> (\_b_3-> (\_c_4-> (let _33 = _a_2 in (case _33 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_34-> (\_b_7-> (let _35 = _b_7 in (case _35 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_36-> (\_a_pred_10-> (let _37 = _c_4 in (if _37 then (u word_i (u (u (u word_subber _a_pred_10) _36) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _36) bool_false)))))); (2,f) -> u f (\_38-> (\_a_pred_10-> (let _39 = _c_4 in (if _39 then (u word_o (u (u (u word_subber _a_pred_10) _38) bool_true)) else (u word_i (u (u (u word_subber _a_pred_10) _38) bool_true)))))); })) _34)); (2,f) -> u f (\_40-> (\_b_7-> (let _41 = _b_7 in (case _41 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_42-> (\_a_pred_10-> (let _43 = _c_4 in (if _43 then (u word_o (u (u (u word_subber _a_pred_10) _42) bool_false)) else (u word_i (u (u (u word_subber _a_pred_10) _42) bool_false)))))); (2,f) -> u f (\_44-> (\_a_pred_10-> (let _45 = _c_4 in (if _45 then (u word_i (u (u (u word_subber _a_pred_10) _44) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _44) bool_false)))))); })) _40)); })) _b_3)))
word_sub = (\_a_2-> (\_b_3-> (u (u (u word_subber _a_2) _b_3) bool_false)))
u16_sub = (\a0-> \a1-> ((a0::Word16) - a1))
nat_apply = (\_n_2-> (\_f_3-> (\_x_4-> (let _46 = _n_2 in (if _46==0 then _x_4 else (u (u (u nat_apply (_46-1)) _f_3) (u _f_3 _x_4)))))))
word_inc = (\_word_2-> (let _47 = _word_2 in (case _47 of {(0,f) -> u f (word_e); (1,f) -> u f (\_48-> (u word_i _48)); (2,f) -> u f (\_49-> (u word_o (u word_inc _49))); })))
u16_inc = (\_a_1-> (let _50 = _a_1 in (u u16_new (u word_inc (u16_to_word _50)))))
word_zero = (\_size_1-> (let _51 = _size_1 in (if _51==0 then word_e else (u word_o (u word_zero (_51-1))))))
u16_zero = (u u16_new (u word_zero 16))
nat_to_u16 = (\a0-> (fromIntegral (a0::Integer)))
word_adder = (\_a_2-> (\_b_3-> (\_c_4-> (let _52 = _a_2 in (case _52 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_53-> (\_b_7-> (let _54 = _b_7 in (case _54 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_55-> (\_a_pred_10-> (let _56 = _c_4 in (if _56 then (u word_i (u (u (u word_adder _a_pred_10) _55) bool_false)) else (u word_o (u (u (u word_adder _a_pred_10) _55) bool_false)))))); (2,f) -> u f (\_57-> (\_a_pred_10-> (let _58 = _c_4 in (if _58 then (u word_o (u (u (u word_adder _a_pred_10) _57) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _57) bool_false)))))); })) _53)); (2,f) -> u f (\_59-> (\_b_7-> (let _60 = _b_7 in (case _60 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_61-> (\_a_pred_10-> (let _62 = _c_4 in (if _62 then (u word_o (u (u (u word_adder _a_pred_10) _61) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _61) bool_false)))))); (2,f) -> u f (\_63-> (\_a_pred_10-> (let _64 = _c_4 in (if _64 then (u word_i (u (u (u word_adder _a_pred_10) _63) bool_true)) else (u word_o (u (u (u word_adder _a_pred_10) _63) bool_true)))))); })) _59)); })) _b_3)))
word_add = (\_a_2-> (\_b_3-> (u (u (u word_adder _a_2) _b_3) bool_false)))
u16_add = (\a0-> \a1-> ((a0::Word16) + a1))
cmp_as_eql = (\_cmp_1-> (let _65 = _cmp_1 in (case _65 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
word_eql = (\_a_2-> (\_b_3-> (u cmp_as_eql (u (u word_cmp _a_2) _b_3))))
u16_eql = (\a0-> \a1-> ((a0::Word16) == a1))
bits_o = (\_pred_1-> (1,\t-> t _pred_1))
bits_i = (\_pred_1-> (2,\t-> t _pred_1))
word_to_bits = (\_a_2-> (let _66 = _a_2 in (case _66 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_67-> (u bits_o (u word_to_bits _67))); (2,f) -> u f (\_68-> (u bits_i (u word_to_bits _68))); })))
word_trim = (\_new_size_2-> (\_word_3-> (let _69 = _new_size_2 in (if _69==0 then word_e else (let _70 = _word_3 in (case _70 of {(0,f) -> u f ((u word_o (u (u word_trim (_69-1)) word_e))); (1,f) -> u f (\_71-> (u word_o (u (u word_trim (_69-1)) _71))); (2,f) -> u f (\_72-> (u word_i (u (u word_trim (_69-1)) _72))); }))))))
bits_concat = (\_a_1-> (\_b_2-> (let _73 = _a_1 in (case _73 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_74-> (u bits_o (u (u bits_concat _74) _b_2))); (2,f) -> u f (\_75-> (u bits_i (u (u bits_concat _75) _b_2))); }))))
bits_reverse_tco = (\_a_1-> (\_r_2-> (let _76 = _a_1 in (case _76 of {(0,f) -> u f (_r_2); (1,f) -> u f (\_77-> (u (u bits_reverse_tco _77) (u bits_o _r_2))); (2,f) -> u f (\_78-> (u (u bits_reverse_tco _78) (u bits_i _r_2))); }))))
bits_reverse = (\_a_1-> (u (u bits_reverse_tco _a_1) bits_e))
fm_name_to_bits = (\_name_1-> (let _79 = _name_1 in (if null (_79::String) then bits_e else (let _chr_4=(fromIntegral (fromEnum (head _79 :: Char)) :: Word16) in (let _u16_5=(let _80 = (u (u (u u16_btw 65) _chr_4) 90) in (if _80 then (((_chr_4::Word16) - 65)) else (let _81 = (u (u (u u16_btw 97) _chr_4) 122) in (if _81 then (((_chr_4::Word16) - 71)) else (let _82 = (u (u (u u16_btw 48) _chr_4) 57) in (if _82 then (((_chr_4::Word16) + 4)) else (let _83 = (((46::Word16) == _chr_4)) in (if _83 then 62 else (let _84 = (((95::Word16) == _chr_4)) in (if _84 then 63 else 0)))))))))) in (let _bts_6=(let _85 = _u16_5 in (u word_to_bits (u (u word_trim 6) (u16_to_word _85)))) in (u (u bits_concat (u bits_reverse _bts_6)) (u fm_name_to_bits (tail _79)))))))))
fm_get = (\_name_2-> (\_map_3-> (u (u map_get (u fm_name_to_bits _name_2)) _map_3)))
string_cons = (\_head_1-> (\_tail_2-> ((toEnum (fromIntegral _head_1 :: Int) :: Char) : _tail_2)))
fm_synth_file_of = (\_name_1-> (let _86 = _name_1 in (if null (_86::String) then ".fm" else (let _87 = ((((fromIntegral (fromEnum (head _86 :: Char)) :: Word16)::Word16) == 46)) in (if _87 then ".fm" else (u (u string_cons (fromIntegral (fromEnum (head _86 :: Char)) :: Word16)) (u fm_synth_file_of (tail _86))))))))
io_get_file = (\_name_1-> (u (u (u io_ask "get_file") _name_1) (\_file_2-> (u io_end _file_2))))
parser = (\_v_1-> ())
parser_reply = (\_v_1-> ())
parser_reply_error = (\_idx_2-> (\_code_3-> (\_err_4-> (0,\t-> t _idx_2 _code_3 _err_4))))
parser_bind = (\_parse_3-> (\_next_4-> (\_idx_5-> (\_code_6-> (let _88 = (u (u _parse_3 _idx_5) _code_6) in (case _88 of {(0,f) -> u f (\_89 _90 _91-> (u (u (u parser_reply_error _89) _90) _91)); (1,f) -> u f (\_92 _93 _94-> (u (u (u _next_4 _94) _92) _93)); }))))))
parser_reply_value = (\_idx_2-> (\_code_3-> (\_val_4-> (1,\t-> t _idx_2 _code_3 _val_4))))
parser_pure = (\_value_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_value _idx_3) _code_4) _value_2))))
parser_monad = (u (u monad_new parser_bind) parser_pure)
parser_is_eof = (\_idx_1-> (\_code_2-> (let _95 = _code_2 in (if null (_95::String) then (u (u (u parser_reply_value _idx_1) _code_2) bool_true) else (u (u (u parser_reply_value _idx_1) _code_2) bool_false)))))
monad_pure = (\_m_2-> (let _96 = _m_2 in (case _96 of {(0,f) -> u f (\_97 _98-> _98); })))
maybe_some = (\_value_2-> (1,\t-> t _value_2))
parser_errorat_new = (\_idx_1-> (\_code_2-> (\_err_3-> (0,\t-> t _idx_1 _code_2 _err_3))))
cmp_as_gtn = (\_cmp_1-> (let _99 = _cmp_1 in (case _99 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_false); (2,f) -> u f (bool_true); })))
nat_cmp = (\_a_1-> (\_b_2-> (let _100 = _a_1 in (if _100==0 then (let _101 = _b_2 in (if _101==0 then cmp_eql else cmp_ltn)) else (let _102 = _b_2 in (if _102==0 then cmp_gtn else (u (u nat_cmp (_100-1)) (_102-1))))))))
nat_gtn = (\a0-> \a1-> ((a0::Integer) > a1))
parser_errorat_combine = (\_a_1-> (\_b_2-> (let _103 = _a_1 in (case _103 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_104-> (let _105 = _b_2 in (case _105 of {(0,f) -> u f (_a_1); (1,f) -> u f (\_106-> (let _107 = _104 in (case _107 of {(0,f) -> u f (\_108 _109 _110-> (let _111 = _106 in (case _111 of {(0,f) -> u f (\_112 _113 _114-> (let _115 = (((_108::Integer) > _112)) in (if _115 then _a_1 else _b_2))); }))); }))); }))); }))))
parser_first_of_go = (\_pars_2-> (\_err_3-> (\_idx_4-> (\_code_5-> (let _116 = _pars_2 in (case _116 of {(0,f) -> u f ((let _117 = _err_3 in (case _117 of {(0,f) -> u f ((u (u (u parser_reply_error _idx_4) _code_5) "No parse.")); (1,f) -> u f (\_118-> (let _119 = _118 in (case _119 of {(0,f) -> u f (\_120 _121 _122-> (u (u (u parser_reply_error _120) _121) _122)); }))); }))); (1,f) -> u f (\_123 _124-> (let _parsed_8=(u (u _123 _idx_4) _code_5) in (let _125 = _parsed_8 in (case _125 of {(0,f) -> u f (\_126 _127 _128-> (let _neo_12=(u maybe_some (u (u (u parser_errorat_new _126) _127) _128)) in (let _err_13=(u (u parser_errorat_combine _neo_12) _err_3) in (u (u (u (u parser_first_of_go _124) _err_13) _idx_4) _code_5)))); (1,f) -> u f (\_129 _130 _131-> (u (u (u parser_reply_value _129) _130) _131)); })))); }))))))
parser_first_of = (\_pars_2-> (u (u parser_first_of_go _pars_2) maybe_none))
list_cons = (\_head_2-> (\_tail_3-> (1,\t-> t _head_2 _tail_3)))
list = (\_a_1-> ())
list_nil = (0,\t-> t)
parser_many_go = (\_parse_2-> (\_values_3-> (\_idx_4-> (\_code_5-> (let _132 = (u (u _parse_2 _idx_4) _code_5) in (case _132 of {(0,f) -> u f (\_133 _134 _135-> (u (u (u parser_reply_value _idx_4) _code_5) (u _values_3 list_nil))); (1,f) -> u f (\_136 _137 _138-> (u (u (u (u parser_many_go _parse_2) (\_xs_9-> (u _values_3 (u (u list_cons _138) _xs_9)))) _136) _137)); }))))))
parser_many = (\_parser_2-> (u (u parser_many_go _parser_2) (\_x_3-> _x_3)))
unit_new = ()
string_concat = (\a0-> \a1-> ((a0::String) ++ a1))
string_flatten_go = (\_xs_1-> (\_res_2-> (let _139 = _xs_1 in (case _139 of {(0,f) -> u f (_res_2); (1,f) -> u f (\_140 _141-> (u (u string_flatten_go _141) (((_res_2::String) ++ _140)))); }))))
string_flatten = (\_xs_1-> (u (u string_flatten_go _xs_1) ""))
string_nil = []
parser_text_go = (\_text_1-> (\_idx_2-> (\_code_3-> (let _142 = _text_1 in (if null (_142::String) then (u (u (u parser_reply_value _idx_2) _code_3) unit_new) else (let _143 = _code_3 in (if null (_143::String) then (let _error_6=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found end of file.") list_nil)))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_6)) else (let _144 = ((((fromIntegral (fromEnum (head _142 :: Char)) :: Word16)::Word16) == (fromIntegral (fromEnum (head _143 :: Char)) :: Word16))) in (if _144 then (u (u (u parser_text (tail _142)) (u nat_succ _idx_2)) (tail _143)) else (let _error_8=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found '") (u (u list_cons (u (u string_cons (fromIntegral (fromEnum (head _143 :: Char)) :: Word16)) string_nil)) (u (u list_cons "'.") list_nil)))))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_8)))))))))))
parser_text = (\_text_1-> (\_idx_2-> (\_code_3-> (let _145 = (u (u (u parser_text_go _text_1) _idx_2) _code_3) in (case _145 of {(0,f) -> u f (\_146 _147 _148-> (u (u (u parser_reply_error _idx_2) _code_3) _148)); (1,f) -> u f (\_149 _150 _151-> (u (u (u parser_reply_value _149) _150) _151)); })))))
parser_until_go = (\_until_2-> (\_parse_3-> (\_values_4-> (\_idx_5-> (\_code_6-> (let _until_reply_7=(u (u _until_2 _idx_5) _code_6) in (let _152 = _until_reply_7 in (case _152 of {(0,f) -> u f (\_153 _154 _155-> (let _reply_11=(u (u _parse_3 _idx_5) _code_6) in (let _156 = _reply_11 in (case _156 of {(0,f) -> u f (\_157 _158 _159-> (u (u (u parser_reply_error _157) _158) _159)); (1,f) -> u f (\_160 _161 _162-> (u (u (u (u (u parser_until_go _until_2) _parse_3) (\_xs_15-> (u _values_4 (u (u list_cons _162) _xs_15)))) _160) _161)); })))); (1,f) -> u f (\_163 _164 _165-> (u (u (u parser_reply_value _163) _164) (u _values_4 list_nil))); }))))))))
parser_until = (\_until_2-> (\_parse_3-> (u (u (u parser_until_go _until_2) _parse_3) (\_x_4-> _x_4))))
parser_one = (\_idx_1-> (\_code_2-> (let _166 = _code_2 in (if null (_166::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected end of file.") else (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _166)) (fromIntegral (fromEnum (head _166 :: Char)) :: Word16))))))
fm_parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_text "//")) (\__1-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text "\n")) parser_one)) (\__2-> (u (u monad_pure parser_monad) unit_new)))))) list_nil)))))
fm_parser_text = (\_text_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u parser_text _text_1))))
parser_many1 = (\_parser_2-> (u (u (u monad_bind parser_monad) _parser_2) (\_head_3-> (u (u (u monad_bind parser_monad) (u parser_many _parser_2)) (\_tail_4-> (u (u monad_pure parser_monad) (u (u list_cons _head_3) _tail_4)))))))
fm_name_is_letter = (\_chr_1-> (let _167 = (u (u (u u16_btw 65) _chr_1) 90) in (if _167 then bool_true else (let _168 = (u (u (u u16_btw 97) _chr_1) 122) in (if _168 then bool_true else (let _169 = (u (u (u u16_btw 48) _chr_1) 57) in (if _169 then bool_true else (let _170 = (((46::Word16) == _chr_1)) in (if _170 then bool_true else (let _171 = (((95::Word16) == _chr_1)) in (if _171 then bool_true else bool_false)))))))))))
fm_parser_letter = (\_idx_1-> (\_code_2-> (let _172 = _code_2 in (if null (_172::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected eof.") else (let _173 = (u fm_name_is_letter (fromIntegral (fromEnum (head _172 :: Char)) :: Word16)) in (if _173 then (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _172)) (fromIntegral (fromEnum (head _172 :: Char)) :: Word16)) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected letter.")))))))
list_fold = (\_list_2-> (\_nil_4-> (\_cons_5-> (let _174 = _list_2 in (case _174 of {(0,f) -> u f (_nil_4); (1,f) -> u f (\_175 _176-> (u (u _cons_5 _175) (u (u (u list_fold _176) _nil_4) _cons_5))); })))))
fm_parser_name1 = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many1 fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
pair = (\_a_1-> (\_b_2-> ()))
parser_until1 = (\_cond_2-> (\_parser_3-> (u (u (u monad_bind parser_monad) _parser_3) (\_head_4-> (u (u (u monad_bind parser_monad) (u (u parser_until _cond_2) _parser_3)) (\_tail_5-> (u (u monad_pure parser_monad) (u (u list_cons _head_4) _tail_5))))))))
parser_maybe = (\_parse_2-> (\_idx_3-> (\_code_4-> (let _177 = (u (u _parse_2 _idx_3) _code_4) in (case _177 of {(0,f) -> u f (\_178 _179 _180-> (u (u (u parser_reply_value _idx_3) _code_4) maybe_none)); (1,f) -> u f (\_181 _182 _183-> (u (u (u parser_reply_value _181) _182) (u maybe_some _183))); })))))
fm_parser_item = (\_parser_2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) _parser_2) (\_value_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__5-> (u (u monad_pure parser_monad) _value_4))))))))
fm_parser_name = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
parser_get_code = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _code_2)))
parser_get_index = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _idx_1)))
fm_parser_init = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_from_2-> (u (u monad_pure parser_monad) _from_2)))))
fm_origin_new = (\_file_1-> (\_from_2-> (\_upto_3-> (0,\t-> t _file_1 _from_2 _upto_3))))
fm_parser_stop = (\_from_1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_upto_2-> (let _orig_3=(u (u (u fm_origin_new "") _from_1) _upto_2) in (u (u monad_pure parser_monad) _orig_3)))))
fm_term_ori = (\_orig_1-> (\_expr_2-> (15,\t-> t _orig_1 _expr_2)))
fm_term_typ = (2,\t-> t)
fm_parser_type = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "Type")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) fm_term_typ))))))))
fm_term_all = (\_eras_1-> (\_self_2-> (\_name_3-> (\_xtyp_4-> (\_body_5-> (3,\t-> t _eras_1 _self_2 _name_3 _xtyp_4 _body_5))))))
fm_parser_forall = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_self_2-> (u (u (u monad_bind parser_monad) fm_parser_binder) (\_bind_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text "->"))) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_5-> (let _term_6=(u (u (u list_fold _bind_3) _body_5) (\_x_6-> (\_t_7-> (let _184 = _x_6 in (case _184 of {(0,f) -> u f (\_185 _186 _187-> (u (u (u (u (u fm_term_all _185) "") _186) _187) (\_s_11-> (\_x_12-> _t_7)))); }))))) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (u (u monad_pure parser_monad) (let _188 = _term_6 in (case _188 of {(0,f) -> u f (\_189 _190-> _term_6); (1,f) -> u f (\_191-> _term_6); (2,f) -> u f (_term_6); (3,f) -> u f (\_192 _193 _194 _195 _196-> (u (u fm_term_ori _orig_7) (u (u (u (u (u fm_term_all _192) _self_2) _194) _195) _196))); (4,f) -> u f (\_197 _198-> _term_6); (5,f) -> u f (\_199 _200-> _term_6); (6,f) -> u f (\_201 _202 _203-> _term_6); (7,f) -> u f (\_204 _205 _206-> _term_6); (8,f) -> u f (\_207 _208 _209-> _term_6); (9,f) -> u f (\_210 _211 _212-> _term_6); (10,f) -> u f (\_213-> _term_6); (11,f) -> u f (\_214-> _term_6); (12,f) -> u f (\_215-> _term_6); (13,f) -> u f (\_216-> _term_6); (14,f) -> u f (\_217 _218 _219 _220 _221 _222-> _term_6); (15,f) -> u f (\_223 _224-> _term_6); }))))))))))))))))
fm_term_lam = (\_name_1-> (\_body_2-> (4,\t-> t _name_1 _body_2)))
fm_parser_make_lambda = (\_names_1-> (\_body_2-> (let _225 = _names_1 in (case _225 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_226 _227-> (u (u fm_term_lam _226) (\_x_5-> (u (u fm_parser_make_lambda _227) _body_2)))); }))))
fm_parser_lambda = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_erased = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "<")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ">")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_nameless = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "()")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (let _expr_5=(u (u fm_term_lam "") (\_x_5-> _body_3)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) _expr_5)))))))))))
fm_parser_parenthesis = (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__3-> (u (u monad_pure parser_monad) _term_2)))))))
fm_term_ref = (\_name_1-> (1,\t-> t _name_1))
fm_term_app = (\_func_1-> (\_argm_2-> (5,\t-> t _func_1 _argm_2)))
fm_term_hol = (\_path_1-> (10,\t-> t _path_1))
fm_term_let = (\_name_1-> (\_expr_2-> (\_body_3-> (6,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_letforin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_8-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__9-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_10-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_12-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_13-> (let _term_14=(u fm_term_ref "List.for") in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_hol bits_e)) in (let _term_16=(u (u fm_term_app _term_15) _list_8) in (let _term_17=(u (u fm_term_app _term_16) (u fm_term_hol bits_e)) in (let _term_18=(u (u fm_term_app _term_17) (u fm_term_ref _name_3)) in (let _lamb_19=(u (u fm_term_lam _elem_6) (\_i_19-> (u (u fm_term_lam _name_3) (\_x_20-> _loop_10)))) in (let _term_20=(u (u fm_term_app _term_18) _lamb_19) in (let _term_21=(u (u (u fm_term_let _name_3) _term_20) (\_x_21-> _body_12)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_13) _term_21))))))))))))))))))))))))))))))))))))
fm_parser_let = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_let _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_term_def = (\_name_1-> (\_expr_2-> (\_body_3-> (7,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_def = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "def ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_def _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_parser_if = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "if ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_cond_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "then")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_tcse_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "else")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_fcse_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (let _term_9=_cond_3 in (let _term_10=(u (u fm_term_app _term_9) (u (u fm_term_lam "") (\_x_10-> (u fm_term_hol bits_e)))) in (let _term_11=(u (u fm_term_app _term_10) _tcse_5) in (let _term_12=(u (u fm_term_app _term_11) _fcse_7) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) _term_12))))))))))))))))))))))
list_mapped = (\_as_2-> (\_f_4-> (let _228 = _as_2 in (case _228 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_229 _230-> (u (u list_cons (u _f_4 _229)) (u (u list_mapped _230) _f_4))); }))))
pair_new = (\_fst_3-> (\_snd_4-> (0,\t-> t _fst_3 _snd_4)))
fm_backslash = 92
fm_escapes = (u (u list_cons (u (u pair_new "\\b") 8)) (u (u list_cons (u (u pair_new "\\f") 12)) (u (u list_cons (u (u pair_new "\\n") 10)) (u (u list_cons (u (u pair_new "\\r") 13)) (u (u list_cons (u (u pair_new "\\t") 9)) (u (u list_cons (u (u pair_new "\\v") 11)) (u (u list_cons (u (u pair_new (u (u string_cons fm_backslash) (u (u string_cons fm_backslash) string_nil))) fm_backslash)) (u (u list_cons (u (u pair_new "\\\"") 34)) (u (u list_cons (u (u pair_new "\\0") 0)) (u (u list_cons (u (u pair_new "\\'") 39)) list_nil))))))))))
fm_parser_char_single = (u parser_first_of (u (u list_cons (u parser_first_of (u (u list_mapped fm_escapes) (\_esc_1-> (let _231 = _esc_1 in (case _231 of {(0,f) -> u f (\_232 _233-> (u (u (u monad_bind parser_monad) (u parser_text _232)) (\__4-> (u (u monad_pure parser_monad) _233)))); })))))) (u (u list_cons parser_one) list_nil)))
fm_term_chr = (\_chrx_1-> (12,\t-> t _chrx_1))
fm_parser_char = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "'")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_char_single) (\_chrx_3-> (u (u (u monad_bind parser_monad) (u parser_text "'")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u fm_term_chr _chrx_3)))))))))))))
fm_term_str = (\_strx_1-> (13,\t-> t _strx_1))
fm_parser_string = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (let _quot_2=(u (u string_cons 34) string_nil) in (u (u (u monad_bind parser_monad) (u fm_parser_text _quot_2)) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text _quot_2)) fm_parser_char_single)) (\_chrs_4-> (let _strx_5=(u (u (u list_fold _chrs_4) string_nil) string_cons) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u fm_term_str _strx_5)))))))))))))
fm_parser_pair = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val0_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (let _term_8=(u fm_term_ref "Pair.new") in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _val0_3) in (let _term_12=(u (u fm_term_app _term_11) _val1_5) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_12)))))))))))))))))))))
fm_name_read = (\_str_1-> _str_1)
fm_parser_list = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "[")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "]")) (u fm_parser_item fm_parser_term))) (\_vals_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u (u list_fold _vals_3) (u (u fm_term_app (u fm_term_ref (u fm_name_read "List.nil"))) (u fm_term_hol bits_e))) (\_x_5-> (\_xs_6-> (let _term_7=(u fm_term_ref (u fm_name_read "List.cons")) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_hol bits_e)) in (let _term_9=(u (u fm_term_app _term_8) _x_5) in (let _term_10=(u (u fm_term_app _term_9) _xs_6) in (u (u fm_term_ori _orig_4) _term_10)))))))))))))))))
fm_parser_forin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_9-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (let _term_11=(u fm_term_ref "List.for") in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) _list_5) in (let _term_14=(u (u fm_term_app _term_13) (u fm_term_hol bits_e)) in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_ref _name_7)) in (let _lamb_16=(u (u fm_term_lam _elem_3) (\_i_16-> (u (u fm_term_lam _name_7) (\_x_17-> _loop_9)))) in (let _term_17=(u (u fm_term_app _term_15) _lamb_16) in (let _term_18=(u (u (u fm_term_let _name_7) _term_17) (\_x_18-> (u fm_term_ref _name_7))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_18))))))))))))))))))))))))))))))
fm_parser_do_statements = (\_monad_name_1-> (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "var ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (let _term_10=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_11=(u (u fm_term_app _term_10) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) (u fm_term_hol bits_e)) in (let _term_14=(u (u fm_term_app _term_13) _expr_6) in (let _term_15=(u (u fm_term_app _term_14) (u (u fm_term_lam _name_4) (\_x_15-> _body_8))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) _term_15))))))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) (u (u (u fm_term_let _name_4) _expr_6) (\_x_10-> _body_8))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "return ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.pure")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) _expr_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_10))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _expr_3) in (let _term_12=(u (u fm_term_app _term_11) (u (u fm_term_lam "") (\_x_12-> _body_5))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_12))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ";")) (\__3-> (u (u monad_pure parser_monad) _expr_2)))))) list_nil)))))))
fm_parser_do = (u (u (u monad_bind parser_monad) (u fm_parser_text "do ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__3-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _name_2)) (\_term_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__5-> (u (u monad_pure parser_monad) _term_4)))))))))))
fm_term_nat = (\_natx_1-> (11,\t-> t _natx_1))
fm_term_unroll_nat = (\_natx_1-> (let _234 = _natx_1 in (if _234==0 then (u fm_term_ref (u fm_name_read "Nat.zero")) else (let _func_3=(u fm_term_ref (u fm_name_read "Nat.succ")) in (let _argm_4=(u fm_term_nat (_234-1)) in (u (u fm_term_app _func_3) _argm_4))))))
u16_to_bits = (\_a_1-> (let _235 = _a_1 in (u word_to_bits (u16_to_word _235))))
fm_term_unroll_chr_bits = (\_bits_1-> (let _236 = _bits_1 in (case _236 of {(0,f) -> u f ((u fm_term_ref (u fm_name_read "Bits.e"))); (1,f) -> u f (\_237-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.o"))) (u fm_term_unroll_chr_bits _237))); (2,f) -> u f (\_238-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.i"))) (u fm_term_unroll_chr_bits _238))); })))
fm_term_unroll_chr = (\_chrx_1-> (let _bits_2=(u u16_to_bits _chrx_1) in (let _term_3=(u fm_term_ref (u fm_name_read "Word.from_bits")) in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_nat 16)) in (let _term_5=(u (u fm_term_app _term_4) (u fm_term_unroll_chr_bits _bits_2)) in (let _term_6=(u (u fm_term_app (u fm_term_ref (u fm_name_read "U16.new"))) _term_5) in _term_6))))))
fm_term_unroll_str = (\_strx_1-> (let _239 = _strx_1 in (if null (_239::String) then (u fm_term_ref (u fm_name_read "String.nil")) else (let _char_4=(u fm_term_chr (fromIntegral (fromEnum (head _239 :: Char)) :: Word16)) in (let _term_5=(u fm_term_ref (u fm_name_read "String.cons")) in (let _term_6=(u (u fm_term_app _term_5) _char_4) in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_str (tail _239))) in _term_7)))))))
fm_term_reduce = (\_term_1-> (\_defs_2-> (let _240 = _term_1 in (case _240 of {(0,f) -> u f (\_241 _242-> _term_1); (1,f) -> u f (\_243-> (let _244 = (u (u fm_get _243) _defs_2) in (case _244 of {(0,f) -> u f ((u fm_term_ref _243)); (1,f) -> u f (\_245-> (let _246 = _245 in (case _246 of {(0,f) -> u f (\_247 _248 _249 _250 _251 _252-> (u (u fm_term_reduce _250) _defs_2)); }))); }))); (2,f) -> u f (_term_1); (3,f) -> u f (\_253 _254 _255 _256 _257-> _term_1); (4,f) -> u f (\_258 _259-> _term_1); (5,f) -> u f (\_260 _261-> (let _func_5=(u (u fm_term_reduce _260) _defs_2) in (let _262 = _func_5 in (case _262 of {(0,f) -> u f (\_263 _264-> _term_1); (1,f) -> u f (\_265-> _term_1); (2,f) -> u f (_term_1); (3,f) -> u f (\_266 _267 _268 _269 _270-> _term_1); (4,f) -> u f (\_271 _272-> (u (u fm_term_reduce (u _272 _261)) _defs_2)); (5,f) -> u f (\_273 _274-> _term_1); (6,f) -> u f (\_275 _276 _277-> _term_1); (7,f) -> u f (\_278 _279 _280-> _term_1); (8,f) -> u f (\_281 _282 _283-> _term_1); (9,f) -> u f (\_284 _285 _286-> _term_1); (10,f) -> u f (\_287-> _term_1); (11,f) -> u f (\_288-> _term_1); (12,f) -> u f (\_289-> _term_1); (13,f) -> u f (\_290-> _term_1); (14,f) -> u f (\_291 _292 _293 _294 _295 _296-> _term_1); (15,f) -> u f (\_297 _298-> _term_1); })))); (6,f) -> u f (\_299 _300 _301-> (u (u fm_term_reduce (u _301 _300)) _defs_2)); (7,f) -> u f (\_302 _303 _304-> (u (u fm_term_reduce (u _304 _303)) _defs_2)); (8,f) -> u f (\_305 _306 _307-> (u (u fm_term_reduce _306) _defs_2)); (9,f) -> u f (\_308 _309 _310-> _term_1); (10,f) -> u f (\_311-> _term_1); (11,f) -> u f (\_312-> (u (u fm_term_reduce (u fm_term_unroll_nat _312)) _defs_2)); (12,f) -> u f (\_313-> (u (u fm_term_reduce (u fm_term_unroll_chr _313)) _defs_2)); (13,f) -> u f (\_314-> (u (u fm_term_reduce (u fm_term_unroll_str _314)) _defs_2)); (14,f) -> u f (\_315 _316 _317 _318 _319 _320-> _term_1); (15,f) -> u f (\_321 _322-> (u (u fm_term_reduce _322) _defs_2)); }))))
map_new = (0,\t-> t)
fm_def_new = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_stat_6-> (0,\t-> t _file_1 _code_2 _name_3 _term_4 _type_5 _stat_6)))))))
fm_status_init = (0,\t-> t)
fm_parser_case_with = (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_6-> (u (u monad_pure parser_monad) (u (u (u (u (u (u fm_def_new "") "") _name_2) _term_6) _type_4) fm_status_init))))))))))))))
fm_parser_case_case = (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__4-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _term_3))))))))))
map_tie = (\_val_2-> (\_lft_3-> (\_rgt_4-> (1,\t-> t _val_2 _lft_3 _rgt_4))))
map_set = (\_bits_2-> (\_val_3-> (\_map_4-> (let _323 = _bits_2 in (case _323 of {(0,f) -> u f ((let _324 = _map_4 in (case _324 of {(0,f) -> u f ((u (u (u map_tie (u maybe_some _val_3)) map_new) map_new)); (1,f) -> u f (\_325 _326 _327-> (u (u (u map_tie (u maybe_some _val_3)) _326) _327)); }))); (1,f) -> u f (\_328-> (let _329 = _map_4 in (case _329 of {(0,f) -> u f ((u (u (u map_tie maybe_none) (u (u (u map_set _328) _val_3) map_new)) map_new)); (1,f) -> u f (\_330 _331 _332-> (u (u (u map_tie _330) (u (u (u map_set _328) _val_3) _331)) _332)); }))); (2,f) -> u f (\_333-> (let _334 = _map_4 in (case _334 of {(0,f) -> u f ((u (u (u map_tie maybe_none) map_new) (u (u (u map_set _333) _val_3) map_new))); (1,f) -> u f (\_335 _336 _337-> (u (u (u map_tie _335) _336) (u (u (u map_set _333) _val_3) _337))); }))); })))))
map_from_list = (\_f_3-> (\_xs_4-> (let _338 = _xs_4 in (case _338 of {(0,f) -> u f (map_new); (1,f) -> u f (\_339 _340-> (let _341 = _339 in (case _341 of {(0,f) -> u f (\_342 _343-> (u (u (u map_set (u _f_3 _342)) _343) (u (u map_from_list _f_3) _340))); }))); }))))
fm_term_cse = (\_path_1-> (\_expr_2-> (\_name_3-> (\_with_4-> (\_cses_5-> (\_moti_6-> (14,\t-> t _path_1 _expr_2 _name_3 _with_4 _cses_5 _moti_6)))))))
fm_parser_case = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "case ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "as")) (\__5-> fm_parser_name1)))) (\_name_5-> (let _name_6=(let _344 = _name_5 in (case _344 of {(0,f) -> u f ((let _345 = (u (u fm_term_reduce _expr_4) map_new) in (case _345 of {(0,f) -> u f (\_346 _347-> _346); (1,f) -> u f (\_348-> _348); (2,f) -> u f ((u fm_name_read "self")); (3,f) -> u f (\_349 _350 _351 _352 _353-> (u fm_name_read "self")); (4,f) -> u f (\_354 _355-> (u fm_name_read "self")); (5,f) -> u f (\_356 _357-> (u fm_name_read "self")); (6,f) -> u f (\_358 _359 _360-> (u fm_name_read "self")); (7,f) -> u f (\_361 _362 _363-> (u fm_name_read "self")); (8,f) -> u f (\_364 _365 _366-> (u fm_name_read "self")); (9,f) -> u f (\_367 _368 _369-> (u fm_name_read "self")); (10,f) -> u f (\_370-> (u fm_name_read "self")); (11,f) -> u f (\_371-> (u fm_name_read "self")); (12,f) -> u f (\_372-> (u fm_name_read "self")); (13,f) -> u f (\_373-> (u fm_name_read "self")); (14,f) -> u f (\_374 _375 _376 _377 _378 _379-> (u fm_name_read "self")); (15,f) -> u f (\_380 _381-> (u fm_name_read "self")); }))); (1,f) -> u f (\_382-> _382); })) in (u (u (u monad_bind parser_monad) (u parser_many fm_parser_case_with)) (\_with_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__8-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) fm_parser_case_case)) (\_cses_9-> (let _cses_10=(u (u map_from_list fm_name_to_bits) _cses_9) in (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_12-> (u (u monad_pure parser_monad) (u maybe_some _term_12))))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "!")) (\__11-> (u (u monad_pure parser_monad) maybe_none)))) (u (u list_cons (u (u monad_pure parser_monad) (u maybe_some (u fm_term_hol bits_e)))) list_nil))))) (\_moti_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) (u (u (u (u (u (u fm_term_cse bits_e) _expr_4) _name_6) _with_7) _cses_10) _moti_11)))))))))))))))))))))))))
parser_digit = (\_idx_1-> (\_code_2-> (let _383 = _code_2 in (if null (_383::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit.") else (let _sidx_5=(u nat_succ _idx_1) in (let _384 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 48)) in (if _384 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 0) else (let _385 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 49)) in (if _385 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 1) else (let _386 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 50)) in (if _386 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 2) else (let _387 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 51)) in (if _387 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 3) else (let _388 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 52)) in (if _388 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 4) else (let _389 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 53)) in (if _389 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 5) else (let _390 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 54)) in (if _390 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 6) else (let _391 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 55)) in (if _391 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 7) else (let _392 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 56)) in (if _392 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 8) else (let _393 = ((((fromIntegral (fromEnum (head _383 :: Char)) :: Word16)::Word16) == 57)) in (if _393 then (u (u (u parser_reply_value _sidx_5) (tail _383)) 9) else (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit."))))))))))))))))))))))))))
nat_add = (\a0-> \a1-> ((a0::Integer) + a1))
nat_mul = (\a0-> \a1-> ((a0::Integer) * a1))
nat_from_base_go = (\_b_1-> (\_ds_2-> (\_p_3-> (\_res_4-> (let _394 = _ds_2 in (case _394 of {(0,f) -> u f (_res_4); (1,f) -> u f (\_395 _396-> (u (u (u (u nat_from_base_go _b_1) _396) (((_b_1::Integer) * _p_3))) ((((((_395::Integer) * _p_3))::Integer) + _res_4)))); }))))))
list_reverse_go = (\_xs_2-> (\_res_3-> (let _397 = _xs_2 in (case _397 of {(0,f) -> u f (_res_3); (1,f) -> u f (\_398 _399-> (u (u list_reverse_go _399) (u (u list_cons _398) _res_3))); }))))
list_reverse = (\_xs_2-> (u (u list_reverse_go _xs_2) list_nil))
nat_from_base = (\_base_1-> (\_ds_2-> (u (u (u (u nat_from_base_go _base_1) (u list_reverse _ds_2)) 1) 0)))
parser_nat = (u (u (u monad_bind parser_monad) (u parser_many1 parser_digit)) (\_digits_1-> (u (u monad_pure parser_monad) (u (u nat_from_base 10) _digits_1))))
bits_tail = (\_a_1-> (let _400 = _a_1 in (case _400 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_401-> _401); (2,f) -> u f (\_402-> _402); })))
bits_inc = (\_a_1-> (let _403 = _a_1 in (case _403 of {(0,f) -> u f ((u bits_i bits_e)); (1,f) -> u f (\_404-> (u bits_i _404)); (2,f) -> u f (\_405-> (u bits_o (u bits_inc _405))); })))
nat_to_bits = (\_n_1-> (let _406 = _n_1 in (if _406==0 then bits_e else (u bits_inc (u nat_to_bits (_406-1))))))
maybe_to_bool = (\_m_2-> (let _407 = _m_2 in (case _407 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_408-> bool_true); })))
fm_term_gol = (\_name_1-> (\_dref_2-> (\_verb_3-> (9,\t-> t _name_1 _dref_2 _verb_3))))
fm_parser_goal = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "?")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u parser_many (u (u (u monad_bind parser_monad) (u fm_parser_text "-")) (\__4-> (u (u (u monad_bind parser_monad) parser_nat) (\_nat_5-> (let _bits_6=(u bits_reverse (u bits_tail (u bits_reverse (u nat_to_bits _nat_5)))) in (u (u monad_pure parser_monad) _bits_6)))))))) (\_dref_4-> (u (u (u monad_bind parser_monad) (u (u (u monad_bind parser_monad) (u parser_maybe (u parser_text "-"))) (\_verb_5-> (u (u monad_pure parser_monad) (u maybe_to_bool _verb_5))))) (\_verb_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u (u (u fm_term_gol _name_3) _dref_4) _verb_5)))))))))))))))
fm_parser_hole = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "_")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_hol bits_e)))))))))
fm_parser_nat = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u (u (u monad_bind parser_monad) parser_nat) (\_natx_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) (u fm_term_nat _natx_3)))))))))))
string_eql = (\a0-> \a1-> ((a0::String) == a1))
parser_fail = (\_error_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_error _idx_3) _code_4) _error_2))))
fm_parser_reference = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (let _409 = (((_name_2::String) == "case")) in (if _409 then (u parser_fail "Reserved keyword.") else (let _410 = (((_name_2::String) == "do")) in (if _410 then (u parser_fail "Reserved keyword.") else (let _411 = (((_name_2::String) == "if")) in (if _411 then (u parser_fail "Reserved keyword.") else (let _412 = (((_name_2::String) == "let")) in (if _412 then (u parser_fail "Reserved keyword.") else (let _413 = (((_name_2::String) == "def")) in (if _413 then (u parser_fail "Reserved keyword.") else (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_ref _name_2)))))))))))))))))))
list_for = (\_xs_2-> (\_b_4-> (\_f_5-> (let _414 = _xs_2 in (case _414 of {(0,f) -> u f (_b_4); (1,f) -> u f (\_415 _416-> (u (u (u list_for _416) (u (u _f_5 _415) _b_4)) _f_5)); })))))
fm_parser_application = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) (u parser_text "(")) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_term))) (\_args_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u (u list_for _args_4) _func_2) (\_x_6-> (\_f_7-> (u (u fm_term_app _f_7) _x_6)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))
parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) list_nil))))
parser_spaces_text = (\_text_1-> (u (u (u monad_bind parser_monad) parser_spaces) (\__2-> (u parser_text _text_1))))
fm_parser_application_erased = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) parser_get_index) (\_init_3-> (u (u (u monad_bind parser_monad) (u parser_text "<")) (\__4-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u parser_spaces_text ">")) (u fm_parser_item fm_parser_term))) (\_args_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_3)) (\_orig_6-> (let _expr_7=(u (u (u list_for _args_5) _func_2) (\_x_7-> (\_f_8-> (u (u fm_term_app _f_8) _x_7)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _expr_7)))))))))))))
fm_parser_arrow = (\_init_1-> (\_xtyp_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "->")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u (u (u fm_term_all bool_false) "") "") _xtyp_2) (\_s_6-> (\_x_7-> _body_4)))))))))))))
fm_parser_equality = (\_init_1-> (\_val0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "==")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Equal") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _val0_2) in (let _term_9=(u (u fm_term_app _term_8) _val1_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_9))))))))))))))
fm_term_ann = (\_done_1-> (\_term_2-> (\_type_3-> (8,\t-> t _done_1 _term_2 _type_3))))
fm_parser_annotation = (\_init_1-> (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "::")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u fm_term_ann bool_false) _term_2) _type_4)))))))))))
fm_parser_suffix = (\_init_1-> (\_term_2-> (\_idx_3-> (\_code_4-> (let _suffix_parser_5=(u parser_first_of (u (u list_cons (u (u fm_parser_application _init_1) _term_2)) (u (u list_cons (u (u fm_parser_application_erased _init_1) _term_2)) (u (u list_cons (u (u fm_parser_arrow _init_1) _term_2)) (u (u list_cons (u (u fm_parser_equality _init_1) _term_2)) (u (u list_cons (u (u fm_parser_annotation _init_1) _term_2)) list_nil)))))) in (let _417 = (u (u _suffix_parser_5 _idx_3) _code_4) in (case _417 of {(0,f) -> u f (\_418 _419 _420-> (u (u (u parser_reply_value _idx_3) _code_4) _term_2)); (1,f) -> u f (\_421 _422 _423-> (u (u (u (u fm_parser_suffix _init_1) _423) _421) _422)); })))))))
fm_parser_term = (u (u (u monad_bind parser_monad) parser_get_code) (\_code_1-> (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons fm_parser_type) (u (u list_cons fm_parser_forall) (u (u list_cons fm_parser_lambda) (u (u list_cons fm_parser_lambda_erased) (u (u list_cons fm_parser_lambda_nameless) (u (u list_cons fm_parser_parenthesis) (u (u list_cons fm_parser_letforin) (u (u list_cons fm_parser_let) (u (u list_cons fm_parser_def) (u (u list_cons fm_parser_if) (u (u list_cons fm_parser_char) (u (u list_cons fm_parser_string) (u (u list_cons fm_parser_pair) (u (u list_cons fm_parser_list) (u (u list_cons fm_parser_forin) (u (u list_cons fm_parser_do) (u (u list_cons fm_parser_case) (u (u list_cons fm_parser_goal) (u (u list_cons fm_parser_hole) (u (u list_cons fm_parser_nat) (u (u list_cons fm_parser_reference) list_nil))))))))))))))))))))))) (\_term_3-> (u (u fm_parser_suffix _init_2) _term_3)))))))
fm_parser_name_term = (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_3-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _type_3))))))))
fm_binder_new = (\_eras_1-> (\_name_2-> (\_term_3-> (0,\t-> t _eras_1 _name_2 _term_3))))
fm_parser_binder_homo = (\_eras_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text (let _424 = _eras_1 in (if _424 then "<" else "(")))) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text (let _425 = _eras_1 in (if _425 then ">" else ")")))) (u fm_parser_item fm_parser_name_term))) (\_bind_3-> (u (u monad_pure parser_monad) (u (u list_mapped _bind_3) (\_pair_4-> (let _426 = _pair_4 in (case _426 of {(0,f) -> u f (\_427 _428-> (u (u (u fm_binder_new _eras_1) _427) _428)); }))))))))))
list_concat = (\_as_2-> (\_bs_3-> (let _429 = _as_2 in (case _429 of {(0,f) -> u f (_bs_3); (1,f) -> u f (\_430 _431-> (u (u list_cons _430) (u (u list_concat _431) _bs_3))); }))))
list_flatten = (\_xs_2-> (let _432 = _xs_2 in (case _432 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_433 _434-> (u (u list_concat _433) (u list_flatten _434))); })))
fm_parser_binder = (u (u (u monad_bind parser_monad) (u parser_many1 (u parser_first_of (u (u list_cons (u fm_parser_binder_homo bool_true)) (u (u list_cons (u fm_parser_binder_homo bool_false)) list_nil))))) (\_lists_1-> (u (u monad_pure parser_monad) (u list_flatten _lists_1))))
fm_parser_make_forall = (\_binds_1-> (\_body_2-> (let _435 = _binds_1 in (case _435 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_436 _437-> (let _438 = _436 in (case _438 of {(0,f) -> u f (\_439 _440 _441-> (u (u (u (u (u fm_term_all _439) "") _440) _441) (\_s_8-> (\_x_9-> (u (u fm_parser_make_forall _437) _body_2))))); }))); }))))
list_at = (\_index_2-> (\_list_3-> (let _442 = _list_3 in (case _442 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_443 _444-> (let _445 = _index_2 in (if _445==0 then (u maybe_some _443) else (u (u list_at (_445-1)) _444)))); }))))
list_at_last = (\_index_2-> (\_list_3-> (u (u list_at _index_2) (u list_reverse _list_3))))
fm_term_var = (\_name_1-> (\_indx_2-> (0,\t-> t _name_1 _indx_2)))
pair_snd = (\_pair_3-> (let _446 = _pair_3 in (case _446 of {(0,f) -> u f (\_447 _448-> _448); })))
fm_name_eql = (\_a_1-> (\_b_2-> (((_a_1::String) == _b_2))))
fm_context_find = (\_name_1-> (\_ctx_2-> (let _449 = _ctx_2 in (case _449 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_450 _451-> (let _452 = _450 in (case _452 of {(0,f) -> u f (\_453 _454-> (let _455 = (u (u fm_name_eql _name_1) _453) in (if _455 then (u maybe_some _454) else (u (u fm_context_find _name_1) _451)))); }))); }))))
list_length_go = (\_xs_2-> (\_n_3-> (let _456 = _xs_2 in (case _456 of {(0,f) -> u f (_n_3); (1,f) -> u f (\_457 _458-> (u (u list_length_go _458) (u nat_succ _n_3))); }))))
list_length = (\_xs_2-> (u (u list_length_go _xs_2) 0))
fm_path_o = (\_path_1-> (\_x_2-> (u _path_1 (u bits_o _x_2))))
fm_path_i = (\_path_1-> (\_x_2-> (u _path_1 (u bits_i _x_2))))
fm_path_to_bits = (\_path_1-> (u _path_1 bits_e))
fm_term_bind = (\_vars_1-> (\_path_2-> (\_term_3-> (let _459 = _term_3 in (case _459 of {(0,f) -> u f (\_460 _461-> (let _462 = (u (u list_at_last _461) _vars_1) in (case _462 of {(0,f) -> u f ((u (u fm_term_var _460) _461)); (1,f) -> u f (\_463-> (u pair_snd _463)); }))); (1,f) -> u f (\_464-> (let _465 = (u (u fm_context_find _464) _vars_1) in (case _465 of {(0,f) -> u f ((u fm_term_ref _464)); (1,f) -> u f (\_466-> _466); }))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_467 _468 _469 _470 _471-> (let _vlen_9=(u list_length _vars_1) in (u (u (u (u (u fm_term_all _467) _468) _469) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _470)) (\_s_10-> (\_x_11-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _469) _x_11)) (u (u list_cons (u (u pair_new _468) _s_10)) _vars_1))) (u fm_path_i _path_2)) (u (u _471 (u (u fm_term_var _468) _vlen_9)) (u (u fm_term_var _469) (u nat_succ _vlen_9))))))))); (4,f) -> u f (\_472 _473-> (let _vlen_6=(u list_length _vars_1) in (u (u fm_term_lam _472) (\_x_7-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _472) _x_7)) _vars_1)) (u fm_path_o _path_2)) (u _473 (u (u fm_term_var _472) _vlen_6))))))); (5,f) -> u f (\_474 _475-> (u (u fm_term_app (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _474)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _475))); (6,f) -> u f (\_476 _477 _478-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_let _476) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _477)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _476) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _478 (u (u fm_term_var _476) _vlen_7))))))); (7,f) -> u f (\_479 _480 _481-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_def _479) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _480)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _479) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _481 (u (u fm_term_var _479) _vlen_7))))))); (8,f) -> u f (\_482 _483 _484-> (u (u (u fm_term_ann _482) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _483)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _484))); (9,f) -> u f (\_485 _486 _487-> (u (u (u fm_term_gol _485) _486) _487)); (10,f) -> u f (\_488-> (u fm_term_hol (u fm_path_to_bits _path_2))); (11,f) -> u f (\_489-> (u fm_term_nat _489)); (12,f) -> u f (\_490-> (u fm_term_chr _490)); (13,f) -> u f (\_491-> (u fm_term_str _491)); (14,f) -> u f (\_492 _493 _494 _495 _496 _497-> (let _expr_10=(u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _493) in (let _name_11=_494 in (let _wyth_12=_495 in (let _cses_13=_496 in (let _moti_14=_497 in (u (u (u (u (u (u fm_term_cse (u fm_path_to_bits _path_2)) _expr_10) _name_11) _wyth_12) _cses_13) _moti_14))))))); (15,f) -> u f (\_498 _499-> (u (u fm_term_ori _498) (u (u (u fm_term_bind _vars_1) _path_2) _499))); })))))
fm_status_done = (2,\t-> t)
fm_set = (\_name_2-> (\_val_3-> (\_map_4-> (u (u (u map_set (u fm_name_to_bits _name_2)) _val_3) _map_4))))
fm_define = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_done_6-> (\_defs_7-> (let _stat_8=(let _500 = _done_6 in (if _500 then fm_status_done else fm_status_init)) in (u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_4) _type_5) _stat_8)) _defs_7)))))))))
fm_parser_file_def = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_binder)) (\_args_5-> (let _args_6=(u list_flatten _args_5) in (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_9-> (let _type_10=(u (u fm_parser_make_forall _args_6) _type_8) in (let _term_11=(u (u fm_parser_make_lambda (u (u list_mapped _args_6) (\_x_11-> (let _501 = _x_11 in (case _501 of {(0,f) -> u f (\_502 _503 _504-> _503); }))))) _term_9) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_i _x_12))) _type_10) in (let _term_13=(u (u (u fm_term_bind list_nil) (\_x_13-> (u bits_o _x_13))) _term_11) in (let _defs_14=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _name_4) _term_13) _type_12) bool_false) _defs_3) in (u (u monad_pure parser_monad) _defs_14))))))))))))))))))))
maybe_default = (\_a_2-> (\_m_3-> (let _505 = _m_3 in (case _505 of {(0,f) -> u f (_a_2); (1,f) -> u f (\_506-> _506); }))))
fm_constructor_new = (\_name_1-> (\_args_2-> (\_inds_3-> (0,\t-> t _name_1 _args_2 _inds_3))))
fm_parser_constructor = (\_namespace_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_args_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _args_5=(u (u maybe_default list_nil) _args_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u monad_pure parser_monad) (u (u (u fm_constructor_new _name_2) _args_5) _inds_6)))))))))))
fm_datatype_new = (\_name_1-> (\_pars_2-> (\_inds_3-> (\_ctrs_4-> (0,\t-> t _name_1 _pars_2 _inds_3 _ctrs_4)))))
fm_parser_datatype = (u (u (u monad_bind parser_monad) (u fm_parser_text "type ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_pars_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _pars_5=(u (u maybe_default list_nil) _pars_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__7-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) (u fm_parser_item (u fm_parser_constructor _name_2)))) (\_ctrs_8-> (u (u monad_pure parser_monad) (u (u (u (u fm_datatype_new _name_2) _pars_5) _inds_6) _ctrs_8))))))))))))))))
fm_datatype_build_term_motive_go = (\_type_1-> (\_name_2-> (\_inds_3-> (let _507 = _inds_3 in (case _507 of {(0,f) -> u f ((let _508 = _type_1 in (case _508 of {(0,f) -> u f (\_509 _510 _511 _512-> (let _slf_8=(u fm_term_ref _name_2) in (let _slf_9=(u (u (u list_for _510) _slf_8) (\_var_9-> (\_slf_10-> (u (u fm_term_app _slf_10) (u fm_term_ref (let _513 = _var_9 in (case _513 of {(0,f) -> u f (\_514 _515 _516-> _515); }))))))) in (let _slf_10=(u (u (u list_for _511) _slf_9) (\_var_10-> (\_slf_11-> (u (u fm_term_app _slf_11) (u fm_term_ref (let _517 = _var_10 in (case _517 of {(0,f) -> u f (\_518 _519 _520-> _519); }))))))) in (u (u (u (u (u fm_term_all bool_false) "") "") _slf_10) (\_s_11-> (\_x_12-> fm_term_typ))))))); }))); (1,f) -> u f (\_521 _522-> (let _523 = _521 in (case _523 of {(0,f) -> u f (\_524 _525 _526-> (u (u (u (u (u fm_term_all _524) "") _525) _526) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_motive_go _type_1) _name_2) _522))))); }))); })))))
fm_datatype_build_term_motive = (\_type_1-> (let _527 = _type_1 in (case _527 of {(0,f) -> u f (\_528 _529 _530 _531-> (u (u (u fm_datatype_build_term_motive_go _type_1) _528) _530)); })))
fm_datatype_build_term_constructor_go = (\_type_1-> (\_ctor_2-> (\_args_3-> (let _532 = _args_3 in (case _532 of {(0,f) -> u f ((let _533 = _type_1 in (case _533 of {(0,f) -> u f (\_534 _535 _536 _537-> (let _538 = _ctor_2 in (case _538 of {(0,f) -> u f (\_539 _540 _541-> (let _ret_11=(u fm_term_ref (u fm_name_read "P")) in (let _ret_12=(u (u (u list_for _541) _ret_11) (\_var_12-> (\_ret_13-> (u (u fm_term_app _ret_13) (let _542 = _var_12 in (case _542 of {(0,f) -> u f (\_543 _544 _545-> _545); })))))) in (let _ctr_13=(u string_flatten (u (u list_cons _534) (u (u list_cons (u fm_name_read ".")) (u (u list_cons _539) list_nil)))) in (let _slf_14=(u fm_term_ref _ctr_13) in (let _slf_15=(u (u (u list_for _535) _slf_14) (\_var_15-> (\_slf_16-> (u (u fm_term_app _slf_16) (u fm_term_ref (let _546 = _var_15 in (case _546 of {(0,f) -> u f (\_547 _548 _549-> _548); }))))))) in (let _slf_16=(u (u (u list_for _540) _slf_15) (\_var_16-> (\_slf_17-> (u (u fm_term_app _slf_17) (u fm_term_ref (let _550 = _var_16 in (case _550 of {(0,f) -> u f (\_551 _552 _553-> _552); }))))))) in (u (u fm_term_app _ret_12) _slf_16)))))))); }))); }))); (1,f) -> u f (\_554 _555-> (let _556 = _554 in (case _556 of {(0,f) -> u f (\_557 _558 _559-> (let _eras_9=_557 in (let _name_10=_558 in (let _xtyp_11=_559 in (let _body_12=(u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _555) in (u (u (u (u (u fm_term_all _eras_9) "") _name_10) _xtyp_11) (\_s_13-> (\_x_14-> _body_12)))))))); }))); })))))
fm_datatype_build_term_constructor = (\_type_1-> (\_ctor_2-> (let _560 = _ctor_2 in (case _560 of {(0,f) -> u f (\_561 _562 _563-> (u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _562)); }))))
fm_datatype_build_term_constructors_go = (\_type_1-> (\_name_2-> (\_ctrs_3-> (let _564 = _ctrs_3 in (case _564 of {(0,f) -> u f ((let _565 = _type_1 in (case _565 of {(0,f) -> u f (\_566 _567 _568 _569-> (let _ret_8=(u fm_term_ref (u fm_name_read "P")) in (let _ret_9=(u (u (u list_for _568) _ret_8) (\_var_9-> (\_ret_10-> (u (u fm_term_app _ret_10) (u fm_term_ref (let _570 = _var_9 in (case _570 of {(0,f) -> u f (\_571 _572 _573-> _572); }))))))) in (u (u fm_term_app _ret_9) (u fm_term_ref (((_name_2::String) ++ ".Self"))))))); }))); (1,f) -> u f (\_574 _575-> (let _576 = _574 in (case _576 of {(0,f) -> u f (\_577 _578 _579-> (u (u (u (u (u fm_term_all bool_false) "") _577) (u (u fm_datatype_build_term_constructor _type_1) _574)) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _name_2) _575))))); }))); })))))
fm_datatype_build_term_constructors = (\_type_1-> (let _580 = _type_1 in (case _580 of {(0,f) -> u f (\_581 _582 _583 _584-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _581) _584)); })))
fm_datatype_build_term_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _585 = _pars_3 in (case _585 of {(0,f) -> u f ((let _586 = _inds_4 in (case _586 of {(0,f) -> u f ((u (u (u (u (u fm_term_all bool_true) (((_name_2::String) ++ ".Self"))) (u fm_name_read "P")) (u fm_datatype_build_term_motive _type_1)) (\_s_5-> (\_x_6-> (u fm_datatype_build_term_constructors _type_1))))); (1,f) -> u f (\_587 _588-> (let _589 = _587 in (case _589 of {(0,f) -> u f (\_590 _591 _592-> (u (u fm_term_lam _591) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _pars_3) _588)))); }))); }))); (1,f) -> u f (\_593 _594-> (let _595 = _593 in (case _595 of {(0,f) -> u f (\_596 _597 _598-> (u (u fm_term_lam _597) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _594) _inds_4)))); }))); }))))))
fm_datatype_build_term = (\_type_1-> (let _599 = _type_1 in (case _599 of {(0,f) -> u f (\_600 _601 _602 _603-> (u (u (u (u fm_datatype_build_term_go _type_1) _600) _601) _602)); })))
fm_datatype_build_type_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _604 = _pars_3 in (case _604 of {(0,f) -> u f ((let _605 = _inds_4 in (case _605 of {(0,f) -> u f (fm_term_typ); (1,f) -> u f (\_606 _607-> (let _608 = _606 in (case _608 of {(0,f) -> u f (\_609 _610 _611-> (u (u (u (u (u fm_term_all bool_false) "") _610) _611) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _pars_3) _607))))); }))); }))); (1,f) -> u f (\_612 _613-> (let _614 = _612 in (case _614 of {(0,f) -> u f (\_615 _616 _617-> (u (u (u (u (u fm_term_all bool_false) "") _616) _617) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _613) _inds_4))))); }))); }))))))
fm_datatype_build_type = (\_type_1-> (let _618 = _type_1 in (case _618 of {(0,f) -> u f (\_619 _620 _621 _622-> (u (u (u (u fm_datatype_build_type_go _type_1) _619) _620) _621)); })))
fm_constructor_build_term_opt_go = (\_type_1-> (\_ctor_2-> (\_ctrs_3-> (let _623 = _ctrs_3 in (case _623 of {(0,f) -> u f ((let _624 = _ctor_2 in (case _624 of {(0,f) -> u f (\_625 _626 _627-> (let _ret_7=(u fm_term_ref _625) in (let _ret_8=(u (u (u list_for _626) _ret_7) (\_arg_8-> (\_ret_9-> (u (u fm_term_app _ret_9) (u fm_term_ref (let _628 = _arg_8 in (case _628 of {(0,f) -> u f (\_629 _630 _631-> _630); }))))))) in _ret_8))); }))); (1,f) -> u f (\_632 _633-> (let _634 = _632 in (case _634 of {(0,f) -> u f (\_635 _636 _637-> (u (u fm_term_lam _635) (\_x_9-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _633)))); }))); })))))
fm_constructor_build_term_opt = (\_type_1-> (\_ctor_2-> (let _638 = _type_1 in (case _638 of {(0,f) -> u f (\_639 _640 _641 _642-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _642)); }))))
fm_constructor_build_term_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _643 = _pars_4 in (case _643 of {(0,f) -> u f ((let _644 = _args_5 in (case _644 of {(0,f) -> u f ((u (u fm_term_lam (u fm_name_read "P")) (\_x_6-> (u (u fm_constructor_build_term_opt _type_1) _ctor_2)))); (1,f) -> u f (\_645 _646-> (let _647 = _645 in (case _647 of {(0,f) -> u f (\_648 _649 _650-> (u (u fm_term_lam _649) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _pars_4) _646)))); }))); }))); (1,f) -> u f (\_651 _652-> (let _653 = _651 in (case _653 of {(0,f) -> u f (\_654 _655 _656-> (u (u fm_term_lam _655) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _652) _args_5)))); }))); })))))))
fm_constructor_build_term = (\_type_1-> (\_ctor_2-> (let _657 = _type_1 in (case _657 of {(0,f) -> u f (\_658 _659 _660 _661-> (let _662 = _ctor_2 in (case _662 of {(0,f) -> u f (\_663 _664 _665-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _658) _659) _664)); }))); }))))
fm_constructor_build_type_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _666 = _pars_4 in (case _666 of {(0,f) -> u f ((let _667 = _args_5 in (case _667 of {(0,f) -> u f ((let _668 = _type_1 in (case _668 of {(0,f) -> u f (\_669 _670 _671 _672-> (let _673 = _ctor_2 in (case _673 of {(0,f) -> u f (\_674 _675 _676-> (let _type_13=(u fm_term_ref _name_3) in (let _type_14=(u (u (u list_for _670) _type_13) (\_var_14-> (\_type_15-> (u (u fm_term_app _type_15) (u fm_term_ref (let _677 = _var_14 in (case _677 of {(0,f) -> u f (\_678 _679 _680-> _679); }))))))) in (let _type_15=(u (u (u list_for _676) _type_14) (\_var_15-> (\_type_16-> (u (u fm_term_app _type_16) (let _681 = _var_15 in (case _681 of {(0,f) -> u f (\_682 _683 _684-> _684); })))))) in _type_15)))); }))); }))); (1,f) -> u f (\_685 _686-> (let _687 = _685 in (case _687 of {(0,f) -> u f (\_688 _689 _690-> (u (u (u (u (u fm_term_all _688) "") _689) _690) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _pars_4) _686))))); }))); }))); (1,f) -> u f (\_691 _692-> (let _693 = _691 in (case _693 of {(0,f) -> u f (\_694 _695 _696-> (u (u (u (u (u fm_term_all _694) "") _695) _696) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _692) _args_5))))); }))); })))))))
fm_constructor_build_type = (\_type_1-> (\_ctor_2-> (let _697 = _type_1 in (case _697 of {(0,f) -> u f (\_698 _699 _700 _701-> (let _702 = _ctor_2 in (case _702 of {(0,f) -> u f (\_703 _704 _705-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _698) _699) _704)); }))); }))))
fm_parser_file_adt = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_datatype) (\_adt_4-> (let _706 = _adt_4 in (case _706 of {(0,f) -> u f (\_707 _708 _709 _710-> (let _term_9=(u fm_datatype_build_term _adt_4) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_i _x_10))) _term_9) in (let _type_11=(u fm_datatype_build_type _adt_4) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_o _x_12))) _type_11) in (let _defs_13=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _707) _term_10) _type_12) bool_false) _defs_3) in (let _defs_14=(u (u (u list_fold _710) _defs_13) (\_ctr_14-> (\_defs_15-> (let _typ_name_16=_707 in (let _ctr_name_17=(u string_flatten (u (u list_cons _typ_name_16) (u (u list_cons (u fm_name_read ".")) (u (u list_cons (let _711 = _ctr_14 in (case _711 of {(0,f) -> u f (\_712 _713 _714-> _712); }))) list_nil)))) in (let _ctr_term_18=(u (u fm_constructor_build_term _adt_4) _ctr_14) in (let _ctr_term_19=(u (u (u fm_term_bind list_nil) (\_x_19-> (u bits_i _x_19))) _ctr_term_18) in (let _ctr_type_20=(u (u fm_constructor_build_type _adt_4) _ctr_14) in (let _ctr_type_21=(u (u (u fm_term_bind list_nil) (\_x_21-> (u bits_o _x_21))) _ctr_type_20) in (u (u (u (u (u (u (u fm_define _file_1) _code_2) _ctr_name_17) _ctr_term_19) _ctr_type_21) bool_false) _defs_15)))))))))) in (u (u monad_pure parser_monad) _defs_14)))))))); })))))))
parser_eof = (\_idx_1-> (\_code_2-> (let _715 = _code_2 in (if null (_715::String) then (u (u (u parser_reply_value _idx_1) _code_2) unit_new) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected end-of-file.")))))
fm_parser_file_end = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__4-> (u (u (u monad_bind parser_monad) parser_eof) (\__5-> (u (u monad_pure parser_monad) _defs_3))))))))
fm_parser_file = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) parser_is_eof) (\_stop_4-> (let _716 = _stop_4 in (if _716 then (u (u monad_pure parser_monad) _defs_3) else (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "#")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_file_6-> (u (u (u fm_parser_file _file_6) _code_2) _defs_3)))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u fm_parser_file_def _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_adt _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_end _file_1) _code_2) _defs_3)) list_nil))))) (\_defs_5-> (u (u (u fm_parser_file _file_1) _code_2) _defs_5)))) list_nil))))))))))
either = (\_a_1-> (\_b_2-> ()))
string_join_go = (\_sep_1-> (\_list_2-> (\_fst_3-> (let _717 = _list_2 in (case _717 of {(0,f) -> u f (""); (1,f) -> u f (\_718 _719-> (u string_flatten (u (u list_cons (let _720 = _fst_3 in (if _720 then "" else _sep_1))) (u (u list_cons _718) (u (u list_cons (u (u (u string_join_go _sep_1) _719) bool_false)) list_nil))))); })))))
string_join = (\_sep_1-> (\_list_2-> (u (u (u string_join_go _sep_1) _list_2) bool_true)))
fm_highlight_end = (\_col_1-> (\_row_2-> (\_res_3-> (u (u string_join "\n") _res_3))))
maybe_extract = (\_m_2-> (\_a_4-> (\_f_5-> (let _721 = _m_2 in (case _721 of {(0,f) -> u f (_a_4); (1,f) -> u f (\_722-> (u _f_5 _722)); })))))
nat_is_zero = (\_n_1-> (let _723 = _n_1 in (if _723==0 then bool_true else bool_false)))
nat_double = (\_n_1-> (let _724 = _n_1 in (if _724==0 then nat_zero else (u nat_succ (u nat_succ (u nat_double (_724-1)))))))
nat_pred = (\_n_1-> (let _725 = _n_1 in (if _725==0 then nat_zero else (_725-1))))
list_take = (\_n_2-> (\_xs_3-> (let _726 = _xs_3 in (case _726 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_727 _728-> (let _729 = _n_2 in (if _729==0 then list_nil else (u (u list_cons _727) (u (u list_take (_729-1)) _728))))); }))))
string_reverse_go = (\_xs_1-> (\_res_2-> (let _730 = _xs_1 in (if null (_730::String) then _res_2 else (u (u string_reverse_go (tail _730)) (u (u string_cons (fromIntegral (fromEnum (head _730 :: Char)) :: Word16)) _res_2))))))
string_reverse = (\_xs_1-> (u (u string_reverse_go _xs_1) string_nil))
string_pad_right = (\_size_1-> (\_chr_2-> (\_str_3-> (let _731 = _size_1 in (if _731==0 then _str_3 else (let _732 = _str_3 in (if null (_732::String) then (u (u string_cons _chr_2) (u (u (u string_pad_right (_731-1)) _chr_2) "")) else (u (u string_cons (fromIntegral (fromEnum (head _732 :: Char)) :: Word16)) (u (u (u string_pad_right (_731-1)) _chr_2) (tail _732))))))))))
string_pad_left = (\_size_1-> (\_chr_2-> (\_str_3-> (u string_reverse (u (u (u string_pad_right _size_1) _chr_2) (u string_reverse _str_3))))))
either_left = (\_value_3-> (0,\t-> t _value_3))
either_right = (\_value_3-> (1,\t-> t _value_3))
nat_sub_rem = (\_n_1-> (\_m_2-> (let _733 = _m_2 in (if _733==0 then (u either_left _n_1) else (let _734 = _n_1 in (if _734==0 then (u either_right (u nat_succ (_733-1))) else (u (u nat_sub_rem (_734-1)) (_733-1))))))))
nat_div_mod_go = (\_n_1-> (\_m_2-> (\_d_3-> (let _735 = (u (u nat_sub_rem _n_1) _m_2) in (case _735 of {(0,f) -> u f (\_736-> (u (u (u nat_div_mod_go _736) _m_2) (u nat_succ _d_3))); (1,f) -> u f (\_737-> (u (u pair_new _d_3) _n_1)); })))))
nat_div_mod = (\_n_1-> (\_m_2-> (u (u (u nat_div_mod_go _n_1) _m_2) nat_zero)))
nat_to_base_go = (\_base_1-> (\_nat_2-> (\_res_3-> (let _738 = (u (u nat_div_mod _nat_2) _base_1) in (case _738 of {(0,f) -> u f (\_739 _740-> (let _741 = _739 in (if _741==0 then (u (u list_cons _740) _res_3) else (u (u (u nat_to_base_go _base_1) _739) (u (u list_cons _740) _res_3))))); })))))
nat_to_base = (\_base_1-> (\_nat_2-> (u (u (u nat_to_base_go _base_1) _nat_2) list_nil)))
nat_mod = (\_n_1-> (\_m_2-> (u pair_snd (u (u nat_div_mod _n_1) _m_2))))
nat_lte = (\a0-> \a1-> ((a0::Integer) <= a1))
nat_show_digit = (\_base_1-> (\_n_2-> (let _m_3=(u (u nat_mod _n_2) _base_1) in (let _base64_4=(u (u list_cons 48) (u (u list_cons 49) (u (u list_cons 50) (u (u list_cons 51) (u (u list_cons 52) (u (u list_cons 53) (u (u list_cons 54) (u (u list_cons 55) (u (u list_cons 56) (u (u list_cons 57) (u (u list_cons 65) (u (u list_cons 66) (u (u list_cons 67) (u (u list_cons 68) (u (u list_cons 69) (u (u list_cons 70) (u (u list_cons 71) (u (u list_cons 72) (u (u list_cons 73) (u (u list_cons 74) (u (u list_cons 75) (u (u list_cons 76) (u (u list_cons 77) (u (u list_cons 78) (u (u list_cons 79) (u (u list_cons 80) (u (u list_cons 81) (u (u list_cons 82) (u (u list_cons 83) (u (u list_cons 84) (u (u list_cons 85) (u (u list_cons 86) (u (u list_cons 87) (u (u list_cons 88) (u (u list_cons 89) (u (u list_cons 90) (u (u list_cons 97) (u (u list_cons 98) (u (u list_cons 99) (u (u list_cons 100) (u (u list_cons 101) (u (u list_cons 102) (u (u list_cons 103) (u (u list_cons 104) (u (u list_cons 105) (u (u list_cons 106) (u (u list_cons 107) (u (u list_cons 108) (u (u list_cons 109) (u (u list_cons 110) (u (u list_cons 111) (u (u list_cons 112) (u (u list_cons 113) (u (u list_cons 114) (u (u list_cons 115) (u (u list_cons 116) (u (u list_cons 117) (u (u list_cons 118) (u (u list_cons 119) (u (u list_cons 120) (u (u list_cons 121) (u (u list_cons 122) (u (u list_cons 43) (u (u list_cons 47) list_nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (let _742 = (((((_base_1::Integer) > 0)) && (((_base_1::Integer) <= 64)))) in (if _742 then (let _743 = (u (u list_at _m_3) _base64_4) in (case _743 of {(0,f) -> u f (35); (1,f) -> u f (\_744-> _744); })) else 35))))))
nat_to_string_base = (\_base_1-> (\_nat_2-> (u (u (u list_fold (u (u nat_to_base _base_1) _nat_2)) string_nil) (\_n_3-> (\_str_4-> (u (u string_cons (u (u nat_show_digit _base_1) _n_3)) _str_4))))))
nat_show = (\_n_1-> (u (u nat_to_string_base 10) _n_1))
bool_not = (\a0-> (not a0))
fm_color = (\_col_1-> (\_str_2-> (u (u string_cons 27) (u (u string_cons 91) (((_col_1::String) ++ (u (u string_cons 109) (((_str_2::String) ++ (u (u string_cons 27) (u (u string_cons 91) (u (u string_cons 48) (u (u string_cons 109) string_nil)))))))))))))
fm_highlight_tc = (\_code_1-> (\_ix0_2-> (\_ix1_3-> (\_col_4-> (\_row_5-> (\_lft_6-> (\_lin_7-> (\_res_8-> (let _745 = _code_1 in (if null (_745::String) then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _746 = ((((fromIntegral (fromEnum (head _745 :: Char)) :: Word16)::Word16) == 10)) in (if _746 then (let _stp_11=(u (u (u maybe_extract _lft_6) bool_false) nat_is_zero) in (let _747 = _stp_11 in (if _747 then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _spa_12=3 in (let _siz_13=(u nat_succ (u nat_double _spa_12)) in (let _lft_14=(let _748 = _ix1_3 in (if _748==0 then (let _749 = _lft_6 in (case _749 of {(0,f) -> u f ((u maybe_some _spa_12)); (1,f) -> u f (\_750-> (u maybe_some (u nat_pred _750))); })) else _lft_6)) in (let _ix0_15=(u nat_pred _ix0_2) in (let _ix1_16=(u nat_pred _ix1_3) in (let _col_17=0 in (let _row_18=(u nat_succ _row_5) in (let _res_19=(u (u list_take _siz_13) (u (u list_cons (u string_reverse _lin_7)) _res_8)) in (let _lin_20=(u string_reverse (u string_flatten (u (u list_cons (u (u (u string_pad_left 4) 32) (u nat_show _row_18))) (u (u list_cons " | ") list_nil)))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _745)) _ix0_15) _ix1_16) _col_17) _row_18) _lft_14) _lin_20) _res_19))))))))))))) else (let _chr_11=(u (u string_cons (fromIntegral (fromEnum (head _745 :: Char)) :: Word16)) string_nil) in (let _chr_12=(let _751 = (((u nat_is_zero _ix0_2) && ((not (u nat_is_zero _ix1_3))))) in (if _751 then (u string_reverse (u (u fm_color "31") (u (u fm_color "4") _chr_11))) else _chr_11)) in (let _ix0_13=(u nat_pred _ix0_2) in (let _ix1_14=(u nat_pred _ix1_3) in (let _col_15=(u nat_succ _col_4) in (let _lin_16=(u string_flatten (u (u list_cons _chr_12) (u (u list_cons _lin_7) list_nil))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _745)) _ix0_13) _ix1_14) _col_15) _row_5) _lft_6) _lin_16) _res_8)))))))))))))))))))
fm_highlight = (\_code_1-> (\_idx0_2-> (\_idx1_3-> (u (u (u (u (u (u (u (u fm_highlight_tc _code_1) _idx0_2) _idx1_3) 0) 1) maybe_none) (u string_reverse "   1 | ")) list_nil))))
fm_defs_read = (\_file_1-> (\_code_2-> (\_defs_3-> (let _752 = (u (u (u (u (u fm_parser_file _file_1) _code_2) _defs_3) 0) _code_2) in (case _752 of {(0,f) -> u f (\_753 _754 _755-> (let _err_7=_755 in (let _hig_8=(u (u (u fm_highlight _code_2) _753) (u nat_succ _753)) in (let _str_9=(u string_flatten (u (u list_cons _err_7) (u (u list_cons "\n") (u (u list_cons _hig_8) list_nil)))) in (u either_left _str_9))))); (1,f) -> u f (\_756 _757 _758-> (u either_right _758)); })))))
fm_synth_load = (\_name_1-> (\_defs_2-> (let _file_3=(u fm_synth_file_of _name_1) in (u (u (u monad_bind io_monad) (u io_get_file _file_3)) (\_code_4-> (let _read_5=(u (u (u fm_defs_read _file_3) _code_4) _defs_2) in (let _759 = _read_5 in (case _759 of {(0,f) -> u f (\_760-> (u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_761-> (let _defs_7=_761 in (let _762 = (u (u fm_get _name_1) _defs_7) in (case _762 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_763-> (u (u monad_pure io_monad) (u maybe_some _defs_7))); })))); }))))))))
io_print = (\_text_1-> (u (u (u io_ask "print") _text_1) (\_skip_2-> (u io_end unit_new))))
fm_status_wait = (1,\t-> t)
fm_check = (\_v_1-> ())
fm_check_result = (\_value_2-> (\_errors_3-> (0,\t-> t _value_2 _errors_3)))
fm_check_bind = (\_a_3-> (\_f_4-> (let _764 = _a_3 in (case _764 of {(0,f) -> u f (\_765 _766-> (let _767 = _765 in (case _767 of {(0,f) -> u f ((u (u fm_check_result maybe_none) _766)); (1,f) -> u f (\_768-> (let _769 = (u _f_4 _768) in (case _769 of {(0,f) -> u f (\_770 _771-> (u (u fm_check_result _770) (u (u list_concat _766) _771))); }))); }))); }))))
fm_check_pure = (\_value_2-> (u (u fm_check_result (u maybe_some _value_2)) list_nil))
fm_check_monad = (u (u monad_new fm_check_bind) fm_check_pure)
fm_error_undefined_reference = (\_origin_1-> (\_name_2-> (5,\t-> t _origin_1 _name_2)))
fm_error_waiting = (\_name_1-> (2,\t-> t _name_1))
fm_error_indirect = (\_name_1-> (3,\t-> t _name_1))
maybe_mapped = (\_m_2-> (\_f_4-> (let _772 = _m_2 in (case _772 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_773-> (u maybe_some (u _f_4 _773))); }))))
fm_mpath_o = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_o))
fm_mpath_i = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_i))
fm_error_cant_infer = (\_origin_1-> (\_term_2-> (\_context_3-> (6,\t-> t _origin_1 _term_2 _context_3))))
fm_error_type_mismatch = (\_origin_1-> (\_expected_2-> (\_detected_3-> (\_context_4-> (0,\t-> t _origin_1 _expected_2 _detected_3 _context_4)))))
fm_error_show_goal = (\_name_1-> (\_dref_2-> (\_verb_3-> (\_goal_4-> (\_context_5-> (1,\t-> t _name_1 _dref_2 _verb_3 _goal_4 _context_5))))))
list_tail = (\_xs_2-> (let _774 = _xs_2 in (case _774 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_775 _776-> _776); })))
fm_smartmotive_vals_cont = (\_expr_1-> (\_term_2-> (\_args_3-> (\_defs_4-> (let _777 = (u (u fm_term_reduce _term_2) _defs_4) in (case _777 of {(0,f) -> u f (\_778 _779-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (1,f) -> u f (\_780-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (2,f) -> u f ((u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (3,f) -> u f (\_781 _782 _783 _784 _785-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (4,f) -> u f (\_786 _787-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (5,f) -> u f (\_788 _789-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _788) (u (u list_cons _789) _args_3)) _defs_4)); (6,f) -> u f (\_790 _791 _792-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (7,f) -> u f (\_793 _794 _795-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (8,f) -> u f (\_796 _797 _798-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (9,f) -> u f (\_799 _800 _801-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (10,f) -> u f (\_802-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (11,f) -> u f (\_803-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (12,f) -> u f (\_804-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (13,f) -> u f (\_805-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (14,f) -> u f (\_806 _807 _808 _809 _810 _811-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (15,f) -> u f (\_812 _813-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); }))))))
fm_smartmotive_vals = (\_expr_1-> (\_type_2-> (\_defs_3-> (let _814 = (u (u fm_term_reduce _type_2) _defs_3) in (case _814 of {(0,f) -> u f (\_815 _816-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (1,f) -> u f (\_817-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (2,f) -> u f ((u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (3,f) -> u f (\_818 _819 _820 _821 _822-> (u (u (u fm_smartmotive_vals _expr_1) (u (u _822 fm_term_typ) fm_term_typ)) _defs_3)); (4,f) -> u f (\_823 _824-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (5,f) -> u f (\_825 _826-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (6,f) -> u f (\_827 _828 _829-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (7,f) -> u f (\_830 _831 _832-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (8,f) -> u f (\_833 _834 _835-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (9,f) -> u f (\_836 _837 _838-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (10,f) -> u f (\_839-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (11,f) -> u f (\_840-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (12,f) -> u f (\_841-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (13,f) -> u f (\_842-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (14,f) -> u f (\_843 _844 _845 _846 _847 _848-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (15,f) -> u f (\_849 _850-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); })))))
fm_smartmotive_nams_cont = (\_name_1-> (\_term_2-> (\_binds_3-> (\_defs_4-> (let _851 = (u (u fm_term_reduce _term_2) _defs_4) in (case _851 of {(0,f) -> u f (\_852 _853-> (u (u list_cons _name_1) (u list_tail _binds_3))); (1,f) -> u f (\_854-> (u (u list_cons _name_1) (u list_tail _binds_3))); (2,f) -> u f ((u (u list_cons _name_1) (u list_tail _binds_3))); (3,f) -> u f (\_855 _856 _857 _858 _859-> (u (u (u (u fm_smartmotive_nams_cont _name_1) (u (u _859 (u fm_term_ref _856)) (u fm_term_ref _857))) (u (u list_cons (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _857) list_nil))))) _binds_3)) _defs_4)); (4,f) -> u f (\_860 _861-> (u (u list_cons _name_1) (u list_tail _binds_3))); (5,f) -> u f (\_862 _863-> (u (u list_cons _name_1) (u list_tail _binds_3))); (6,f) -> u f (\_864 _865 _866-> (u (u list_cons _name_1) (u list_tail _binds_3))); (7,f) -> u f (\_867 _868 _869-> (u (u list_cons _name_1) (u list_tail _binds_3))); (8,f) -> u f (\_870 _871 _872-> (u (u list_cons _name_1) (u list_tail _binds_3))); (9,f) -> u f (\_873 _874 _875-> (u (u list_cons _name_1) (u list_tail _binds_3))); (10,f) -> u f (\_876-> (u (u list_cons _name_1) (u list_tail _binds_3))); (11,f) -> u f (\_877-> (u (u list_cons _name_1) (u list_tail _binds_3))); (12,f) -> u f (\_878-> (u (u list_cons _name_1) (u list_tail _binds_3))); (13,f) -> u f (\_879-> (u (u list_cons _name_1) (u list_tail _binds_3))); (14,f) -> u f (\_880 _881 _882 _883 _884 _885-> (u (u list_cons _name_1) (u list_tail _binds_3))); (15,f) -> u f (\_886 _887-> (u (u list_cons _name_1) (u list_tail _binds_3))); }))))))
fm_smartmotive_nams = (\_name_1-> (\_type_2-> (\_defs_3-> (let _888 = (u (u fm_term_reduce _type_2) _defs_3) in (case _888 of {(0,f) -> u f (\_889 _890-> list_nil); (1,f) -> u f (\_891-> list_nil); (2,f) -> u f (list_nil); (3,f) -> u f (\_892 _893 _894 _895 _896-> (u (u (u (u fm_smartmotive_nams_cont _name_1) _895) list_nil) _defs_3)); (4,f) -> u f (\_897 _898-> list_nil); (5,f) -> u f (\_899 _900-> list_nil); (6,f) -> u f (\_901 _902 _903-> list_nil); (7,f) -> u f (\_904 _905 _906-> list_nil); (8,f) -> u f (\_907 _908 _909-> list_nil); (9,f) -> u f (\_910 _911 _912-> list_nil); (10,f) -> u f (\_913-> list_nil); (11,f) -> u f (\_914-> list_nil); (12,f) -> u f (\_915-> list_nil); (13,f) -> u f (\_916-> list_nil); (14,f) -> u f (\_917 _918 _919 _920 _921 _922-> list_nil); (15,f) -> u f (\_923 _924-> list_nil); })))))
list_zip = (\_as_3-> (\_bs_4-> (let _925 = _as_3 in (case _925 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_926 _927-> (let _928 = _bs_4 in (case _928 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_929 _930-> (u (u list_cons (u (u pair_new _926) _929)) (u (u list_zip _927) _930))); }))); }))))
cmp_as_gte = (\_cmp_1-> (let _931 = _cmp_1 in (case _931 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_true); (2,f) -> u f (bool_true); })))
nat_gte = (\a0-> \a1-> ((a0::Integer) >= a1))
nat_sub = (\a0-> \a1-> ((a0::Integer) - a1))
fm_term_serialize_name = (\_name_1-> (u fm_name_to_bits _name_1))
fm_term_serialize = (\_term_1-> (\_depth_2-> (\_init_3-> (\_x_4-> (let _932 = _term_1 in (case _932 of {(0,f) -> u f (\_933 _934-> (let _935 = (((_934::Integer) >= _init_3)) in (if _935 then (let _name_7=(u bits_concat (u nat_to_bits (u nat_pred (((_depth_2::Integer) - _934))))) in (u bits_o (u bits_o (u bits_i (u _name_7 _x_4))))) else (let _name_7=(u bits_concat (u nat_to_bits _934)) in (u bits_o (u bits_i (u bits_o (u _name_7 _x_4)))))))); (1,f) -> u f (\_936-> (let _name_6=(u bits_concat (u fm_term_serialize_name _936)) in (u bits_o (u bits_o (u bits_o (u _name_6 _x_4)))))); (2,f) -> u f ((u bits_o (u bits_i (u bits_i _x_4)))); (3,f) -> u f (\_937 _938 _939 _940 _941-> (let _eras_10=(let _942 = _937 in (if _942 then bits_i else bits_o)) in (let _self_11=(u bits_concat (u fm_name_to_bits _938)) in (let _xtyp_12=(u (u (u fm_term_serialize _940) _depth_2) _init_3) in (let _body_13=(u (u (u fm_term_serialize (u (u _941 (u (u fm_term_var _938) _depth_2)) (u (u fm_term_var _939) (u nat_succ _depth_2)))) (u nat_succ (u nat_succ _depth_2))) _init_3) in (u bits_i (u bits_o (u bits_o (u _eras_10 (u _self_11 (u _xtyp_12 (u _body_13 _x_4)))))))))))); (4,f) -> u f (\_943 _944-> (let _body_7=(u (u (u fm_term_serialize (u _944 (u (u fm_term_var _943) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_o (u bits_i (u _body_7 _x_4)))))); (5,f) -> u f (\_945 _946-> (let _func_7=(u (u (u fm_term_serialize _945) _depth_2) _init_3) in (let _argm_8=(u (u (u fm_term_serialize _946) _depth_2) _init_3) in (u bits_i (u bits_i (u bits_o (u _func_7 (u _argm_8 _x_4)))))))); (6,f) -> u f (\_947 _948 _949-> (let _expr_8=(u (u (u fm_term_serialize _948) _depth_2) _init_3) in (let _body_9=(u (u (u fm_term_serialize (u _949 (u (u fm_term_var _947) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_i (u bits_i (u _expr_8 (u _body_9 _x_4)))))))); (7,f) -> u f (\_950 _951 _952-> (u (u (u (u fm_term_serialize (u _952 _951)) _depth_2) _init_3) _x_4)); (8,f) -> u f (\_953 _954 _955-> (u (u (u (u fm_term_serialize _954) _depth_2) _init_3) _x_4)); (9,f) -> u f (\_956 _957 _958-> (let _name_8=(u bits_concat (u fm_name_to_bits _956)) in (u bits_o (u bits_o (u bits_o (u _name_8 _x_4)))))); (10,f) -> u f (\_959-> _x_4); (11,f) -> u f (\_960-> (u (u (u (u fm_term_serialize (u fm_term_unroll_nat _960)) _depth_2) _init_3) _x_4)); (12,f) -> u f (\_961-> (u (u (u (u fm_term_serialize (u fm_term_unroll_chr _961)) _depth_2) _init_3) _x_4)); (13,f) -> u f (\_962-> (u (u (u (u fm_term_serialize (u fm_term_unroll_str _962)) _depth_2) _init_3) _x_4)); (14,f) -> u f (\_963 _964 _965 _966 _967 _968-> _x_4); (15,f) -> u f (\_969 _970-> (u (u (u (u fm_term_serialize _970) _depth_2) _init_3) _x_4)); }))))))
bits_eql = (\_a_1-> (\_b_2-> (let _971 = _a_1 in (case _971 of {(0,f) -> u f ((let _972 = _b_2 in (case _972 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_973-> bool_false); (2,f) -> u f (\_974-> bool_false); }))); (1,f) -> u f (\_975-> (let _976 = _b_2 in (case _976 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_977-> (u (u bits_eql _975) _977)); (2,f) -> u f (\_978-> bool_false); }))); (2,f) -> u f (\_979-> (let _980 = _b_2 in (case _980 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_981-> bool_false); (2,f) -> u f (\_982-> (u (u bits_eql _979) _982)); }))); }))))
fm_term_identical = (\_a_1-> (\_b_2-> (\_lv_3-> (let _ah_4=(u (u (u (u fm_term_serialize _a_1) _lv_3) _lv_3) bits_e) in (let _bh_5=(u (u (u (u fm_term_serialize _b_2) _lv_3) _lv_3) bits_e) in (u (u bits_eql _ah_4) _bh_5))))))
fm_smartmotive_replace = (\_term_1-> (\_from_2-> (\_to_3-> (\_lv_4-> (let _983 = (u (u (u fm_term_identical _term_1) _from_2) _lv_4) in (if _983 then _to_3 else (let _984 = _term_1 in (case _984 of {(0,f) -> u f (\_985 _986-> (u (u fm_term_var _985) _986)); (1,f) -> u f (\_987-> (u fm_term_ref _987)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_988 _989 _990 _991 _992-> (let _xtyp_10=(u (u (u (u fm_smartmotive_replace _991) _from_2) _to_3) _lv_4) in (let _body_11=(u (u _992 (u fm_term_ref _989)) (u fm_term_ref _990)) in (let _body_12=(u (u (u (u fm_smartmotive_replace _body_11) _from_2) _to_3) (u nat_succ (u nat_succ _lv_4))) in (u (u (u (u (u fm_term_all _988) _989) _990) _xtyp_10) (\_s_13-> (\_x_14-> _body_12))))))); (4,f) -> u f (\_993 _994-> (let _body_7=(u _994 (u fm_term_ref _993)) in (let _body_8=(u (u (u (u fm_smartmotive_replace _body_7) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u fm_term_lam _993) (\_x_9-> _body_8))))); (5,f) -> u f (\_995 _996-> (let _func_7=(u (u (u (u fm_smartmotive_replace _995) _from_2) _to_3) _lv_4) in (let _argm_8=(u (u (u (u fm_smartmotive_replace _996) _from_2) _to_3) _lv_4) in (u (u fm_term_app _func_7) _argm_8)))); (6,f) -> u f (\_997 _998 _999-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _998) _from_2) _to_3) _lv_4) in (let _body_9=(u _999 (u fm_term_ref _997)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_let _997) _expr_8) (\_x_11-> _body_10)))))); (7,f) -> u f (\_1000 _1001 _1002-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _1001) _from_2) _to_3) _lv_4) in (let _body_9=(u _1002 (u fm_term_ref _1000)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_def _1000) _expr_8) (\_x_11-> _body_10)))))); (8,f) -> u f (\_1003 _1004 _1005-> (let _term_8=(u (u (u (u fm_smartmotive_replace _1004) _from_2) _to_3) _lv_4) in (let _type_9=(u (u (u (u fm_smartmotive_replace _1005) _from_2) _to_3) _lv_4) in (u (u (u fm_term_ann _1003) _term_8) _type_9)))); (9,f) -> u f (\_1006 _1007 _1008-> _term_1); (10,f) -> u f (\_1009-> _term_1); (11,f) -> u f (\_1010-> _term_1); (12,f) -> u f (\_1011-> _term_1); (13,f) -> u f (\_1012-> _term_1); (14,f) -> u f (\_1013 _1014 _1015 _1016 _1017 _1018-> _term_1); (15,f) -> u f (\_1019 _1020-> (u (u (u (u fm_smartmotive_replace _1020) _from_2) _to_3) _lv_4)); }))))))))
fm_smartmotive_make = (\_name_1-> (\_expr_2-> (\_type_3-> (\_moti_4-> (\_lv_5-> (\_defs_6-> (let _vals_7=(u (u (u fm_smartmotive_vals _expr_2) _type_3) _defs_6) in (let _nams_8=(u (u (u fm_smartmotive_nams _name_1) _type_3) _defs_6) in (let _subs_9=(u (u list_zip _nams_8) _vals_7) in (let _moti_10=(u (u (u list_fold _subs_9) _moti_4) (\_sub_10-> (\_moti_11-> (let _1021 = _sub_10 in (case _1021 of {(0,f) -> u f (\_1022 _1023-> (u (u (u (u fm_smartmotive_replace _moti_11) _1023) (u fm_term_ref _1022)) _lv_5)); }))))) in _moti_10))))))))))
fm_term_desugar_cse_motive = (\_wyth_1-> (\_moti_2-> (let _1024 = _wyth_1 in (case _1024 of {(0,f) -> u f (_moti_2); (1,f) -> u f (\_1025 _1026-> (let _1027 = _1025 in (case _1027 of {(0,f) -> u f (\_1028 _1029 _1030 _1031 _1032 _1033-> (u (u (u (u (u fm_term_all bool_false) "") _1030) _1032) (\_s_11-> (\_x_12-> (u (u fm_term_desugar_cse_motive _1026) _moti_2))))); }))); }))))
string_is_empty = (\_str_1-> (let _1034 = _str_1 in (if null (_1034::String) then bool_true else bool_false)))
fm_term_desugar_cse_argument = (\_name_1-> (\_wyth_2-> (\_type_3-> (\_body_4-> (\_defs_5-> (let _1035 = (u (u fm_term_reduce _type_3) _defs_5) in (case _1035 of {(0,f) -> u f (\_1036 _1037-> (let _1038 = _wyth_2 in (case _1038 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1039 _1040-> (let _1041 = _1039 in (case _1041 of {(0,f) -> u f (\_1042 _1043 _1044 _1045 _1046 _1047-> (u (u fm_term_lam _1044) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1040) _type_3) _body_4) _defs_5)))); }))); }))); (1,f) -> u f (\_1048-> (let _1049 = _wyth_2 in (case _1049 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1050 _1051-> (let _1052 = _1050 in (case _1052 of {(0,f) -> u f (\_1053 _1054 _1055 _1056 _1057 _1058-> (u (u fm_term_lam _1055) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1051) _type_3) _body_4) _defs_5)))); }))); }))); (2,f) -> u f ((let _1059 = _wyth_2 in (case _1059 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1060 _1061-> (let _1062 = _1060 in (case _1062 of {(0,f) -> u f (\_1063 _1064 _1065 _1066 _1067 _1068-> (u (u fm_term_lam _1065) (\_x_14-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1061) _type_3) _body_4) _defs_5)))); }))); }))); (3,f) -> u f (\_1069 _1070 _1071 _1072 _1073-> (u (u fm_term_lam (let _1074 = (u string_is_empty _1071) in (if _1074 then _name_1 else (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _1071) list_nil))))))) (\_x_11-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _wyth_2) (u (u _1073 (u (u fm_term_var _1070) 0)) (u (u fm_term_var _1071) 0))) _body_4) _defs_5)))); (4,f) -> u f (\_1075 _1076-> (let _1077 = _wyth_2 in (case _1077 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1078 _1079-> (let _1080 = _1078 in (case _1080 of {(0,f) -> u f (\_1081 _1082 _1083 _1084 _1085 _1086-> (u (u fm_term_lam _1083) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1079) _type_3) _body_4) _defs_5)))); }))); }))); (5,f) -> u f (\_1087 _1088-> (let _1089 = _wyth_2 in (case _1089 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1090 _1091-> (let _1092 = _1090 in (case _1092 of {(0,f) -> u f (\_1093 _1094 _1095 _1096 _1097 _1098-> (u (u fm_term_lam _1095) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1091) _type_3) _body_4) _defs_5)))); }))); }))); (6,f) -> u f (\_1099 _1100 _1101-> (let _1102 = _wyth_2 in (case _1102 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1103 _1104-> (let _1105 = _1103 in (case _1105 of {(0,f) -> u f (\_1106 _1107 _1108 _1109 _1110 _1111-> (u (u fm_term_lam _1108) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1104) _type_3) _body_4) _defs_5)))); }))); }))); (7,f) -> u f (\_1112 _1113 _1114-> (let _1115 = _wyth_2 in (case _1115 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1116 _1117-> (let _1118 = _1116 in (case _1118 of {(0,f) -> u f (\_1119 _1120 _1121 _1122 _1123 _1124-> (u (u fm_term_lam _1121) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1117) _type_3) _body_4) _defs_5)))); }))); }))); (8,f) -> u f (\_1125 _1126 _1127-> (let _1128 = _wyth_2 in (case _1128 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1129 _1130-> (let _1131 = _1129 in (case _1131 of {(0,f) -> u f (\_1132 _1133 _1134 _1135 _1136 _1137-> (u (u fm_term_lam _1134) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1130) _type_3) _body_4) _defs_5)))); }))); }))); (9,f) -> u f (\_1138 _1139 _1140-> (let _1141 = _wyth_2 in (case _1141 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1142 _1143-> (let _1144 = _1142 in (case _1144 of {(0,f) -> u f (\_1145 _1146 _1147 _1148 _1149 _1150-> (u (u fm_term_lam _1147) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1143) _type_3) _body_4) _defs_5)))); }))); }))); (10,f) -> u f (\_1151-> (let _1152 = _wyth_2 in (case _1152 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1153 _1154-> (let _1155 = _1153 in (case _1155 of {(0,f) -> u f (\_1156 _1157 _1158 _1159 _1160 _1161-> (u (u fm_term_lam _1158) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1154) _type_3) _body_4) _defs_5)))); }))); }))); (11,f) -> u f (\_1162-> (let _1163 = _wyth_2 in (case _1163 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1164 _1165-> (let _1166 = _1164 in (case _1166 of {(0,f) -> u f (\_1167 _1168 _1169 _1170 _1171 _1172-> (u (u fm_term_lam _1169) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1165) _type_3) _body_4) _defs_5)))); }))); }))); (12,f) -> u f (\_1173-> (let _1174 = _wyth_2 in (case _1174 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1175 _1176-> (let _1177 = _1175 in (case _1177 of {(0,f) -> u f (\_1178 _1179 _1180 _1181 _1182 _1183-> (u (u fm_term_lam _1180) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1176) _type_3) _body_4) _defs_5)))); }))); }))); (13,f) -> u f (\_1184-> (let _1185 = _wyth_2 in (case _1185 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1186 _1187-> (let _1188 = _1186 in (case _1188 of {(0,f) -> u f (\_1189 _1190 _1191 _1192 _1193 _1194-> (u (u fm_term_lam _1191) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1187) _type_3) _body_4) _defs_5)))); }))); }))); (14,f) -> u f (\_1195 _1196 _1197 _1198 _1199 _1200-> (let _1201 = _wyth_2 in (case _1201 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1202 _1203-> (let _1204 = _1202 in (case _1204 of {(0,f) -> u f (\_1205 _1206 _1207 _1208 _1209 _1210-> (u (u fm_term_lam _1207) (\_x_20-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1203) _type_3) _body_4) _defs_5)))); }))); }))); (15,f) -> u f (\_1211 _1212-> (let _1213 = _wyth_2 in (case _1213 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1214 _1215-> (let _1216 = _1214 in (case _1216 of {(0,f) -> u f (\_1217 _1218 _1219 _1220 _1221 _1222-> (u (u fm_term_lam _1219) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1215) _type_3) _body_4) _defs_5)))); }))); }))); })))))))
maybe_or = (\_a_2-> (\_b_3-> (let _1223 = _a_2 in (case _1223 of {(0,f) -> u f (_b_3); (1,f) -> u f (\_1224-> (u maybe_some _1224)); }))))
fm_term_desugar_cse_cases = (\_expr_1-> (\_name_2-> (\_wyth_3-> (\_cses_4-> (\_type_5-> (\_defs_6-> (\_ctxt_7-> (let _1225 = (u (u fm_term_reduce _type_5) _defs_6) in (case _1225 of {(0,f) -> u f (\_1226 _1227-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1228 = _defn_10 in (case _1228 of {(0,f) -> u f (\_1229 _1230 _1231 _1232 _1233 _1234-> _1232); })))))) in _expr_10)); (1,f) -> u f (\_1235-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1236 = _defn_9 in (case _1236 of {(0,f) -> u f (\_1237 _1238 _1239 _1240 _1241 _1242-> _1240); })))))) in _expr_9)); (2,f) -> u f ((let _expr_8=(u (u (u list_for _wyth_3) _expr_1) (\_defn_8-> (\_expr_9-> (u (u fm_term_app _expr_9) (let _1243 = _defn_8 in (case _1243 of {(0,f) -> u f (\_1244 _1245 _1246 _1247 _1248 _1249-> _1247); })))))) in _expr_8)); (3,f) -> u f (\_1250 _1251 _1252 _1253 _1254-> (let _got_13=(u (u maybe_or (u (u fm_get _1252) _cses_4)) (u (u fm_get "_") _cses_4)) in (let _1255 = _got_13 in (case _1255 of {(0,f) -> u f ((let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (let _1256 = _defn_14 in (case _1256 of {(0,f) -> u f (\_1257 _1258 _1259 _1260 _1261 _1262-> (u (u fm_term_app _expr_15) _1260)); }))))) in _expr_14)); (1,f) -> u f (\_1263-> (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) _wyth_3) _1253) _1263) _defs_6) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1254 (u (u fm_term_var _1251) 0)) (u (u fm_term_var _1252) 0)) in (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _wyth_3) _cses_4) _type_17) _defs_6) _ctxt_7))))); })))); (4,f) -> u f (\_1264 _1265-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1266 = _defn_10 in (case _1266 of {(0,f) -> u f (\_1267 _1268 _1269 _1270 _1271 _1272-> _1270); })))))) in _expr_10)); (5,f) -> u f (\_1273 _1274-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1275 = _defn_10 in (case _1275 of {(0,f) -> u f (\_1276 _1277 _1278 _1279 _1280 _1281-> _1279); })))))) in _expr_10)); (6,f) -> u f (\_1282 _1283 _1284-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1285 = _defn_11 in (case _1285 of {(0,f) -> u f (\_1286 _1287 _1288 _1289 _1290 _1291-> _1289); })))))) in _expr_11)); (7,f) -> u f (\_1292 _1293 _1294-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1295 = _defn_11 in (case _1295 of {(0,f) -> u f (\_1296 _1297 _1298 _1299 _1300 _1301-> _1299); })))))) in _expr_11)); (8,f) -> u f (\_1302 _1303 _1304-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1305 = _defn_11 in (case _1305 of {(0,f) -> u f (\_1306 _1307 _1308 _1309 _1310 _1311-> _1309); })))))) in _expr_11)); (9,f) -> u f (\_1312 _1313 _1314-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1315 = _defn_11 in (case _1315 of {(0,f) -> u f (\_1316 _1317 _1318 _1319 _1320 _1321-> _1319); })))))) in _expr_11)); (10,f) -> u f (\_1322-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1323 = _defn_9 in (case _1323 of {(0,f) -> u f (\_1324 _1325 _1326 _1327 _1328 _1329-> _1327); })))))) in _expr_9)); (11,f) -> u f (\_1330-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1331 = _defn_9 in (case _1331 of {(0,f) -> u f (\_1332 _1333 _1334 _1335 _1336 _1337-> _1335); })))))) in _expr_9)); (12,f) -> u f (\_1338-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1339 = _defn_9 in (case _1339 of {(0,f) -> u f (\_1340 _1341 _1342 _1343 _1344 _1345-> _1343); })))))) in _expr_9)); (13,f) -> u f (\_1346-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1347 = _defn_9 in (case _1347 of {(0,f) -> u f (\_1348 _1349 _1350 _1351 _1352 _1353-> _1351); })))))) in _expr_9)); (14,f) -> u f (\_1354 _1355 _1356 _1357 _1358 _1359-> (let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (u (u fm_term_app _expr_15) (let _1360 = _defn_14 in (case _1360 of {(0,f) -> u f (\_1361 _1362 _1363 _1364 _1365 _1366-> _1364); })))))) in _expr_14)); (15,f) -> u f (\_1367 _1368-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1369 = _defn_10 in (case _1369 of {(0,f) -> u f (\_1370 _1371 _1372 _1373 _1374 _1375-> _1373); })))))) in _expr_10)); })))))))))
fm_term_desugar_cse = (\_expr_1-> (\_name_2-> (\_with_3-> (\_cses_4-> (\_moti_5-> (\_type_6-> (\_defs_7-> (\_ctxt_8-> (let _1376 = (u (u fm_term_reduce _type_6) _defs_7) in (case _1376 of {(0,f) -> u f (\_1377 _1378-> maybe_none); (1,f) -> u f (\_1379-> maybe_none); (2,f) -> u f (maybe_none); (3,f) -> u f (\_1380 _1381 _1382 _1383 _1384-> (let _moti_14=(u (u fm_term_desugar_cse_motive _with_3) _moti_5) in (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) list_nil) _1383) _moti_14) _defs_7) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1384 (u (u fm_term_var _1381) 0)) (u (u fm_term_var _1382) 0)) in (u maybe_some (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _with_3) _cses_4) _type_17) _defs_7) _ctxt_8))))))); (4,f) -> u f (\_1385 _1386-> maybe_none); (5,f) -> u f (\_1387 _1388-> maybe_none); (6,f) -> u f (\_1389 _1390 _1391-> maybe_none); (7,f) -> u f (\_1392 _1393 _1394-> maybe_none); (8,f) -> u f (\_1395 _1396 _1397-> maybe_none); (9,f) -> u f (\_1398 _1399 _1400-> maybe_none); (10,f) -> u f (\_1401-> maybe_none); (11,f) -> u f (\_1402-> maybe_none); (12,f) -> u f (\_1403-> maybe_none); (13,f) -> u f (\_1404-> maybe_none); (14,f) -> u f (\_1405 _1406 _1407 _1408 _1409 _1410-> maybe_none); (15,f) -> u f (\_1411 _1412-> maybe_none); }))))))))))
fm_error_patch = (\_path_1-> (\_term_2-> (4,\t-> t _path_1 _term_2)))
fm_mpath_to_bits = (\_path_1-> (let _1413 = _path_1 in (case _1413 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_1414-> (u _1414 bits_e)); })))
set_has = (\_bits_1-> (\_set_2-> (let _1415 = (u (u map_get _bits_1) _set_2) in (case _1415 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1416-> bool_true); }))))
fm_term_normalize = (\_term_1-> (\_defs_2-> (let _1417 = (u (u fm_term_reduce _term_1) _defs_2) in (case _1417 of {(0,f) -> u f (\_1418 _1419-> (u (u fm_term_var _1418) _1419)); (1,f) -> u f (\_1420-> (u fm_term_ref _1420)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_1421 _1422 _1423 _1424 _1425-> (u (u (u (u (u fm_term_all _1421) _1422) _1423) (u (u fm_term_normalize _1424) _defs_2)) (\_s_8-> (\_x_9-> (u (u fm_term_normalize (u (u _1425 _s_8) _x_9)) _defs_2))))); (4,f) -> u f (\_1426 _1427-> (u (u fm_term_lam _1426) (\_x_5-> (u (u fm_term_normalize (u _1427 _x_5)) _defs_2)))); (5,f) -> u f (\_1428 _1429-> (u (u fm_term_app (u (u fm_term_normalize _1428) _defs_2)) (u (u fm_term_normalize _1429) _defs_2))); (6,f) -> u f (\_1430 _1431 _1432-> (u (u (u fm_term_let _1430) (u (u fm_term_normalize _1431) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1432 _x_6)) _defs_2)))); (7,f) -> u f (\_1433 _1434 _1435-> (u (u (u fm_term_def _1433) (u (u fm_term_normalize _1434) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1435 _x_6)) _defs_2)))); (8,f) -> u f (\_1436 _1437 _1438-> (u (u (u fm_term_ann _1436) (u (u fm_term_normalize _1437) _defs_2)) (u (u fm_term_normalize _1438) _defs_2))); (9,f) -> u f (\_1439 _1440 _1441-> (u (u (u fm_term_gol _1439) _1440) _1441)); (10,f) -> u f (\_1442-> (u fm_term_hol _1442)); (11,f) -> u f (\_1443-> (u fm_term_nat _1443)); (12,f) -> u f (\_1444-> (u fm_term_chr _1444)); (13,f) -> u f (\_1445-> (u fm_term_str _1445)); (14,f) -> u f (\_1446 _1447 _1448 _1449 _1450 _1451-> _term_1); (15,f) -> u f (\_1452 _1453-> (u (u fm_term_normalize _1453) _defs_2)); }))))
fm_term_equal_patch = (\_path_1-> (\_term_2-> (u (u fm_check_result (u maybe_some bool_true)) (u (u list_cons (u (u fm_error_patch _path_1) (u (u fm_term_normalize _term_2) map_new))) list_nil))))
set_set = (\_bits_1-> (\_set_2-> (u (u (u map_set _bits_1) unit_new) _set_2)))
bool_eql = (\_a_1-> (\_b_2-> (let _1454 = _a_1 in (if _1454 then _b_2 else ((not _b_2))))))
fm_term_equal = (\_a_1-> (\_b_2-> (\_defs_3-> (\_lv_4-> (\_seen_5-> (let _ah_6=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _a_1) map_new)) _lv_4) _lv_4) bits_e) in (let _bh_7=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _b_2) map_new)) _lv_4) _lv_4) bits_e) in (let _1455 = (u (u bits_eql _ah_6) _bh_7) in (if _1455 then (u (u monad_pure fm_check_monad) bool_true) else (let _a1_8=(u (u fm_term_reduce _a_1) _defs_3) in (let _b1_9=(u (u fm_term_reduce _b_2) _defs_3) in (let _ah_10=(u (u (u (u fm_term_serialize _a1_8) _lv_4) _lv_4) bits_e) in (let _bh_11=(u (u (u (u fm_term_serialize _b1_9) _lv_4) _lv_4) bits_e) in (let _1456 = (u (u bits_eql _ah_10) _bh_11) in (if _1456 then (u (u monad_pure fm_check_monad) bool_true) else (let _id_12=(u (u bits_concat _ah_10) _bh_11) in (let _1457 = (u (u set_has _id_12) _seen_5) in (if _1457 then (u (u monad_pure fm_check_monad) bool_true) else (let _1458 = _a1_8 in (case _1458 of {(0,f) -> u f (\_1459 _1460-> (let _1461 = _b1_9 in (case _1461 of {(0,f) -> u f (\_1462 _1463-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1464-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1465 _1466 _1467 _1468 _1469-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1470 _1471-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1472 _1473-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1474 _1475 _1476-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1477 _1478 _1479-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1480 _1481 _1482-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1483 _1484 _1485-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1486-> (u (u fm_term_equal_patch _1486) _a_1)); (11,f) -> u f (\_1487-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1488-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1489-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1490 _1491 _1492 _1493 _1494 _1495-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1496 _1497-> (u (u monad_pure fm_check_monad) bool_false)); }))); (1,f) -> u f (\_1498-> (let _1499 = _b1_9 in (case _1499 of {(0,f) -> u f (\_1500 _1501-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1502-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1503 _1504 _1505 _1506 _1507-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1508 _1509-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1510 _1511-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1512 _1513 _1514-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1515 _1516 _1517-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1518 _1519 _1520-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1521 _1522 _1523-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1524-> (u (u fm_term_equal_patch _1524) _a_1)); (11,f) -> u f (\_1525-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1526-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1527-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1528 _1529 _1530 _1531 _1532 _1533-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1534 _1535-> (u (u monad_pure fm_check_monad) bool_false)); }))); (2,f) -> u f ((let _1536 = _b1_9 in (case _1536 of {(0,f) -> u f (\_1537 _1538-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1539-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1540 _1541 _1542 _1543 _1544-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1545 _1546-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1547 _1548-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1549 _1550 _1551-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1552 _1553 _1554-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1555 _1556 _1557-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1558 _1559 _1560-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1561-> (u (u fm_term_equal_patch _1561) _a_1)); (11,f) -> u f (\_1562-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1563-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1564-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1565 _1566 _1567 _1568 _1569 _1570-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1571 _1572-> (u (u monad_pure fm_check_monad) bool_false)); }))); (3,f) -> u f (\_1573 _1574 _1575 _1576 _1577-> (let _1578 = _b1_9 in (case _1578 of {(0,f) -> u f (\_1579 _1580-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1581-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1582 _1583 _1584 _1585 _1586-> (let _seen_23=(u (u set_set _id_12) _seen_5) in (let _a1_body_24=(u (u _1577 (u (u fm_term_var _1574) _lv_4)) (u (u fm_term_var _1575) (u nat_succ _lv_4))) in (let _b1_body_25=(u (u _1586 (u (u fm_term_var _1583) _lv_4)) (u (u fm_term_var _1584) (u nat_succ _lv_4))) in (let _eq_self_26=(((_1574::String) == _1583)) in (let _eq_eras_27=(u (u bool_eql _1573) _1582) in (let _1587 = ((_eq_self_26 && _eq_eras_27)) in (if _1587 then (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _1576) _1585) _defs_3) _lv_4) _seen_23)) (\_eq_type_28-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_24) _b1_body_25) _defs_3) (u nat_succ (u nat_succ _lv_4))) _seen_23)) (\_eq_body_29-> (u (u monad_pure fm_check_monad) ((_eq_type_28 && _eq_body_29))))))) else (u (u monad_pure fm_check_monad) bool_false))))))))); (4,f) -> u f (\_1588 _1589-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1590 _1591-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1592 _1593 _1594-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1595 _1596 _1597-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1598 _1599 _1600-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1601 _1602 _1603-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1604-> (u (u fm_term_equal_patch _1604) _a_1)); (11,f) -> u f (\_1605-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1606-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1607-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1608 _1609 _1610 _1611 _1612 _1613-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1614 _1615-> (u (u monad_pure fm_check_monad) bool_false)); }))); (4,f) -> u f (\_1616 _1617-> (let _1618 = _b1_9 in (case _1618 of {(0,f) -> u f (\_1619 _1620-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1621-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1622 _1623 _1624 _1625 _1626-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1627 _1628-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (let _a1_body_18=(u _1617 (u (u fm_term_var _1616) _lv_4)) in (let _b1_body_19=(u _1628 (u (u fm_term_var _1627) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_18) _b1_body_19) _defs_3) (u nat_succ _lv_4)) _seen_17)) (\_eq_body_20-> (u (u monad_pure fm_check_monad) _eq_body_20))))))); (5,f) -> u f (\_1629 _1630-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1631 _1632 _1633-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1634 _1635 _1636-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1637 _1638 _1639-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1640 _1641 _1642-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1643-> (u (u fm_term_equal_patch _1643) _a_1)); (11,f) -> u f (\_1644-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1645-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1646-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1647 _1648 _1649 _1650 _1651 _1652-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1653 _1654-> (u (u monad_pure fm_check_monad) bool_false)); }))); (5,f) -> u f (\_1655 _1656-> (let _1657 = _b1_9 in (case _1657 of {(0,f) -> u f (\_1658 _1659-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1660-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1661 _1662 _1663 _1664 _1665-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1666 _1667-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1668 _1669-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _1655) _1668) _defs_3) _lv_4) _seen_17)) (\_eq_func_18-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _1656) _1669) _defs_3) _lv_4) _seen_17)) (\_eq_argm_19-> (u (u monad_pure fm_check_monad) ((_eq_func_18 && _eq_argm_19))))))))); (6,f) -> u f (\_1670 _1671 _1672-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1673 _1674 _1675-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1676 _1677 _1678-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1679 _1680 _1681-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1682-> (u (u fm_term_equal_patch _1682) _a_1)); (11,f) -> u f (\_1683-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1684-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1685-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1686 _1687 _1688 _1689 _1690 _1691-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1692 _1693-> (u (u monad_pure fm_check_monad) bool_false)); }))); (6,f) -> u f (\_1694 _1695 _1696-> (let _1697 = _b1_9 in (case _1697 of {(0,f) -> u f (\_1698 _1699-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1700-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1701 _1702 _1703 _1704 _1705-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1706 _1707-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1708 _1709-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1710 _1711 _1712-> (let _seen_19=(u (u set_set _id_12) _seen_5) in (let _a1_body_20=(u _1696 (u (u fm_term_var _1694) _lv_4)) in (let _b1_body_21=(u _1712 (u (u fm_term_var _1710) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _1695) _1711) _defs_3) _lv_4) _seen_19)) (\_eq_expr_22-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_20) _b1_body_21) _defs_3) (u nat_succ _lv_4)) _seen_19)) (\_eq_body_23-> (u (u monad_pure fm_check_monad) ((_eq_expr_22 && _eq_body_23))))))))))); (7,f) -> u f (\_1713 _1714 _1715-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1716 _1717 _1718-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1719 _1720 _1721-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1722-> (u (u fm_term_equal_patch _1722) _a_1)); (11,f) -> u f (\_1723-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1724-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1725-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1726 _1727 _1728 _1729 _1730 _1731-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1732 _1733-> (u (u monad_pure fm_check_monad) bool_false)); }))); (7,f) -> u f (\_1734 _1735 _1736-> (let _1737 = _b1_9 in (case _1737 of {(0,f) -> u f (\_1738 _1739-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1740-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1741 _1742 _1743 _1744 _1745-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1746 _1747-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1748 _1749-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1750 _1751 _1752-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1753 _1754 _1755-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1756 _1757 _1758-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1759 _1760 _1761-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1762-> (u (u fm_term_equal_patch _1762) _a_1)); (11,f) -> u f (\_1763-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1764-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1765-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1766 _1767 _1768 _1769 _1770 _1771-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1772 _1773-> (u (u monad_pure fm_check_monad) bool_false)); }))); (8,f) -> u f (\_1774 _1775 _1776-> (let _1777 = _b1_9 in (case _1777 of {(0,f) -> u f (\_1778 _1779-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1780-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1781 _1782 _1783 _1784 _1785-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1786 _1787-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1788 _1789-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1790 _1791 _1792-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1793 _1794 _1795-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1796 _1797 _1798-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1799 _1800 _1801-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1802-> (u (u fm_term_equal_patch _1802) _a_1)); (11,f) -> u f (\_1803-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1804-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1805-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1806 _1807 _1808 _1809 _1810 _1811-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1812 _1813-> (u (u monad_pure fm_check_monad) bool_false)); }))); (9,f) -> u f (\_1814 _1815 _1816-> (let _1817 = _b1_9 in (case _1817 of {(0,f) -> u f (\_1818 _1819-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1820-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1821 _1822 _1823 _1824 _1825-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1826 _1827-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1828 _1829-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1830 _1831 _1832-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1833 _1834 _1835-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1836 _1837 _1838-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1839 _1840 _1841-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1842-> (u (u fm_term_equal_patch _1842) _a_1)); (11,f) -> u f (\_1843-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1844-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1845-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1846 _1847 _1848 _1849 _1850 _1851-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1852 _1853-> (u (u monad_pure fm_check_monad) bool_false)); }))); (10,f) -> u f (\_1854-> (u (u fm_term_equal_patch _1854) _b_2)); (11,f) -> u f (\_1855-> (let _1856 = _b1_9 in (case _1856 of {(0,f) -> u f (\_1857 _1858-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1859-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1860 _1861 _1862 _1863 _1864-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1865 _1866-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1867 _1868-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1869 _1870 _1871-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1872 _1873 _1874-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1875 _1876 _1877-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1878 _1879 _1880-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1881-> (u (u fm_term_equal_patch _1881) _a_1)); (11,f) -> u f (\_1882-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1883-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1884-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1885 _1886 _1887 _1888 _1889 _1890-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1891 _1892-> (u (u monad_pure fm_check_monad) bool_false)); }))); (12,f) -> u f (\_1893-> (let _1894 = _b1_9 in (case _1894 of {(0,f) -> u f (\_1895 _1896-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1897-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1898 _1899 _1900 _1901 _1902-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1903 _1904-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1905 _1906-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1907 _1908 _1909-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1910 _1911 _1912-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1913 _1914 _1915-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1916 _1917 _1918-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1919-> (u (u fm_term_equal_patch _1919) _a_1)); (11,f) -> u f (\_1920-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1921-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1922-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1923 _1924 _1925 _1926 _1927 _1928-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1929 _1930-> (u (u monad_pure fm_check_monad) bool_false)); }))); (13,f) -> u f (\_1931-> (let _1932 = _b1_9 in (case _1932 of {(0,f) -> u f (\_1933 _1934-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1935-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1936 _1937 _1938 _1939 _1940-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1941 _1942-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1943 _1944-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1945 _1946 _1947-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1948 _1949 _1950-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1951 _1952 _1953-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1954 _1955 _1956-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_1957-> (u (u fm_term_equal_patch _1957) _a_1)); (11,f) -> u f (\_1958-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_1959-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_1960-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_1961 _1962 _1963 _1964 _1965 _1966-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_1967 _1968-> (u (u monad_pure fm_check_monad) bool_false)); }))); (14,f) -> u f (\_1969 _1970 _1971 _1972 _1973 _1974-> (let _1975 = _b1_9 in (case _1975 of {(0,f) -> u f (\_1976 _1977-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_1978-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_1979 _1980 _1981 _1982 _1983-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_1984 _1985-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_1986 _1987-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_1988 _1989 _1990-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_1991 _1992 _1993-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_1994 _1995 _1996-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_1997 _1998 _1999-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2000-> (u (u fm_term_equal_patch _2000) _a_1)); (11,f) -> u f (\_2001-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2002-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2003-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2004 _2005 _2006 _2007 _2008 _2009-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2010 _2011-> (u (u monad_pure fm_check_monad) bool_false)); }))); (15,f) -> u f (\_2012 _2013-> (let _2014 = _b1_9 in (case _2014 of {(0,f) -> u f (\_2015 _2016-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2017-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2018 _2019 _2020 _2021 _2022-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2023 _2024-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2025 _2026-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2027 _2028 _2029-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2030 _2031 _2032-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2033 _2034 _2035-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2036 _2037 _2038-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2039-> (u (u fm_term_equal_patch _2039) _a_1)); (11,f) -> u f (\_2040-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2041-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2042-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2043 _2044 _2045 _2046 _2047 _2048-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2049 _2050-> (u (u monad_pure fm_check_monad) bool_false)); }))); }))))))))))))))))))))
set_new = map_new
fm_term_check = (\_term_1-> (\_type_2-> (\_defs_3-> (\_ctx_4-> (\_path_5-> (\_orig_6-> (u (u (u monad_bind fm_check_monad) (let _2051 = _term_1 in (case _2051 of {(0,f) -> u f (\_2052 _2053-> (let _2054 = (u (u list_at_last _2053) _ctx_4) in (case _2054 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2052)) list_nil))); (1,f) -> u f (\_2055-> (u (u monad_pure fm_check_monad) (let _2056 = _2055 in (case _2056 of {(0,f) -> u f (\_2057 _2058-> _2058); })))); }))); (1,f) -> u f (\_2059-> (let _2060 = (u (u fm_get _2059) _defs_3) in (case _2060 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2059)) list_nil))); (1,f) -> u f (\_2061-> (let _2062 = _2061 in (case _2062 of {(0,f) -> u f (\_2063 _2064 _2065 _2066 _2067 _2068-> (let _ref_name_15=_2065 in (let _ref_type_16=_2067 in (let _ref_term_17=_2066 in (let _ref_stat_18=_2068 in (let _2069 = _ref_stat_18 in (case _2069 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_waiting _ref_name_15)) list_nil))); (1,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (2,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (3,f) -> u f (\_2070-> (u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_indirect _ref_name_15)) list_nil))); }))))))); }))); }))); (2,f) -> u f ((u (u monad_pure fm_check_monad) fm_term_typ)); (3,f) -> u f (\_2071 _2072 _2073 _2074 _2075-> (let _ctx_size_12=(u list_length _ctx_4) in (let _self_var_13=(u (u fm_term_var _2072) _ctx_size_12) in (let _body_var_14=(u (u fm_term_var _2073) (u nat_succ _ctx_size_12)) in (let _body_ctx_15=(u (u list_cons (u (u pair_new _2073) _2074)) (u (u list_cons (u (u pair_new _2072) _term_1)) _ctx_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2074) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__16-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u (u _2075 _self_var_13) _body_var_14)) (u maybe_some fm_term_typ)) _defs_3) _body_ctx_15) (u fm_mpath_i _path_5)) _orig_6)) (\__17-> (u (u monad_pure fm_check_monad) fm_term_typ)))))))))); (4,f) -> u f (\_2076 _2077-> (let _2078 = _type_2 in (case _2078 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2079-> (let _typv_10=(u (u fm_term_reduce _2079) _defs_3) in (let _2080 = _typv_10 in (case _2080 of {(0,f) -> u f (\_2081 _2082-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2083-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2084 _2085 _2086 _2087 _2088-> (let _ctx_size_16=(u list_length _ctx_4) in (let _self_var_17=_term_1 in (let _body_var_18=(u (u fm_term_var _2076) _ctx_size_16) in (let _body_typ_19=(u (u _2088 _self_var_17) _body_var_18) in (let _body_ctx_20=(u (u list_cons (u (u pair_new _2076) _2087)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u _2077 _body_var_18)) (u maybe_some _body_typ_19)) _defs_3) _body_ctx_20) (u fm_mpath_o _path_5)) _orig_6)) (\__21-> (u (u monad_pure fm_check_monad) _2079))))))))); (4,f) -> u f (\_2089 _2090-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2091 _2092-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2093 _2094 _2095-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2096 _2097 _2098-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2099 _2100 _2101-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2102 _2103 _2104-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2105-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2106-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2107-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2108-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2109 _2110 _2111 _2112 _2113 _2114-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2115 _2116-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2079) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))); }))); (5,f) -> u f (\_2117 _2118-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2117) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_func_typ_9-> (let _func_typ_10=(u (u fm_term_reduce _func_typ_9) _defs_3) in (let _2119 = _func_typ_10 in (case _2119 of {(0,f) -> u f (\_2120 _2121-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2122-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2123 _2124 _2125 _2126 _2127-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2118) (u maybe_some _2126)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__16-> (u (u monad_pure fm_check_monad) (u (u _2127 _2117) _2118))))); (4,f) -> u f (\_2128 _2129-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2130 _2131-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2132 _2133 _2134-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2135 _2136 _2137-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2138 _2139 _2140-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2141 _2142 _2143-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2144-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2145-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2146-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2147-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2148 _2149 _2150 _2151 _2152 _2153-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2154 _2155-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))))); (6,f) -> u f (\_2156 _2157 _2158-> (let _ctx_size_10=(u list_length _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2157) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_expr_typ_11-> (let _body_val_12=(u _2158 (u (u fm_term_var _2156) _ctx_size_10)) in (let _body_ctx_13=(u (u list_cons (u (u pair_new _2156) _expr_typ_11)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _body_val_12) _type_2) _defs_3) _body_ctx_13) (u fm_mpath_i _path_5)) _orig_6)) (\_body_typ_14-> (u (u monad_pure fm_check_monad) _body_typ_14))))))))); (7,f) -> u f (\_2159 _2160 _2161-> (u (u (u (u (u (u fm_term_check (u _2161 _2160)) _type_2) _defs_3) _ctx_4) _path_5) _orig_6)); (8,f) -> u f (\_2162 _2163 _2164-> (let _2165 = _2162 in (if _2165 then (u (u monad_pure fm_check_monad) _2164) else (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2163) (u maybe_some _2164)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__10-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2164) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__11-> (u (u monad_pure fm_check_monad) _2164)))))))); (9,f) -> u f (\_2166 _2167 _2168-> (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u (u fm_error_show_goal _2166) _2167) _2168) _type_2) _ctx_4)) list_nil))); (10,f) -> u f (\_2169-> (u (u fm_check_result _type_2) list_nil)); (11,f) -> u f (\_2170-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Nat"))); (12,f) -> u f (\_2171-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Char"))); (13,f) -> u f (\_2172-> (u (u monad_pure fm_check_monad) (u fm_term_ref "String"))); (14,f) -> u f (\_2173 _2174 _2175 _2176 _2177 _2178-> (let _expr_13=_2174 in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _expr_13) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_etyp_14-> (let _dsug_15=(let _2179 = _2178 in (case _2179 of {(0,f) -> u f ((let _moti_15=(let _2180 = _type_2 in (case _2180 of {(0,f) -> u f ((u fm_term_hol bits_e)); (1,f) -> u f (\_2181-> (let _size_16=(u list_length _ctx_4) in (let _moti_17=(u (u (u (u (u (u fm_smartmotive_make _2175) _2174) _etyp_14) _2181) _size_16) _defs_3) in _moti_17))); })) in (u maybe_some (u (u (u (u (u (u fm_term_cse _2173) _2174) _2175) _2176) _2177) (u maybe_some _moti_15))))); (1,f) -> u f (\_2182-> (u (u (u (u (u (u (u (u fm_term_desugar_cse _2174) _2175) _2176) _2177) _2182) _etyp_14) _defs_3) _ctx_4)); })) in (let _2183 = _dsug_15 in (case _2183 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2184-> (u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_patch (u fm_mpath_to_bits _path_5)) _2184)) list_nil))); }))))))); (15,f) -> u f (\_2185 _2186-> (u (u (u (u (u (u fm_term_check _2186) _type_2) _defs_3) _ctx_4) _path_5) (u maybe_some _2185))); }))) (\_infr_7-> (let _2187 = _type_2 in (case _2187 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _infr_7)) list_nil)); (1,f) -> u f (\_2188-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2188) _infr_7) _defs_3) (u list_length _ctx_4)) set_new)) (\_eqls_9-> (let _2189 = _eqls_9 in (if _2189 then (u (u monad_pure fm_check_monad) _2188) else (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) (u either_right _2188)) (u either_right _infr_7)) _ctx_4)) list_nil))))))); }))))))))))
fm_path_nil = (\_x_1-> _x_1)
fm_mpath_nil = (u maybe_some fm_path_nil)
list_is_empty = (\_list_2-> (let _2190 = _list_2 in (case _2190 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_2191 _2192-> bool_false); })))
fm_term_patch_at = (\_path_1-> (\_term_2-> (\_fn_3-> (let _2193 = _term_2 in (case _2193 of {(0,f) -> u f (\_2194 _2195-> (let _2196 = _path_1 in (case _2196 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2197-> _term_2); (2,f) -> u f (\_2198-> _term_2); }))); (1,f) -> u f (\_2199-> (let _2200 = _path_1 in (case _2200 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2201-> _term_2); (2,f) -> u f (\_2202-> _term_2); }))); (2,f) -> u f ((let _2203 = _path_1 in (case _2203 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2204-> _term_2); (2,f) -> u f (\_2205-> _term_2); }))); (3,f) -> u f (\_2206 _2207 _2208 _2209 _2210-> (let _2211 = _path_1 in (case _2211 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2212-> (u (u (u (u (u fm_term_all _2206) _2207) _2208) (u (u (u fm_term_patch_at _2212) _2209) _fn_3)) _2210)); (2,f) -> u f (\_2213-> (u (u (u (u (u fm_term_all _2206) _2207) _2208) _2209) (\_s_10-> (\_x_11-> (u (u (u fm_term_patch_at _2213) (u (u _2210 _s_10) _x_11)) _fn_3))))); }))); (4,f) -> u f (\_2214 _2215-> (let _2216 = _path_1 in (case _2216 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2217-> (u (u fm_term_lam _2214) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2215 _x_7)) _fn_3)))); (2,f) -> u f (\_2218-> (u (u fm_term_lam _2214) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2215 _x_7)) _fn_3)))); }))); (5,f) -> u f (\_2219 _2220-> (let _2221 = _path_1 in (case _2221 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2222-> (u (u fm_term_app (u (u (u fm_term_patch_at _2222) _2219) _fn_3)) _2220)); (2,f) -> u f (\_2223-> (u (u fm_term_app _2219) (u (u (u fm_term_patch_at _2223) _2220) _fn_3))); }))); (6,f) -> u f (\_2224 _2225 _2226-> (let _2227 = _path_1 in (case _2227 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2228-> (u (u (u fm_term_let _2224) (u (u (u fm_term_patch_at _2228) _2225) _fn_3)) _2226)); (2,f) -> u f (\_2229-> (u (u (u fm_term_let _2224) _2225) (\_x_8-> (u (u (u fm_term_patch_at _2229) (u _2226 _x_8)) _fn_3)))); }))); (7,f) -> u f (\_2230 _2231 _2232-> (let _2233 = _path_1 in (case _2233 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2234-> (u (u (u fm_term_def _2230) (u (u (u fm_term_patch_at _2234) _2231) _fn_3)) _2232)); (2,f) -> u f (\_2235-> (u (u (u fm_term_def _2230) _2231) (\_x_8-> (u (u (u fm_term_patch_at _2235) (u _2232 _x_8)) _fn_3)))); }))); (8,f) -> u f (\_2236 _2237 _2238-> (let _2239 = _path_1 in (case _2239 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2240-> (u (u (u fm_term_ann _2236) (u (u (u fm_term_patch_at _path_1) _2237) _fn_3)) _2238)); (2,f) -> u f (\_2241-> (u (u (u fm_term_ann _2236) (u (u (u fm_term_patch_at _path_1) _2237) _fn_3)) _2238)); }))); (9,f) -> u f (\_2242 _2243 _2244-> (let _2245 = _path_1 in (case _2245 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2246-> _term_2); (2,f) -> u f (\_2247-> _term_2); }))); (10,f) -> u f (\_2248-> (let _2249 = _path_1 in (case _2249 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2250-> _term_2); (2,f) -> u f (\_2251-> _term_2); }))); (11,f) -> u f (\_2252-> (let _2253 = _path_1 in (case _2253 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2254-> _term_2); (2,f) -> u f (\_2255-> _term_2); }))); (12,f) -> u f (\_2256-> (let _2257 = _path_1 in (case _2257 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2258-> _term_2); (2,f) -> u f (\_2259-> _term_2); }))); (13,f) -> u f (\_2260-> (let _2261 = _path_1 in (case _2261 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2262-> _term_2); (2,f) -> u f (\_2263-> _term_2); }))); (14,f) -> u f (\_2264 _2265 _2266 _2267 _2268 _2269-> (let _2270 = _path_1 in (case _2270 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2271-> _term_2); (2,f) -> u f (\_2272-> _term_2); }))); (15,f) -> u f (\_2273 _2274-> (u (u (u fm_term_patch_at _path_1) _2274) _fn_3)); })))))
fm_synth_fix = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_defs_6-> (\_errs_7-> (\_fixd_8-> (let _2275 = _errs_7 in (case _2275 of {(0,f) -> u f ((let _2276 = _fixd_8 in (if _2276 then (let _type_9=(u (u (u fm_term_bind list_nil) (\_x_9-> (u bits_i _x_9))) _type_5) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_o _x_10))) _term_4) in (let _defs_11=(u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_10) _type_9) fm_status_init)) _defs_6) in (u (u monad_pure io_monad) (u maybe_some _defs_11))))) else (u (u monad_pure io_monad) maybe_none)))); (1,f) -> u f (\_2277 _2278-> (let _2279 = _2277 in (case _2279 of {(0,f) -> u f (\_2280 _2281 _2282 _2283-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2278) _fixd_8)); (1,f) -> u f (\_2284 _2285 _2286 _2287 _2288-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2278) _fixd_8)); (2,f) -> u f (\_2289-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2289) _defs_6)) (\_defs_12-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_12) _2278) bool_true)))); (3,f) -> u f (\_2290-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2278) _fixd_8)); (4,f) -> u f (\_2291 _2292-> (let _2293 = _2291 in (case _2293 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_2294-> (let _term_14=(u (u (u fm_term_patch_at _2294) _term_4) (\_x_14-> _2292)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_14) _type_5) _defs_6) _2278) bool_true))); (2,f) -> u f (\_2295-> (let _type_14=(u (u (u fm_term_patch_at _2295) _type_5) (\_x_14-> _2292)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_14) _defs_6) _2278) bool_true))); }))); (5,f) -> u f (\_2296 _2297-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2297) _defs_6)) (\_defs_13-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_13) _2278) bool_true)))); (6,f) -> u f (\_2298 _2299 _2300-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2278) _fixd_8)); }))); }))))))))))
fm_status_fail = (\_errors_1-> (3,\t-> t _errors_1))
fm_synth_one = (\_name_1-> (\_defs_2-> (let _2301 = (u (u fm_get _name_1) _defs_2) in (case _2301 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u (u fm_synth_load _name_1) _defs_2)) (\_loaded_3-> (let _2302 = _loaded_3 in (case _2302 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "Undefined: ") (u (u list_cons _name_1) list_nil))))) (\__4-> (u (u monad_pure io_monad) _defs_2)))); (1,f) -> u f (\_2303-> (u (u fm_synth_one _name_1) _2303)); }))))); (1,f) -> u f (\_2304-> (let _2305 = _2304 in (case _2305 of {(0,f) -> u f (\_2306 _2307 _2308 _2309 _2310 _2311-> (let _file_10=_2306 in (let _code_11=_2307 in (let _name_12=_2308 in (let _term_13=_2309 in (let _type_14=_2310 in (let _stat_15=_2311 in (let _2312 = _stat_15 in (case _2312 of {(0,f) -> u f ((let _defs_16=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) fm_status_wait)) _defs_2) in (let _checked_17=(u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _type_14) (u maybe_some fm_term_typ)) _defs_16) list_nil) (u fm_mpath_i fm_mpath_nil)) maybe_none)) (\_chk_type_17-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _term_13) (u maybe_some _type_14)) _defs_16) list_nil) (u fm_mpath_o fm_mpath_nil)) maybe_none)) (\_chk_term_18-> (u (u monad_pure fm_check_monad) unit_new))))) in (let _2313 = _checked_17 in (case _2313 of {(0,f) -> u f (\_2314 _2315-> (let _2316 = (u list_is_empty _2315) in (if _2316 then (let _defs_20=(u (u (u (u (u (u (u fm_define _file_10) _code_11) _name_12) _term_13) _type_14) bool_true) _defs_16) in (u (u monad_pure io_monad) _defs_20)) else (u (u (u monad_bind io_monad) (u (u (u (u (u (u (u (u fm_synth_fix _file_10) _code_11) _name_12) _term_13) _type_14) _defs_16) _2315) bool_false)) (\_fixed_20-> (let _2317 = _fixed_20 in (case _2317 of {(0,f) -> u f ((let _stat_21=(u fm_status_fail _2315) in (let _defs_22=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) _stat_21)) _defs_16) in (u (u monad_pure io_monad) _defs_22)))); (1,f) -> u f (\_2318-> (u (u fm_synth_one _name_12) _2318)); }))))))); }))))); (1,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (2,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (3,f) -> u f (\_2319-> (u (u monad_pure io_monad) _defs_2)); }))))))))); }))); }))))
map_values_go = (\_xs_2-> (\_list_3-> (let _2320 = _xs_2 in (case _2320 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2321 _2322 _2323-> (let _list0_7=(let _2324 = _2321 in (case _2324 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2325-> (u (u list_cons _2325) _list_3)); })) in (let _list1_8=(u (u map_values_go _2322) _list0_7) in (let _list2_9=(u (u map_values_go _2323) _list1_8) in _list2_9)))); }))))
map_values = (\_xs_2-> (u (u map_values_go _xs_2) list_nil))
fm_name_show = (\_name_1-> _name_1)
bits_to_nat = (\_b_1-> (let _2326 = _b_1 in (case _2326 of {(0,f) -> u f (0); (1,f) -> u f (\_2327-> (((2::Integer) * (u bits_to_nat _2327)))); (2,f) -> u f (\_2328-> (u nat_succ (((2::Integer) * (u bits_to_nat _2328))))); })))
u16_show_hex = (\_a_1-> (let _2329 = _a_1 in (u (u nat_to_string_base 16) (u bits_to_nat (u word_to_bits (u16_to_word _2329))))))
fm_escape_char = (\_chr_1-> (let _2330 = (((_chr_1::Word16) == fm_backslash)) in (if _2330 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2331 = (((_chr_1::Word16) == 34)) in (if _2331 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2332 = (((_chr_1::Word16) == 39)) in (if _2332 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2333 = (u (u (u u16_btw 32) _chr_1) 126) in (if _2333 then (u (u string_cons _chr_1) string_nil) else (u string_flatten (u (u list_cons (u (u string_cons fm_backslash) string_nil)) (u (u list_cons "u{") (u (u list_cons (u u16_show_hex _chr_1)) (u (u list_cons "}") (u (u list_cons string_nil) list_nil)))))))))))))))
fm_escape = (\_str_1-> (let _2334 = _str_1 in (if null (_2334::String) then string_nil else (let _head_4=(u fm_escape_char (fromIntegral (fromEnum (head _2334 :: Char)) :: Word16)) in (let _tail_5=(u fm_escape (tail _2334)) in (((_head_4::String) ++ _tail_5)))))))
fm_term_core = (\_term_1-> (let _2335 = _term_1 in (case _2335 of {(0,f) -> u f (\_2336 _2337-> (u fm_name_show _2336)); (1,f) -> u f (\_2338-> (u fm_name_show _2338)); (2,f) -> u f ("*"); (3,f) -> u f (\_2339 _2340 _2341 _2342 _2343-> (let _eras_7=_2339 in (let _init_8=(let _2344 = _eras_7 in (if _2344 then "%" else "@")) in (let _self_9=(u fm_name_show _2340) in (let _name_10=(u fm_name_show _2341) in (let _xtyp_11=(u fm_term_core _2342) in (let _body_12=(u fm_term_core (u (u _2343 (u (u fm_term_var _2340) 0)) (u (u fm_term_var _2341) 0))) in (u string_flatten (u (u list_cons _init_8) (u (u list_cons _self_9) (u (u list_cons "(") (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _xtyp_11) (u (u list_cons ") ") (u (u list_cons _body_12) list_nil)))))))))))))))); (4,f) -> u f (\_2345 _2346-> (let _name_4=(u fm_name_show _2345) in (let _body_5=(u fm_term_core (u _2346 (u (u fm_term_var _2345) 0))) in (u string_flatten (u (u list_cons "#") (u (u list_cons _name_4) (u (u list_cons " ") (u (u list_cons _body_5) list_nil)))))))); (5,f) -> u f (\_2347 _2348-> (let _func_4=(u fm_term_core _2347) in (let _argm_5=(u fm_term_core _2348) in (u string_flatten (u (u list_cons "(") (u (u list_cons _func_4) (u (u list_cons " ") (u (u list_cons _argm_5) (u (u list_cons ")") list_nil))))))))); (6,f) -> u f (\_2349 _2350 _2351-> (let _name_5=(u fm_name_show _2349) in (let _expr_6=(u fm_term_core _2350) in (let _body_7=(u fm_term_core (u _2351 (u (u fm_term_var _2349) 0))) in (u string_flatten (u (u list_cons "!") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (7,f) -> u f (\_2352 _2353 _2354-> (let _name_5=(u fm_name_show _2352) in (let _expr_6=(u fm_term_core _2353) in (let _body_7=(u fm_term_core (u _2354 (u (u fm_term_var _2352) 0))) in (u string_flatten (u (u list_cons "$") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (8,f) -> u f (\_2355 _2356 _2357-> (let _term_5=(u fm_term_core _2356) in (let _type_6=(u fm_term_core _2357) in (u string_flatten (u (u list_cons "{") (u (u list_cons _term_5) (u (u list_cons ":") (u (u list_cons _type_6) (u (u list_cons "}") list_nil))))))))); (9,f) -> u f (\_2358 _2359 _2360-> "<GOL>"); (10,f) -> u f (\_2361-> "<HOL>"); (11,f) -> u f (\_2362-> (u string_flatten (u (u list_cons "+") (u (u list_cons (u nat_show _2362)) list_nil)))); (12,f) -> u f (\_2363-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _2363)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_2364-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _2364)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_2365 _2366 _2367 _2368 _2369 _2370-> "<CSE>"); (15,f) -> u f (\_2371 _2372-> (u fm_term_core _2372)); })))
fm_defs_core = (\_defs_1-> (let _result_2="" in (let _result_3=(u (u (u list_for (u map_values _defs_1)) _result_2) (\_defn_3-> (\_result_4-> (let _2373 = _defn_3 in (case _2373 of {(0,f) -> u f (\_2374 _2375 _2376 _2377 _2378 _2379-> (let _2380 = _2379 in (case _2380 of {(0,f) -> u f (_result_4); (1,f) -> u f (_result_4); (2,f) -> u f ((let _name_11=_2376 in (let _term_12=(u fm_term_core _2377) in (let _type_13=(u fm_term_core _2378) in (u string_flatten (u (u list_cons _result_4) (u (u list_cons _name_11) (u (u list_cons " : ") (u (u list_cons _type_13) (u (u list_cons " = ") (u (u list_cons _term_12) (u (u list_cons ";\n") list_nil)))))))))))); (3,f) -> u f (\_2381-> _result_4); }))); }))))) in _result_3)))
fm_to_core_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u (u monad_pure io_monad) (u fm_defs_core _defs_2)))))
maybe_bind = (\_m_3-> (\_f_4-> (let _2382 = _m_3 in (case _2382 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_2383-> (u _f_4 _2383)); }))))
maybe_monad = (u (u monad_new maybe_bind) maybe_some)
fm_term_show_as_nat_go = (\_term_1-> (let _2384 = _term_1 in (case _2384 of {(0,f) -> u f (\_2385 _2386-> maybe_none); (1,f) -> u f (\_2387-> (let _2388 = (((_2387::String) == "Nat.zero")) in (if _2388 then (u maybe_some 0) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_2389 _2390 _2391 _2392 _2393-> maybe_none); (4,f) -> u f (\_2394 _2395-> maybe_none); (5,f) -> u f (\_2396 _2397-> (let _2398 = _2396 in (case _2398 of {(0,f) -> u f (\_2399 _2400-> maybe_none); (1,f) -> u f (\_2401-> (let _2402 = (((_2401::String) == "Nat.succ")) in (if _2402 then (u (u (u monad_bind maybe_monad) (u fm_term_show_as_nat_go _2397)) (\_pred_5-> (u (u monad_pure maybe_monad) (u nat_succ _pred_5)))) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_2403 _2404 _2405 _2406 _2407-> maybe_none); (4,f) -> u f (\_2408 _2409-> maybe_none); (5,f) -> u f (\_2410 _2411-> maybe_none); (6,f) -> u f (\_2412 _2413 _2414-> maybe_none); (7,f) -> u f (\_2415 _2416 _2417-> maybe_none); (8,f) -> u f (\_2418 _2419 _2420-> maybe_none); (9,f) -> u f (\_2421 _2422 _2423-> maybe_none); (10,f) -> u f (\_2424-> maybe_none); (11,f) -> u f (\_2425-> maybe_none); (12,f) -> u f (\_2426-> maybe_none); (13,f) -> u f (\_2427-> maybe_none); (14,f) -> u f (\_2428 _2429 _2430 _2431 _2432 _2433-> maybe_none); (15,f) -> u f (\_2434 _2435-> maybe_none); }))); (6,f) -> u f (\_2436 _2437 _2438-> maybe_none); (7,f) -> u f (\_2439 _2440 _2441-> maybe_none); (8,f) -> u f (\_2442 _2443 _2444-> maybe_none); (9,f) -> u f (\_2445 _2446 _2447-> maybe_none); (10,f) -> u f (\_2448-> maybe_none); (11,f) -> u f (\_2449-> maybe_none); (12,f) -> u f (\_2450-> maybe_none); (13,f) -> u f (\_2451-> maybe_none); (14,f) -> u f (\_2452 _2453 _2454 _2455 _2456 _2457-> maybe_none); (15,f) -> u f (\_2458 _2459-> maybe_none); })))
fm_term_show_as_nat = (\_term_1-> (u (u maybe_mapped (u fm_term_show_as_nat_go _term_1)) nat_show))
fm_term_show_is_ref = (\_term_1-> (\_name_2-> (let _2460 = _term_1 in (case _2460 of {(0,f) -> u f (\_2461 _2462-> bool_false); (1,f) -> u f (\_2463-> (((_name_2::String) == _2463))); (2,f) -> u f (bool_false); (3,f) -> u f (\_2464 _2465 _2466 _2467 _2468-> bool_false); (4,f) -> u f (\_2469 _2470-> bool_false); (5,f) -> u f (\_2471 _2472-> bool_false); (6,f) -> u f (\_2473 _2474 _2475-> bool_false); (7,f) -> u f (\_2476 _2477 _2478-> bool_false); (8,f) -> u f (\_2479 _2480 _2481-> bool_false); (9,f) -> u f (\_2482 _2483 _2484-> bool_false); (10,f) -> u f (\_2485-> bool_false); (11,f) -> u f (\_2486-> bool_false); (12,f) -> u f (\_2487-> bool_false); (13,f) -> u f (\_2488-> bool_false); (14,f) -> u f (\_2489 _2490 _2491 _2492 _2493 _2494-> bool_false); (15,f) -> u f (\_2495 _2496-> bool_false); }))))
nat_eql = (\a0-> \a1-> ((a0::Integer) == a1))
fm_term_show_app = (\_term_1-> (\_path_2-> (\_args_3-> (let _2497 = _term_1 in (case _2497 of {(0,f) -> u f (\_2498 _2499-> (let _arity_6=(u list_length _args_3) in (let _2500 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _2500 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _2501 = _func_7 in (if null (_2501::String) then bool_false else ((((fromIntegral (fromEnum (head _2501 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _2502 = _wrap_8 in (if _2502 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (1,f) -> u f (\_2503-> (let _arity_5=(u list_length _args_3) in (let _2504 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _2504 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _2505 = _func_6 in (if null (_2505::String) then bool_false else ((((fromIntegral (fromEnum (head _2505 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _2506 = _wrap_7 in (if _2506 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (2,f) -> u f ((let _arity_4=(u list_length _args_3) in (let _2507 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_4::Integer) == 3)))) in (if _2507 then (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_6=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_7=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_6) (u (u list_cons " == ") (u (u list_cons _eq_rgt_7) list_nil))))))) else (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_6=(let _2508 = _func_5 in (if null (_2508::String) then bool_false else ((((fromIntegral (fromEnum (head _2508 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_7=(u (u string_join ",") _args_3) in (let _func_8=(let _2509 = _wrap_6 in (if _2509 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_5) (u (u list_cons ")") list_nil)))) else _func_5)) in (u string_flatten (u (u list_cons _func_8) (u (u list_cons "(") (u (u list_cons _args_7) (u (u list_cons ")") list_nil))))))))))))); (3,f) -> u f (\_2510 _2511 _2512 _2513 _2514-> (let _arity_9=(u list_length _args_3) in (let _2515 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_9::Integer) == 3)))) in (if _2515 then (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_11=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_12=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_11) (u (u list_cons " == ") (u (u list_cons _eq_rgt_12) list_nil))))))) else (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_11=(let _2516 = _func_10 in (if null (_2516::String) then bool_false else ((((fromIntegral (fromEnum (head _2516 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_12=(u (u string_join ",") _args_3) in (let _func_13=(let _2517 = _wrap_11 in (if _2517 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_10) (u (u list_cons ")") list_nil)))) else _func_10)) in (u string_flatten (u (u list_cons _func_13) (u (u list_cons "(") (u (u list_cons _args_12) (u (u list_cons ")") list_nil))))))))))))); (4,f) -> u f (\_2518 _2519-> (let _arity_6=(u list_length _args_3) in (let _2520 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _2520 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _2521 = _func_7 in (if null (_2521::String) then bool_false else ((((fromIntegral (fromEnum (head _2521 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _2522 = _wrap_8 in (if _2522 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (5,f) -> u f (\_2523 _2524-> (let _argm_6=(u (u fm_term_show_go _2524) (u fm_mpath_i _path_2)) in (u (u (u fm_term_show_app _2523) (u fm_mpath_o _path_2)) (u (u list_cons _argm_6) _args_3)))); (6,f) -> u f (\_2525 _2526 _2527-> (let _arity_7=(u list_length _args_3) in (let _2528 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _2528 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _2529 = _func_8 in (if null (_2529::String) then bool_false else ((((fromIntegral (fromEnum (head _2529 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _2530 = _wrap_9 in (if _2530 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (7,f) -> u f (\_2531 _2532 _2533-> (let _arity_7=(u list_length _args_3) in (let _2534 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _2534 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _2535 = _func_8 in (if null (_2535::String) then bool_false else ((((fromIntegral (fromEnum (head _2535 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _2536 = _wrap_9 in (if _2536 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (8,f) -> u f (\_2537 _2538 _2539-> (let _arity_7=(u list_length _args_3) in (let _2540 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _2540 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _2541 = _func_8 in (if null (_2541::String) then bool_false else ((((fromIntegral (fromEnum (head _2541 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _2542 = _wrap_9 in (if _2542 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (9,f) -> u f (\_2543 _2544 _2545-> (let _arity_7=(u list_length _args_3) in (let _2546 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _2546 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _2547 = _func_8 in (if null (_2547::String) then bool_false else ((((fromIntegral (fromEnum (head _2547 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _2548 = _wrap_9 in (if _2548 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (10,f) -> u f (\_2549-> (let _arity_5=(u list_length _args_3) in (let _2550 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _2550 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _2551 = _func_6 in (if null (_2551::String) then bool_false else ((((fromIntegral (fromEnum (head _2551 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _2552 = _wrap_7 in (if _2552 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (11,f) -> u f (\_2553-> (let _arity_5=(u list_length _args_3) in (let _2554 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _2554 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _2555 = _func_6 in (if null (_2555::String) then bool_false else ((((fromIntegral (fromEnum (head _2555 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _2556 = _wrap_7 in (if _2556 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (12,f) -> u f (\_2557-> (let _arity_5=(u list_length _args_3) in (let _2558 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _2558 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _2559 = _func_6 in (if null (_2559::String) then bool_false else ((((fromIntegral (fromEnum (head _2559 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _2560 = _wrap_7 in (if _2560 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (13,f) -> u f (\_2561-> (let _arity_5=(u list_length _args_3) in (let _2562 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _2562 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _2563 = _func_6 in (if null (_2563::String) then bool_false else ((((fromIntegral (fromEnum (head _2563 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _2564 = _wrap_7 in (if _2564 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (14,f) -> u f (\_2565 _2566 _2567 _2568 _2569 _2570-> (let _arity_10=(u list_length _args_3) in (let _2571 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_10::Integer) == 3)))) in (if _2571 then (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_12=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_13=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_12) (u (u list_cons " == ") (u (u list_cons _eq_rgt_13) list_nil))))))) else (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_12=(let _2572 = _func_11 in (if null (_2572::String) then bool_false else ((((fromIntegral (fromEnum (head _2572 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_13=(u (u string_join ",") _args_3) in (let _func_14=(let _2573 = _wrap_12 in (if _2573 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_11) (u (u list_cons ")") list_nil)))) else _func_11)) in (u string_flatten (u (u list_cons _func_14) (u (u list_cons "(") (u (u list_cons _args_13) (u (u list_cons ")") list_nil))))))))))))); (15,f) -> u f (\_2574 _2575-> (let _arity_6=(u list_length _args_3) in (let _2576 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _2576 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _2577 = _func_7 in (if null (_2577::String) then bool_false else ((((fromIntegral (fromEnum (head _2577 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _2578 = _wrap_8 in (if _2578 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); })))))
map_to_list_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _2579 = _xs_2 in (case _2579 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_2580 _2581 _2582-> (let _list0_8=(let _2583 = _2580 in (case _2583 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_2584-> (u (u list_cons (u (u pair_new (u bits_reverse _key_3)) _2584)) _list_4)); })) in (let _list1_9=(u (u (u map_to_list_go _2581) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_to_list_go _2582) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_to_list = (\_xs_2-> (u list_reverse (u (u (u map_to_list_go _xs_2) bits_e) list_nil)))
bits_chunks_of_go = (\_len_1-> (\_bits_2-> (\_need_3-> (\_chunk_4-> (let _2585 = _bits_2 in (case _2585 of {(0,f) -> u f ((u (u list_cons (u bits_reverse _chunk_4)) list_nil)); (1,f) -> u f (\_2586-> (let _2587 = _need_3 in (if _2587==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_o _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _2586) (_2587-1)) _chunk_7))))); (2,f) -> u f (\_2588-> (let _2589 = _need_3 in (if _2589==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_i _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _2588) (_2589-1)) _chunk_7))))); }))))))
bits_chunks_of = (\_len_1-> (\_bits_2-> (u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e)))
word_from_bits = (\_size_1-> (\_bits_2-> (let _2590 = _size_1 in (if _2590==0 then word_e else (let _2591 = _bits_2 in (case _2591 of {(0,f) -> u f ((u word_o (u (u word_from_bits (_2590-1)) bits_e))); (1,f) -> u f (\_2592-> (u word_o (u (u word_from_bits (_2590-1)) _2592))); (2,f) -> u f (\_2593-> (u word_i (u (u word_from_bits (_2590-1)) _2593))); }))))))
fm_name_from_bits = (\_bits_1-> (let _list_2=(u (u bits_chunks_of 6) _bits_1) in (let _name_3=(u (u (u list_fold _list_2) string_nil) (\_bts_3-> (\_name_4-> (let _u16_5=(u u16_new (u (u word_from_bits 16) (u bits_reverse _bts_3))) in (let _chr_6=(let _2594 = (u (u (u u16_btw 0) _u16_5) 25) in (if _2594 then (((_u16_5::Word16) + 65)) else (let _2595 = (u (u (u u16_btw 26) _u16_5) 51) in (if _2595 then (((_u16_5::Word16) + 71)) else (let _2596 = (u (u (u u16_btw 52) _u16_5) 61) in (if _2596 then (((_u16_5::Word16) - 4)) else (let _2597 = (((62::Word16) == _u16_5)) in (if _2597 then 46 else 95)))))))) in (u (u string_cons _chr_6) _name_4)))))) in _name_3)))
pair_fst = (\_pair_3-> (let _2598 = _pair_3 in (case _2598 of {(0,f) -> u f (\_2599 _2600-> _2599); })))
fm_term_show_go = (\_term_1-> (\_path_2-> (let _2601 = (u fm_term_show_as_nat _term_1) in (case _2601 of {(0,f) -> u f ((let _2602 = _term_1 in (case _2602 of {(0,f) -> u f (\_2603 _2604-> (u fm_name_show _2603)); (1,f) -> u f (\_2605-> (let _name_4=(u fm_name_show _2605) in (let _2606 = _path_2 in (case _2606 of {(0,f) -> u f (_name_4); (1,f) -> u f (\_2607-> (let _path_val_6=(u (u bits_concat (u fm_path_to_bits _2607)) (u bits_i bits_e)) in (let _path_str_7=(u nat_show (u bits_to_nat _path_val_6)) in (u string_flatten (u (u list_cons _name_4) (u (u list_cons (u (u fm_color "2") ((("-"::String) ++ _path_str_7)))) list_nil)))))); })))); (2,f) -> u f ("Type"); (3,f) -> u f (\_2608 _2609 _2610 _2611 _2612-> (let _eras_8=_2608 in (let _self_9=(u fm_name_show _2609) in (let _name_10=(u fm_name_show _2610) in (let _type_11=(u (u fm_term_show_go _2611) (u fm_mpath_o _path_2)) in (let _open_12=(let _2613 = _eras_8 in (if _2613 then "<" else "(")) in (let _clos_13=(let _2614 = _eras_8 in (if _2614 then ">" else ")")) in (let _body_14=(u (u fm_term_show_go (u (u _2612 (u (u fm_term_var _2609) 0)) (u (u fm_term_var _2610) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _self_9) (u (u list_cons _open_12) (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _type_11) (u (u list_cons _clos_13) (u (u list_cons " ") (u (u list_cons _body_14) list_nil))))))))))))))))); (4,f) -> u f (\_2615 _2616-> (let _name_5=(u fm_name_show _2615) in (let _body_6=(u (u fm_term_show_go (u _2616 (u (u fm_term_var _2615) 0))) (u fm_mpath_o _path_2)) in (u string_flatten (u (u list_cons "(") (u (u list_cons _name_5) (u (u list_cons ") ") (u (u list_cons _body_6) list_nil)))))))); (5,f) -> u f (\_2617 _2618-> (u (u (u fm_term_show_app _term_1) _path_2) list_nil)); (6,f) -> u f (\_2619 _2620 _2621-> (let _name_6=(u fm_name_show _2619) in (let _expr_7=(u (u fm_term_show_go _2620) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _2621 (u (u fm_term_var _2619) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "let ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (7,f) -> u f (\_2622 _2623 _2624-> (let _name_6=(u fm_name_show _2622) in (let _expr_7=(u (u fm_term_show_go _2623) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _2624 (u (u fm_term_var _2622) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "def ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (8,f) -> u f (\_2625 _2626 _2627-> (let _term_6=(u (u fm_term_show_go _2626) (u fm_mpath_o _path_2)) in (let _type_7=(u (u fm_term_show_go _2627) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _term_6) (u (u list_cons "::") (u (u list_cons _type_7) list_nil))))))); (9,f) -> u f (\_2628 _2629 _2630-> (let _name_6=(u fm_name_show _2628) in (u string_flatten (u (u list_cons "?") (u (u list_cons _name_6) list_nil))))); (10,f) -> u f (\_2631-> "_"); (11,f) -> u f (\_2632-> (u string_flatten (u (u list_cons (u nat_show _2632)) list_nil))); (12,f) -> u f (\_2633-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _2633)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_2634-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _2634)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_2635 _2636 _2637 _2638 _2639 _2640-> (let _expr_9=(u (u fm_term_show_go _2636) (u fm_mpath_o _path_2)) in (let _name_10=(u fm_name_show _2637) in (let _wyth_11=(u (u string_join "") (u (u list_mapped _2638) (\_defn_11-> (let _2641 = _defn_11 in (case _2641 of {(0,f) -> u f (\_2642 _2643 _2644 _2645 _2646 _2647-> (let _name_18=(u fm_name_show _2644) in (let _type_19=(u (u fm_term_show_go _2646) maybe_none) in (let _term_20=(u (u fm_term_show_go _2645) maybe_none) in (u string_flatten (u (u list_cons _name_18) (u (u list_cons ": ") (u (u list_cons _type_19) (u (u list_cons " = ") (u (u list_cons _term_20) (u (u list_cons ";") list_nil))))))))))); }))))) in (let _cses_12=(u map_to_list _2639) in (let _cses_13=(u (u string_join "") (u (u list_mapped _cses_12) (\_x_13-> (let _name_14=(u fm_name_from_bits (u pair_fst _x_13)) in (let _term_15=(u (u fm_term_show_go (u pair_snd _x_13)) maybe_none) in (u string_flatten (u (u list_cons _name_14) (u (u list_cons ": ") (u (u list_cons _term_15) (u (u list_cons "; ") list_nil)))))))))) in (let _moti_14=(let _2648 = _2640 in (case _2648 of {(0,f) -> u f (""); (1,f) -> u f (\_2649-> (u string_flatten (u (u list_cons ": ") (u (u list_cons (u (u fm_term_show_go _2649) maybe_none)) list_nil)))); })) in (u string_flatten (u (u list_cons "case ") (u (u list_cons _expr_9) (u (u list_cons " as ") (u (u list_cons _name_10) (u (u list_cons _wyth_11) (u (u list_cons " { ") (u (u list_cons _cses_13) (u (u list_cons "}") (u (u list_cons _moti_14) list_nil))))))))))))))))); (15,f) -> u f (\_2650 _2651-> (u (u fm_term_show_go _2651) _path_2)); }))); (1,f) -> u f (\_2652-> _2652); }))))
fm_term_show = (\_term_1-> (u (u fm_term_show_go _term_1) maybe_none))
fm_error_relevant = (\_errors_1-> (\_got_2-> (let _2653 = _errors_1 in (case _2653 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_2654 _2655-> (let _keep_5=(let _2656 = _2654 in (case _2656 of {(0,f) -> u f (\_2657 _2658 _2659 _2660-> ((not _got_2))); (1,f) -> u f (\_2661 _2662 _2663 _2664 _2665-> bool_true); (2,f) -> u f (\_2666-> bool_false); (3,f) -> u f (\_2667-> bool_false); (4,f) -> u f (\_2668 _2669-> bool_false); (5,f) -> u f (\_2670 _2671-> ((not _got_2))); (6,f) -> u f (\_2672 _2673 _2674-> ((not _got_2))); })) in (let _got_6=(let _2675 = _2654 in (case _2675 of {(0,f) -> u f (\_2676 _2677 _2678 _2679-> bool_true); (1,f) -> u f (\_2680 _2681 _2682 _2683 _2684-> _got_2); (2,f) -> u f (\_2685-> _got_2); (3,f) -> u f (\_2686-> _got_2); (4,f) -> u f (\_2687 _2688-> _got_2); (5,f) -> u f (\_2689 _2690-> bool_true); (6,f) -> u f (\_2691 _2692 _2693-> _got_2); })) in (let _tail_7=(u (u fm_error_relevant _2655) _got_6) in (let _2694 = _keep_5 in (if _2694 then (u (u list_cons _2654) _tail_7) else _tail_7)))))); }))))
fm_context_show = (\_context_1-> (let _2695 = _context_1 in (case _2695 of {(0,f) -> u f (""); (1,f) -> u f (\_2696 _2697-> (let _2698 = _2696 in (case _2698 of {(0,f) -> u f (\_2699 _2700-> (let _name_6=(u fm_name_show _2699) in (let _type_7=(u fm_term_show _2700) in (let _rest_8=(u fm_context_show _2697) in (u string_flatten (u (u list_cons _rest_8) (u (u list_cons "- ") (u (u list_cons _name_6) (u (u list_cons ": ") (u (u list_cons _type_7) (u (u list_cons "\n") list_nil))))))))))); }))); })))
fm_term_expand_at = (\_path_1-> (\_term_2-> (\_defs_3-> (u (u (u fm_term_patch_at _path_1) _term_2) (\_term_4-> (let _2701 = _term_4 in (case _2701 of {(0,f) -> u f (\_2702 _2703-> _term_4); (1,f) -> u f (\_2704-> (let _2705 = (u (u fm_get _2704) _defs_3) in (case _2705 of {(0,f) -> u f ((u fm_term_ref _2704)); (1,f) -> u f (\_2706-> (let _2707 = _2706 in (case _2707 of {(0,f) -> u f (\_2708 _2709 _2710 _2711 _2712 _2713-> _2711); }))); }))); (2,f) -> u f (_term_4); (3,f) -> u f (\_2714 _2715 _2716 _2717 _2718-> _term_4); (4,f) -> u f (\_2719 _2720-> _term_4); (5,f) -> u f (\_2721 _2722-> _term_4); (6,f) -> u f (\_2723 _2724 _2725-> _term_4); (7,f) -> u f (\_2726 _2727 _2728-> _term_4); (8,f) -> u f (\_2729 _2730 _2731-> _term_4); (9,f) -> u f (\_2732 _2733 _2734-> _term_4); (10,f) -> u f (\_2735-> _term_4); (11,f) -> u f (\_2736-> _term_4); (12,f) -> u f (\_2737-> _term_4); (13,f) -> u f (\_2738-> _term_4); (14,f) -> u f (\_2739 _2740 _2741 _2742 _2743 _2744-> _term_4); (15,f) -> u f (\_2745 _2746-> _term_4); })))))))
bool_or = (\a0-> \a1-> (a0 || a1))
fm_term_expand_ct = (\_term_1-> (\_defs_2-> (\_arity_3-> (let _2747 = _term_1 in (case _2747 of {(0,f) -> u f (\_2748 _2749-> (u (u fm_term_var _2748) _2749)); (1,f) -> u f (\_2750-> (let _expand_5=bool_false in (let _expand_6=(((((((_2750::String) == "Nat.succ")) && (((_arity_3::Integer) > 1)))) || _expand_5)) in (let _expand_7=(((((((_2750::String) == "Nat.zero")) && (((_arity_3::Integer) > 0)))) || _expand_6)) in (let _expand_8=(((((((_2750::String) == "Bool.true")) && (((_arity_3::Integer) > 0)))) || _expand_7)) in (let _expand_9=(((((((_2750::String) == "Bool.false")) && (((_arity_3::Integer) > 0)))) || _expand_8)) in (let _2751 = _expand_9 in (if _2751 then (let _2752 = (u (u fm_get _2750) _defs_2) in (case _2752 of {(0,f) -> u f ((u fm_term_ref _2750)); (1,f) -> u f (\_2753-> (let _2754 = _2753 in (case _2754 of {(0,f) -> u f (\_2755 _2756 _2757 _2758 _2759 _2760-> _2758); }))); })) else (u fm_term_ref _2750))))))))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_2761 _2762 _2763 _2764 _2765-> (u (u (u (u (u fm_term_all _2761) _2762) _2763) (u (u (u fm_term_expand_ct _2764) _defs_2) 0)) (\_s_9-> (\_x_10-> (u (u (u fm_term_expand_ct (u (u _2765 _s_9) _x_10)) _defs_2) 0))))); (4,f) -> u f (\_2766 _2767-> (u (u fm_term_lam _2766) (\_x_6-> (u (u (u fm_term_expand_ct (u _2767 _x_6)) _defs_2) 0)))); (5,f) -> u f (\_2768 _2769-> (u (u fm_term_app (u (u (u fm_term_expand_ct _2768) _defs_2) (u nat_succ _arity_3))) (u (u (u fm_term_expand_ct _2769) _defs_2) 0))); (6,f) -> u f (\_2770 _2771 _2772-> (u (u (u fm_term_let _2770) (u (u (u fm_term_expand_ct _2771) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _2772 _x_7)) _defs_2) 0)))); (7,f) -> u f (\_2773 _2774 _2775-> (u (u (u fm_term_def _2773) (u (u (u fm_term_expand_ct _2774) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _2775 _x_7)) _defs_2) 0)))); (8,f) -> u f (\_2776 _2777 _2778-> (u (u (u fm_term_ann _2776) (u (u (u fm_term_expand_ct _2777) _defs_2) 0)) (u (u (u fm_term_expand_ct _2778) _defs_2) 0))); (9,f) -> u f (\_2779 _2780 _2781-> (u (u (u fm_term_gol _2779) _2780) _2781)); (10,f) -> u f (\_2782-> (u fm_term_hol _2782)); (11,f) -> u f (\_2783-> (u fm_term_nat _2783)); (12,f) -> u f (\_2784-> (u fm_term_chr _2784)); (13,f) -> u f (\_2785-> (u fm_term_str _2785)); (14,f) -> u f (\_2786 _2787 _2788 _2789 _2790 _2791-> _term_1); (15,f) -> u f (\_2792 _2793-> (u (u fm_term_ori _2792) _2793)); })))))
fm_term_expand = (\_dref_1-> (\_term_2-> (\_defs_3-> (let _term_4=(u (u fm_term_normalize _term_2) map_new) in (let _term_5=(u (u (u list_for _dref_1) _term_4) (\_path_5-> (\_term_6-> (let _term_7=(u (u (u fm_term_expand_at _path_5) _term_6) _defs_3) in (let _term_8=(u (u fm_term_normalize _term_7) map_new) in (let _term_9=(u (u (u fm_term_expand_ct _term_8) _defs_3) 0) in (let _term_10=(u (u fm_term_normalize _term_9) map_new) in _term_10))))))) in _term_5)))))
fm_error_show = (\_error_1-> (\_defs_2-> (let _2794 = _error_1 in (case _2794 of {(0,f) -> u f (\_2795 _2796 _2797 _2798-> (let _expected_7=(let _2799 = _2796 in (case _2799 of {(0,f) -> u f (\_2800-> _2800); (1,f) -> u f (\_2801-> (u fm_term_show (u (u fm_term_normalize _2801) map_new))); })) in (let _detected_8=(let _2802 = _2797 in (case _2802 of {(0,f) -> u f (\_2803-> _2803); (1,f) -> u f (\_2804-> (u fm_term_show (u (u fm_term_normalize _2804) map_new))); })) in (u string_flatten (u (u list_cons "Type mismatch.\n") (u (u list_cons "- Expected: ") (u (u list_cons _expected_7) (u (u list_cons "\n") (u (u list_cons "- Detected: ") (u (u list_cons _detected_8) (u (u list_cons "\n") (u (u list_cons (let _2805 = _2798 in (case _2805 of {(0,f) -> u f (""); (1,f) -> u f (\_2806 _2807-> (u string_flatten (u (u list_cons "With context:\n") (u (u list_cons (u fm_context_show _2798)) list_nil)))); }))) list_nil)))))))))))); (1,f) -> u f (\_2808 _2809 _2810 _2811 _2812-> (let _goal_name_8=(u string_flatten (u (u list_cons "Goal ?") (u (u list_cons (u fm_name_show _2808)) (u (u list_cons ":\n") list_nil)))) in (let _with_type_9=(let _2813 = _2811 in (case _2813 of {(0,f) -> u f (""); (1,f) -> u f (\_2814-> (let _goal_10=(u (u (u fm_term_expand _2809) _2814) _defs_2) in (u string_flatten (u (u list_cons "With type: ") (u (u list_cons (let _2815 = _2810 in (if _2815 then (u (u fm_term_show_go _goal_10) (u maybe_some (\_x_11-> _x_11))) else (u fm_term_show _goal_10)))) (u (u list_cons "\n") list_nil)))))); })) in (let _with_ctxt_10=(let _2816 = _2812 in (case _2816 of {(0,f) -> u f (""); (1,f) -> u f (\_2817 _2818-> (u string_flatten (u (u list_cons "With ctxt:\n") (u (u list_cons (u fm_context_show _2812)) list_nil)))); })) in (u string_flatten (u (u list_cons _goal_name_8) (u (u list_cons _with_type_9) (u (u list_cons _with_ctxt_10) list_nil)))))))); (2,f) -> u f (\_2819-> (u string_flatten (u (u list_cons "Waiting for '") (u (u list_cons _2819) (u (u list_cons "'.") list_nil))))); (3,f) -> u f (\_2820-> (u string_flatten (u (u list_cons "Error on dependency '") (u (u list_cons _2820) (u (u list_cons "'.") list_nil))))); (4,f) -> u f (\_2821 _2822-> (u string_flatten (u (u list_cons "Patching: ") (u (u list_cons (u fm_term_show _2822)) list_nil)))); (5,f) -> u f (\_2823 _2824-> (u string_flatten (u (u list_cons "Undefined reference: ") (u (u list_cons (u fm_name_show _2824)) (u (u list_cons "\n") list_nil))))); (6,f) -> u f (\_2825 _2826 _2827-> (let _term_6=(u fm_term_show _2826) in (let _context_7=(u fm_context_show _2827) in (u string_flatten (u (u list_cons "Can't infer type of: ") (u (u list_cons _term_6) (u (u list_cons "\n") (u (u list_cons "With ctxt:\n") (u (u list_cons _context_7) list_nil))))))))); }))))
fm_error_origin = (\_error_1-> (let _2828 = _error_1 in (case _2828 of {(0,f) -> u f (\_2829 _2830 _2831 _2832-> _2829); (1,f) -> u f (\_2833 _2834 _2835 _2836 _2837-> maybe_none); (2,f) -> u f (\_2838-> maybe_none); (3,f) -> u f (\_2839-> maybe_none); (4,f) -> u f (\_2840 _2841-> maybe_none); (5,f) -> u f (\_2842 _2843-> _2842); (6,f) -> u f (\_2844 _2845 _2846-> _2844); })))
fm_defs_report_go = (\_defs_1-> (\_list_2-> (\_errs_3-> (\_typs_4-> (let _2847 = _list_2 in (case _2847 of {(0,f) -> u f ((u string_flatten (u (u list_cons _typs_4) (u (u list_cons "\n") (u (u list_cons (let _2848 = _errs_3 in (if null (_2848::String) then "All terms check." else _errs_3))) list_nil))))); (1,f) -> u f (\_2849 _2850-> (let _name_7=_2849 in (let _2851 = (u (u fm_get _name_7) _defs_1) in (case _2851 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_3) _typs_4)); (1,f) -> u f (\_2852-> (let _2853 = _2852 in (case _2853 of {(0,f) -> u f (\_2854 _2855 _2856 _2857 _2858 _2859-> (let _typs_15=(u string_flatten (u (u list_cons _typs_4) (u (u list_cons _name_7) (u (u list_cons ": ") (u (u list_cons (u fm_term_show _2858)) (u (u list_cons "\n") list_nil)))))) in (let _2860 = _2859 in (case _2860 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_3) _typs_15)); (1,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_3) _typs_15)); (2,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_3) _typs_15)); (3,f) -> u f (\_2861-> (let _2862 = _2861 in (case _2862 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_3) _typs_15)); (1,f) -> u f (\_2863 _2864-> (let _name_str_19=(u fm_name_show _2856) in (let _rel_errs_20=(u (u fm_error_relevant _2861) bool_false) in (let _rel_msgs_21=(u (u list_mapped _rel_errs_20) (\_err_21-> (u string_flatten (u (u list_cons (u (u fm_error_show _err_21) _defs_1)) (u (u list_cons (let _2865 = (u fm_error_origin _err_21) in (case _2865 of {(0,f) -> u f (""); (1,f) -> u f (\_2866-> (let _2867 = _2866 in (case _2867 of {(0,f) -> u f (\_2868 _2869 _2870-> (u string_flatten (u (u list_cons "Inside '") (u (u list_cons _2854) (u (u list_cons "':\n") (u (u list_cons (u (u (u fm_highlight _2855) _2869) _2870)) (u (u list_cons "\n") list_nil))))))); }))); }))) list_nil))))) in (let _errs_22=(u string_flatten (u (u list_cons _errs_3) (u (u list_cons (u (u string_join "\n") _rel_msgs_21)) (u (u list_cons "\n") list_nil)))) in (u (u (u (u fm_defs_report_go _defs_1) _2850) _errs_22) _typs_15)))))); }))); })))); }))); })))); }))))))
fm_defs_report = (\_defs_1-> (\_list_2-> (u (u (u (u fm_defs_report_go _defs_1) _list_2) "") "")))
fm_checker_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u io_print (u (u fm_defs_report _defs_2) (u (u list_cons _name_1) list_nil))))))
map_keys_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _2871 = _xs_2 in (case _2871 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_2872 _2873 _2874-> (let _list0_8=(let _2875 = _2872 in (case _2875 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_2876-> (u (u list_cons (u bits_reverse _key_3)) _list_4)); })) in (let _list1_9=(u (u (u map_keys_go _2873) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_keys_go _2874) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_keys = (\_xs_2-> (u list_reverse (u (u (u map_keys_go _xs_2) bits_e) list_nil)))
fm_synth_many = (\_names_1-> (\_defs_2-> (let _2877 = _names_1 in (case _2877 of {(0,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (1,f) -> u f (\_2878 _2879-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2878) _defs_2)) (\_defs_5-> (u (u fm_synth_many _2879) _defs_5)))); }))))
fm_synth_file = (\_file_1-> (\_defs_2-> (u (u (u monad_bind io_monad) (u io_get_file _file_1)) (\_code_3-> (let _read_4=(u (u (u fm_defs_read _file_1) _code_3) _defs_2) in (let _2880 = _read_4 in (case _2880 of {(0,f) -> u f (\_2881-> (u (u monad_pure io_monad) (u either_left _2881))); (1,f) -> u f (\_2882-> (let _file_defs_6=_2882 in (let _file_keys_7=(u map_keys _file_defs_6) in (let _file_nams_8=(u (u list_mapped _file_keys_7) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _file_nams_8) _file_defs_6)) (\_defs_9-> (u (u monad_pure io_monad) (u either_right (u (u pair_new _file_nams_8) _defs_9))))))))); })))))))
fm_checker_io_file = (\_file_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_file _file_1) map_new)) (\_loaded_2-> (let _2883 = _loaded_2 in (case _2883 of {(0,f) -> u f (\_2884-> (u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "On '") (u (u list_cons _file_1) (u (u list_cons "':") list_nil)))))) (\__4-> (u io_print _2884)))); (1,f) -> u f (\_2885-> (let _2886 = _2885 in (case _2886 of {(0,f) -> u f (\_2887 _2888-> (let _nams_6=_2887 in (let _defs_7=_2888 in (u io_print (u (u fm_defs_report _defs_7) _nams_6))))); }))); })))))
io_purify = (\_io_2-> (let _2889 = _io_2 in (case _2889 of {(0,f) -> u f (\_2890-> _2890); (1,f) -> u f (\_2891 _2892 _2893-> (u io_purify (u _2893 ""))); })))
fm_checker_code = (\_code_1-> (let _2894 = (u (u (u fm_defs_read "Main.fm") _code_1) map_new) in (case _2894 of {(0,f) -> u f (\_2895-> _2895); (1,f) -> u f (\_2896-> (u io_purify (let _defs_3=_2896 in (let _nams_4=(u (u list_mapped (u map_keys _defs_3)) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _nams_4) _defs_3)) (\_defs_5-> (u (u monad_pure io_monad) (u (u fm_defs_report _defs_5) _nams_4)))))))); })))
fm_term_read = (\_code_1-> (let _2897 = (u (u fm_parser_term 0) _code_1) in (case _2897 of {(0,f) -> u f (\_2898 _2899 _2900-> maybe_none); (1,f) -> u f (\_2901 _2902 _2903-> (u maybe_some _2903)); })))
fm = (let ___1=fm_to_core_io_one in (let ___2=fm_checker_io_one in (let ___3=fm_checker_io_file in (let ___4=fm_checker_code in (let ___5=fm_term_read in (u fm_checker_io_file "Main.fm"))))))

