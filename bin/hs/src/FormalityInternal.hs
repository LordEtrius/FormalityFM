module FormalityInternal where
import Unsafe.Coerce
import Data.Word
import Data.Bits
import Debug.Trace
u = unsafeCoerce
run p = case p of {
  (1,f) -> (u f (\query param cont-> case query of {
    "print"    -> do { putStrLn param; run (cont ()); };
    "get_line" -> do { line <- getLine; run (u cont line); };
    "get_file" -> do { line <- readFile param; run (u cont line); };
    otherwise  -> do { u cont (); };
  }));
  (0,f) -> (u f (\value-> do { (return :: a -> IO a) value; }));
}
word_to_u16       w        = u word_to_u16_go 0 w 0
word_to_u16_go 16 w      x = u x
word_to_u16_go  i (0,f)  x = u word_to_u16_go (i+1) (0,\t-> t) (x::Word16)
word_to_u16_go  i (1,f)  x = u f (\w-> word_to_u16_go (i+1) w x)
word_to_u16_go  i (2,f)  x = u f (\w-> word_to_u16_go (i+1) w (x .|. (shiftL 1 i)))
u16_to_word       x        = u u16_to_word_go 0 x (0,\t-> t)
u16_to_word_go 16 x      w = u w
u16_to_word_go  i x      w = u u16_to_word_go (i+1) (x::Word16) (if (shiftR x (16-i-1) .&. 1) > 0 then (2,\t-> t w) else (1,\t-> t w))
monad_bind = (\_m_2-> (let _0 = _m_2 in (case _0 of {(0,f) -> u f (\_1 _2-> _1); })))
io = (\_a_1-> ())
monad_new = (\_bind_2-> (\_pure_3-> (0,\t-> t _bind_2 _pure_3)))
io_ask = (\_query_2-> (\_param_3-> (\_then_4-> (1,\t-> t _query_2 _param_3 _then_4))))
io_bind = (\_a_3-> (\_f_4-> (let _3 = _a_3 in (case _3 of {(0,f) -> u f (\_4-> (u _f_4 _4)); (1,f) -> u f (\_5 _6 _7-> (u (u (u io_ask _5) _6) (\_x_8-> (u (u io_bind (u _7 _x_8)) _f_4)))); }))))
io_end = (\_value_2-> (0,\t-> t _value_2))
io_monad = (u (u monad_new io_bind) io_end)
map = (\_a_1-> ())
maybe = (\_a_1-> ())
maybe_none = (0,\t-> t)
map_get = (\_bits_2-> (\_map_3-> (let _8 = _bits_2 in (case _8 of {(0,f) -> u f ((let _9 = _map_3 in (case _9 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_10 _11 _12-> _10); }))); (1,f) -> u f (\_13-> (let _14 = _map_3 in (case _14 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_15 _16 _17-> (u (u map_get _13) _16)); }))); (2,f) -> u f (\_18-> (let _19 = _map_3 in (case _19 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_20 _21 _22-> (u (u map_get _18) _22)); }))); }))))
bits_e = (0,\t-> t)
bool_false = False
bool_and = (\a0-> \a1-> (a0 && a1))
bool_true = True
cmp_as_lte = (\_cmp_1-> (let _23 = _cmp_1 in (case _23 of {(0,f) -> u f (bool_true); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
cmp_ltn = (0,\t-> t)
cmp_gtn = (2,\t-> t)
word_cmp_go = (\_a_2-> (\_b_3-> (\_c_4-> (let _24 = _a_2 in (case _24 of {(0,f) -> u f ((\_b_5-> _c_4)); (1,f) -> u f (\_25-> (\_b_7-> (let _26 = _b_7 in (case _26 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_27-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _27) _c_4))); (2,f) -> u f (\_28-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _28) cmp_ltn))); })) _25)); (2,f) -> u f (\_29-> (\_b_7-> (let _30 = _b_7 in (case _30 of {(0,f) -> u f ((\_a_pred_8-> _c_4)); (1,f) -> u f (\_31-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _31) cmp_gtn))); (2,f) -> u f (\_32-> (\_a_pred_10-> (u (u (u word_cmp_go _a_pred_10) _32) _c_4))); })) _29)); })) _b_3)))
cmp_eql = (1,\t-> t)
word_cmp = (\_a_2-> (\_b_3-> (u (u (u word_cmp_go _a_2) _b_3) cmp_eql)))
word_lte = (\_a_2-> (\_b_3-> (u cmp_as_lte (u (u word_cmp _a_2) _b_3))))
nat_succ = (\_pred_1-> 1+_pred_1)
nat_zero = 0
u16_lte = (\a0-> \a1-> ((a0::Word16) <= a1))
u16_btw = (\_a_1-> (\_b_2-> (\_c_3-> (((((_a_1::Word16) <= _b_2)) && (((_b_2::Word16) <= _c_3)))))))
u16_new = (\_value_1-> (word_to_u16 _value_1))
word_e = (0,\t-> t)
word = (\_size_1-> ())
word_i = (\_pred_2-> (2,\t-> t _pred_2))
word_o = (\_pred_2-> (1,\t-> t _pred_2))
word_subber = (\_a_2-> (\_b_3-> (\_c_4-> (let _33 = _a_2 in (case _33 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_34-> (\_b_7-> (let _35 = _b_7 in (case _35 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_36-> (\_a_pred_10-> (let _37 = _c_4 in (if _37 then (u word_i (u (u (u word_subber _a_pred_10) _36) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _36) bool_false)))))); (2,f) -> u f (\_38-> (\_a_pred_10-> (let _39 = _c_4 in (if _39 then (u word_o (u (u (u word_subber _a_pred_10) _38) bool_true)) else (u word_i (u (u (u word_subber _a_pred_10) _38) bool_true)))))); })) _34)); (2,f) -> u f (\_40-> (\_b_7-> (let _41 = _b_7 in (case _41 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_42-> (\_a_pred_10-> (let _43 = _c_4 in (if _43 then (u word_o (u (u (u word_subber _a_pred_10) _42) bool_false)) else (u word_i (u (u (u word_subber _a_pred_10) _42) bool_false)))))); (2,f) -> u f (\_44-> (\_a_pred_10-> (let _45 = _c_4 in (if _45 then (u word_i (u (u (u word_subber _a_pred_10) _44) bool_true)) else (u word_o (u (u (u word_subber _a_pred_10) _44) bool_false)))))); })) _40)); })) _b_3)))
word_sub = (\_a_2-> (\_b_3-> (u (u (u word_subber _a_2) _b_3) bool_false)))
u16_sub = (\a0-> \a1-> ((a0::Word16) - a1))
nat_apply = (\_n_2-> (\_f_3-> (\_x_4-> (let _46 = _n_2 in (if _46==0 then _x_4 else (u (u (u nat_apply (_46-1)) _f_3) (u _f_3 _x_4)))))))
word_inc = (\_word_2-> (let _47 = _word_2 in (case _47 of {(0,f) -> u f (word_e); (1,f) -> u f (\_48-> (u word_i _48)); (2,f) -> u f (\_49-> (u word_o (u word_inc _49))); })))
u16_inc = (\_a_1-> (let _50 = _a_1 in (u u16_new (u word_inc (u16_to_word _50)))))
word_zero = (\_size_1-> (let _51 = _size_1 in (if _51==0 then word_e else (u word_o (u word_zero (_51-1))))))
u16_zero = (u u16_new (u word_zero 16))
nat_to_u16 = (\a0-> (fromIntegral (a0::Integer)))
word_adder = (\_a_2-> (\_b_3-> (\_c_4-> (let _52 = _a_2 in (case _52 of {(0,f) -> u f ((\_b_5-> word_e)); (1,f) -> u f (\_53-> (\_b_7-> (let _54 = _b_7 in (case _54 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_55-> (\_a_pred_10-> (let _56 = _c_4 in (if _56 then (u word_i (u (u (u word_adder _a_pred_10) _55) bool_false)) else (u word_o (u (u (u word_adder _a_pred_10) _55) bool_false)))))); (2,f) -> u f (\_57-> (\_a_pred_10-> (let _58 = _c_4 in (if _58 then (u word_o (u (u (u word_adder _a_pred_10) _57) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _57) bool_false)))))); })) _53)); (2,f) -> u f (\_59-> (\_b_7-> (let _60 = _b_7 in (case _60 of {(0,f) -> u f ((\_a_pred_8-> word_e)); (1,f) -> u f (\_61-> (\_a_pred_10-> (let _62 = _c_4 in (if _62 then (u word_o (u (u (u word_adder _a_pred_10) _61) bool_true)) else (u word_i (u (u (u word_adder _a_pred_10) _61) bool_false)))))); (2,f) -> u f (\_63-> (\_a_pred_10-> (let _64 = _c_4 in (if _64 then (u word_i (u (u (u word_adder _a_pred_10) _63) bool_true)) else (u word_o (u (u (u word_adder _a_pred_10) _63) bool_true)))))); })) _59)); })) _b_3)))
word_add = (\_a_2-> (\_b_3-> (u (u (u word_adder _a_2) _b_3) bool_false)))
u16_add = (\a0-> \a1-> ((a0::Word16) + a1))
cmp_as_eql = (\_cmp_1-> (let _65 = _cmp_1 in (case _65 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_true); (2,f) -> u f (bool_false); })))
word_eql = (\_a_2-> (\_b_3-> (u cmp_as_eql (u (u word_cmp _a_2) _b_3))))
u16_eql = (\a0-> \a1-> ((a0::Word16) == a1))
bits_o = (\_pred_1-> (1,\t-> t _pred_1))
bits_i = (\_pred_1-> (2,\t-> t _pred_1))
word_to_bits = (\_a_2-> (let _66 = _a_2 in (case _66 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_67-> (u bits_o (u word_to_bits _67))); (2,f) -> u f (\_68-> (u bits_i (u word_to_bits _68))); })))
word_trim = (\_new_size_2-> (\_word_3-> (let _69 = _new_size_2 in (if _69==0 then word_e else (let _70 = _word_3 in (case _70 of {(0,f) -> u f ((u word_o (u (u word_trim (_69-1)) word_e))); (1,f) -> u f (\_71-> (u word_o (u (u word_trim (_69-1)) _71))); (2,f) -> u f (\_72-> (u word_i (u (u word_trim (_69-1)) _72))); }))))))
bits_concat = (\_a_1-> (\_b_2-> (let _73 = _a_1 in (case _73 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_74-> (u bits_o (u (u bits_concat _74) _b_2))); (2,f) -> u f (\_75-> (u bits_i (u (u bits_concat _75) _b_2))); }))))
bits_reverse_tco = (\_a_1-> (\_r_2-> (let _76 = _a_1 in (case _76 of {(0,f) -> u f (_r_2); (1,f) -> u f (\_77-> (u (u bits_reverse_tco _77) (u bits_o _r_2))); (2,f) -> u f (\_78-> (u (u bits_reverse_tco _78) (u bits_i _r_2))); }))))
bits_reverse = (\_a_1-> (u (u bits_reverse_tco _a_1) bits_e))
fm_name_to_bits = (\_name_1-> (let _79 = _name_1 in (if null (_79::String) then bits_e else (let _chr_4=(fromIntegral (fromEnum (head _79 :: Char)) :: Word16) in (let _u16_5=(let _80 = (u (u (u u16_btw 65) _chr_4) 90) in (if _80 then (((_chr_4::Word16) - 65)) else (let _81 = (u (u (u u16_btw 97) _chr_4) 122) in (if _81 then (((_chr_4::Word16) - 71)) else (let _82 = (u (u (u u16_btw 48) _chr_4) 57) in (if _82 then (((_chr_4::Word16) + 4)) else (let _83 = (((46::Word16) == _chr_4)) in (if _83 then 62 else (let _84 = (((95::Word16) == _chr_4)) in (if _84 then 63 else 0)))))))))) in (let _bts_6=(let _85 = _u16_5 in (u word_to_bits (u (u word_trim 6) (u16_to_word _85)))) in (u (u bits_concat (u bits_reverse _bts_6)) (u fm_name_to_bits (tail _79)))))))))
fm_get = (\_name_2-> (\_map_3-> (u (u map_get (u fm_name_to_bits _name_2)) _map_3)))
string_cons = (\_head_1-> (\_tail_2-> ((toEnum (fromIntegral _head_1 :: Int) :: Char) : _tail_2)))
fm_synth_file_of = (\_name_1-> (let _86 = _name_1 in (if null (_86::String) then ".fm" else (let _87 = ((((fromIntegral (fromEnum (head _86 :: Char)) :: Word16)::Word16) == 46)) in (if _87 then ".fm" else (u (u string_cons (fromIntegral (fromEnum (head _86 :: Char)) :: Word16)) (u fm_synth_file_of (tail _86))))))))
io_get_file = (\_name_1-> (u (u (u io_ask "get_file") _name_1) (\_file_2-> (u io_end _file_2))))
parser = (\_v_1-> ())
parser_reply = (\_v_1-> ())
parser_reply_error = (\_idx_2-> (\_code_3-> (\_err_4-> (0,\t-> t _idx_2 _code_3 _err_4))))
parser_bind = (\_parse_3-> (\_next_4-> (\_idx_5-> (\_code_6-> (let _88 = (u (u _parse_3 _idx_5) _code_6) in (case _88 of {(0,f) -> u f (\_89 _90 _91-> (u (u (u parser_reply_error _89) _90) _91)); (1,f) -> u f (\_92 _93 _94-> (u (u (u _next_4 _94) _92) _93)); }))))))
parser_reply_value = (\_idx_2-> (\_code_3-> (\_val_4-> (1,\t-> t _idx_2 _code_3 _val_4))))
parser_pure = (\_value_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_value _idx_3) _code_4) _value_2))))
parser_monad = (u (u monad_new parser_bind) parser_pure)
parser_is_eof = (\_idx_1-> (\_code_2-> (let _95 = _code_2 in (if null (_95::String) then (u (u (u parser_reply_value _idx_1) _code_2) bool_true) else (u (u (u parser_reply_value _idx_1) _code_2) bool_false)))))
monad_pure = (\_m_2-> (let _96 = _m_2 in (case _96 of {(0,f) -> u f (\_97 _98-> _98); })))
maybe_some = (\_value_2-> (1,\t-> t _value_2))
parser_errorat_new = (\_idx_1-> (\_code_2-> (\_err_3-> (0,\t-> t _idx_1 _code_2 _err_3))))
cmp_as_gtn = (\_cmp_1-> (let _99 = _cmp_1 in (case _99 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_false); (2,f) -> u f (bool_true); })))
nat_cmp = (\_a_1-> (\_b_2-> (let _100 = _a_1 in (if _100==0 then (let _101 = _b_2 in (if _101==0 then cmp_eql else cmp_ltn)) else (let _102 = _b_2 in (if _102==0 then cmp_gtn else (u (u nat_cmp (_100-1)) (_102-1))))))))
nat_gtn = (\a0-> \a1-> ((a0::Integer) > a1))
parser_errorat_combine = (\_a_1-> (\_b_2-> (let _103 = _a_1 in (case _103 of {(0,f) -> u f (_b_2); (1,f) -> u f (\_104-> (let _105 = _b_2 in (case _105 of {(0,f) -> u f (_a_1); (1,f) -> u f (\_106-> (let _107 = _104 in (case _107 of {(0,f) -> u f (\_108 _109 _110-> (let _111 = _106 in (case _111 of {(0,f) -> u f (\_112 _113 _114-> (let _115 = (((_108::Integer) > _112)) in (if _115 then _a_1 else _b_2))); }))); }))); }))); }))))
parser_first_of_go = (\_pars_2-> (\_err_3-> (\_idx_4-> (\_code_5-> (let _116 = _pars_2 in (case _116 of {(0,f) -> u f ((let _117 = _err_3 in (case _117 of {(0,f) -> u f ((u (u (u parser_reply_error _idx_4) _code_5) "No parse.")); (1,f) -> u f (\_118-> (let _119 = _118 in (case _119 of {(0,f) -> u f (\_120 _121 _122-> (u (u (u parser_reply_error _120) _121) _122)); }))); }))); (1,f) -> u f (\_123 _124-> (let _parsed_8=(u (u _123 _idx_4) _code_5) in (let _125 = _parsed_8 in (case _125 of {(0,f) -> u f (\_126 _127 _128-> (let _neo_12=(u maybe_some (u (u (u parser_errorat_new _126) _127) _128)) in (let _err_13=(u (u parser_errorat_combine _neo_12) _err_3) in (u (u (u (u parser_first_of_go _124) _err_13) _idx_4) _code_5)))); (1,f) -> u f (\_129 _130 _131-> (u (u (u parser_reply_value _129) _130) _131)); })))); }))))))
parser_first_of = (\_pars_2-> (u (u parser_first_of_go _pars_2) maybe_none))
list_cons = (\_head_2-> (\_tail_3-> (1,\t-> t _head_2 _tail_3)))
list = (\_a_1-> ())
list_nil = (0,\t-> t)
parser_many_go = (\_parse_2-> (\_values_3-> (\_idx_4-> (\_code_5-> (let _132 = (u (u _parse_2 _idx_4) _code_5) in (case _132 of {(0,f) -> u f (\_133 _134 _135-> (u (u (u parser_reply_value _idx_4) _code_5) (u _values_3 list_nil))); (1,f) -> u f (\_136 _137 _138-> (u (u (u (u parser_many_go _parse_2) (\_xs_9-> (u _values_3 (u (u list_cons _138) _xs_9)))) _136) _137)); }))))))
parser_many = (\_parser_2-> (u (u parser_many_go _parser_2) (\_x_3-> _x_3)))
unit_new = ()
string_concat = (\a0-> \a1-> ((a0::String) ++ a1))
string_flatten_go = (\_xs_1-> (\_res_2-> (let _139 = _xs_1 in (case _139 of {(0,f) -> u f (_res_2); (1,f) -> u f (\_140 _141-> (u (u string_flatten_go _141) (((_res_2::String) ++ _140)))); }))))
string_flatten = (\_xs_1-> (u (u string_flatten_go _xs_1) ""))
string_nil = []
parser_text_go = (\_text_1-> (\_idx_2-> (\_code_3-> (let _142 = _text_1 in (if null (_142::String) then (u (u (u parser_reply_value _idx_2) _code_3) unit_new) else (let _143 = _code_3 in (if null (_143::String) then (let _error_6=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found end of file.") list_nil)))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_6)) else (let _144 = ((((fromIntegral (fromEnum (head _142 :: Char)) :: Word16)::Word16) == (fromIntegral (fromEnum (head _143 :: Char)) :: Word16))) in (if _144 then (u (u (u parser_text (tail _142)) (u nat_succ _idx_2)) (tail _143)) else (let _error_8=(u string_flatten (u (u list_cons "Expected '") (u (u list_cons _text_1) (u (u list_cons "', found '") (u (u list_cons (u (u string_cons (fromIntegral (fromEnum (head _143 :: Char)) :: Word16)) string_nil)) (u (u list_cons "'.") list_nil)))))) in (u (u (u parser_reply_error _idx_2) _code_3) _error_8)))))))))))
parser_text = (\_text_1-> (\_idx_2-> (\_code_3-> (let _145 = (u (u (u parser_text_go _text_1) _idx_2) _code_3) in (case _145 of {(0,f) -> u f (\_146 _147 _148-> (u (u (u parser_reply_error _idx_2) _code_3) _148)); (1,f) -> u f (\_149 _150 _151-> (u (u (u parser_reply_value _149) _150) _151)); })))))
parser_until_go = (\_until_2-> (\_parse_3-> (\_values_4-> (\_idx_5-> (\_code_6-> (let _until_reply_7=(u (u _until_2 _idx_5) _code_6) in (let _152 = _until_reply_7 in (case _152 of {(0,f) -> u f (\_153 _154 _155-> (let _reply_11=(u (u _parse_3 _idx_5) _code_6) in (let _156 = _reply_11 in (case _156 of {(0,f) -> u f (\_157 _158 _159-> (u (u (u parser_reply_error _157) _158) _159)); (1,f) -> u f (\_160 _161 _162-> (u (u (u (u (u parser_until_go _until_2) _parse_3) (\_xs_15-> (u _values_4 (u (u list_cons _162) _xs_15)))) _160) _161)); })))); (1,f) -> u f (\_163 _164 _165-> (u (u (u parser_reply_value _163) _164) (u _values_4 list_nil))); }))))))))
parser_until = (\_until_2-> (\_parse_3-> (u (u (u parser_until_go _until_2) _parse_3) (\_x_4-> _x_4))))
parser_one = (\_idx_1-> (\_code_2-> (let _166 = _code_2 in (if null (_166::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected end of file.") else (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _166)) (fromIntegral (fromEnum (head _166 :: Char)) :: Word16))))))
fm_parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_text "//")) (\__1-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text "\n")) parser_one)) (\__2-> (u (u monad_pure parser_monad) unit_new)))))) list_nil)))))
fm_parser_text = (\_text_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u parser_text _text_1))))
parser_many1 = (\_parser_2-> (u (u (u monad_bind parser_monad) _parser_2) (\_head_3-> (u (u (u monad_bind parser_monad) (u parser_many _parser_2)) (\_tail_4-> (u (u monad_pure parser_monad) (u (u list_cons _head_3) _tail_4)))))))
fm_name_is_letter = (\_chr_1-> (let _167 = (u (u (u u16_btw 65) _chr_1) 90) in (if _167 then bool_true else (let _168 = (u (u (u u16_btw 97) _chr_1) 122) in (if _168 then bool_true else (let _169 = (u (u (u u16_btw 48) _chr_1) 57) in (if _169 then bool_true else (let _170 = (((46::Word16) == _chr_1)) in (if _170 then bool_true else (let _171 = (((95::Word16) == _chr_1)) in (if _171 then bool_true else bool_false)))))))))))
fm_parser_letter = (\_idx_1-> (\_code_2-> (let _172 = _code_2 in (if null (_172::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Unexpected eof.") else (let _173 = (u fm_name_is_letter (fromIntegral (fromEnum (head _172 :: Char)) :: Word16)) in (if _173 then (u (u (u parser_reply_value (u nat_succ _idx_1)) (tail _172)) (fromIntegral (fromEnum (head _172 :: Char)) :: Word16)) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected letter.")))))))
list_fold = (\_list_2-> (\_nil_4-> (\_cons_5-> (let _174 = _list_2 in (case _174 of {(0,f) -> u f (_nil_4); (1,f) -> u f (\_175 _176-> (u (u _cons_5 _175) (u (u (u list_fold _176) _nil_4) _cons_5))); })))))
fm_parser_name1 = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many1 fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
pair = (\_a_1-> (\_b_2-> ()))
parser_until1 = (\_cond_2-> (\_parser_3-> (u (u (u monad_bind parser_monad) _parser_3) (\_head_4-> (u (u (u monad_bind parser_monad) (u (u parser_until _cond_2) _parser_3)) (\_tail_5-> (u (u monad_pure parser_monad) (u (u list_cons _head_4) _tail_5))))))))
parser_maybe = (\_parse_2-> (\_idx_3-> (\_code_4-> (let _177 = (u (u _parse_2 _idx_3) _code_4) in (case _177 of {(0,f) -> u f (\_178 _179 _180-> (u (u (u parser_reply_value _idx_3) _code_4) maybe_none)); (1,f) -> u f (\_181 _182 _183-> (u (u (u parser_reply_value _181) _182) (u maybe_some _183))); })))))
fm_parser_item = (\_parser_2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) _parser_2) (\_value_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__5-> (u (u monad_pure parser_monad) _value_4))))))))
fm_parser_name = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_letter)) (\_chrs_2-> (u (u monad_pure parser_monad) (u (u (u list_fold _chrs_2) string_nil) string_cons))))))
parser_get_code = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _code_2)))
parser_get_index = (\_idx_1-> (\_code_2-> (u (u (u parser_reply_value _idx_1) _code_2) _idx_1)))
fm_parser_init = (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_from_2-> (u (u monad_pure parser_monad) _from_2)))))
fm_origin_new = (\_file_1-> (\_from_2-> (\_upto_3-> (0,\t-> t _file_1 _from_2 _upto_3))))
fm_parser_stop = (\_from_1-> (u (u (u monad_bind parser_monad) parser_get_index) (\_upto_2-> (let _orig_3=(u (u (u fm_origin_new "") _from_1) _upto_2) in (u (u monad_pure parser_monad) _orig_3)))))
fm_term_ori = (\_orig_1-> (\_expr_2-> (15,\t-> t _orig_1 _expr_2)))
fm_term_typ = (2,\t-> t)
fm_parser_type = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "Type")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) fm_term_typ))))))))
fm_term_all = (\_eras_1-> (\_self_2-> (\_name_3-> (\_xtyp_4-> (\_body_5-> (3,\t-> t _eras_1 _self_2 _name_3 _xtyp_4 _body_5))))))
fm_parser_forall = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_self_2-> (u (u (u monad_bind parser_monad) fm_parser_binder) (\_bind_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text "->"))) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_5-> (let _term_6=(u (u (u list_fold _bind_3) _body_5) (\_x_6-> (\_t_7-> (let _184 = _x_6 in (case _184 of {(0,f) -> u f (\_185 _186 _187-> (u (u (u (u (u fm_term_all _185) "") _186) _187) (\_s_11-> (\_x_12-> _t_7)))); }))))) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (u (u monad_pure parser_monad) (let _188 = _term_6 in (case _188 of {(0,f) -> u f (\_189 _190-> _term_6); (1,f) -> u f (\_191-> _term_6); (2,f) -> u f (_term_6); (3,f) -> u f (\_192 _193 _194 _195 _196-> (u (u fm_term_ori _orig_7) (u (u (u (u (u fm_term_all _192) _self_2) _194) _195) _196))); (4,f) -> u f (\_197 _198-> _term_6); (5,f) -> u f (\_199 _200-> _term_6); (6,f) -> u f (\_201 _202 _203-> _term_6); (7,f) -> u f (\_204 _205 _206-> _term_6); (8,f) -> u f (\_207 _208 _209-> _term_6); (9,f) -> u f (\_210 _211 _212-> _term_6); (10,f) -> u f (\_213-> _term_6); (11,f) -> u f (\_214-> _term_6); (12,f) -> u f (\_215-> _term_6); (13,f) -> u f (\_216-> _term_6); (14,f) -> u f (\_217 _218 _219 _220 _221 _222-> _term_6); (15,f) -> u f (\_223 _224-> _term_6); }))))))))))))))))
fm_term_lam = (\_name_1-> (\_body_2-> (4,\t-> t _name_1 _body_2)))
fm_parser_make_lambda = (\_names_1-> (\_body_2-> (let _225 = _names_1 in (case _225 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_226 _227-> (u (u fm_term_lam _226) (\_x_5-> (u (u fm_parser_make_lambda _227) _body_2)))); }))))
fm_parser_lambda = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_erased = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "<")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ">")) (u fm_parser_item fm_parser_name1))) (\_name_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u fm_parser_make_lambda _name_3) _body_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))))
fm_parser_lambda_nameless = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "()")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (let _expr_5=(u (u fm_term_lam "") (\_x_5-> _body_3)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) _expr_5)))))))))))
fm_parser_parenthesis = (u (u (u monad_bind parser_monad) (u fm_parser_text "(")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__3-> (u (u monad_pure parser_monad) _term_2)))))))
fm_term_ref = (\_name_1-> (1,\t-> t _name_1))
fm_term_app = (\_func_1-> (\_argm_2-> (5,\t-> t _func_1 _argm_2)))
fm_term_hol = (\_path_1-> (10,\t-> t _path_1))
fm_term_let = (\_name_1-> (\_expr_2-> (\_body_3-> (6,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_letforin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_8-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__9-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_10-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_12-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_13-> (let _term_14=(u fm_term_ref "List.for") in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_hol bits_e)) in (let _term_16=(u (u fm_term_app _term_15) _list_8) in (let _term_17=(u (u fm_term_app _term_16) (u fm_term_hol bits_e)) in (let _term_18=(u (u fm_term_app _term_17) (u fm_term_ref _name_3)) in (let _lamb_19=(u (u fm_term_lam _elem_6) (\_i_19-> (u (u fm_term_lam _name_3) (\_x_20-> _loop_10)))) in (let _term_20=(u (u fm_term_app _term_18) _lamb_19) in (let _term_21=(u (u (u fm_term_let _name_3) _term_20) (\_x_21-> _body_12)) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_13) _term_21))))))))))))))))))))))))))))))))))))
fm_parser_let = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_let _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_parser_get = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_nam0_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_nam1_6-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_9-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__10-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (let _term_13=_expr_9 in (let _term_14=(u (u fm_term_app _term_13) (u (u fm_term_lam "x") (\_x_14-> (u fm_term_hol bits_e)))) in (let _term_15=(u (u fm_term_app _term_14) (u (u fm_term_lam _nam0_4) (\_x_15-> (u (u fm_term_lam _nam1_6) (\_y_16-> _body_11))))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) _term_15)))))))))))))))))))))))))))))
fm_term_def = (\_name_1-> (\_expr_2-> (\_body_3-> (7,\t-> t _name_1 _expr_2 _body_3))))
fm_parser_def = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "def ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) (u (u (u fm_term_def _name_3) _expr_5) (\_x_9-> _body_7))))))))))))))))))))
fm_parser_if = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "if ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_cond_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "then")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_tcse_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "else")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_fcse_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (let _term_9=_cond_3 in (let _term_10=(u (u fm_term_app _term_9) (u (u fm_term_lam "") (\_x_10-> (u fm_term_hol bits_e)))) in (let _term_11=(u (u fm_term_app _term_10) _tcse_5) in (let _term_12=(u (u fm_term_app _term_11) _fcse_7) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) _term_12))))))))))))))))))))))
list_mapped = (\_as_2-> (\_f_4-> (let _228 = _as_2 in (case _228 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_229 _230-> (u (u list_cons (u _f_4 _229)) (u (u list_mapped _230) _f_4))); }))))
pair_new = (\_fst_3-> (\_snd_4-> (0,\t-> t _fst_3 _snd_4)))
fm_backslash = 92
fm_escapes = (u (u list_cons (u (u pair_new "\\b") 8)) (u (u list_cons (u (u pair_new "\\f") 12)) (u (u list_cons (u (u pair_new "\\n") 10)) (u (u list_cons (u (u pair_new "\\r") 13)) (u (u list_cons (u (u pair_new "\\t") 9)) (u (u list_cons (u (u pair_new "\\v") 11)) (u (u list_cons (u (u pair_new (u (u string_cons fm_backslash) (u (u string_cons fm_backslash) string_nil))) fm_backslash)) (u (u list_cons (u (u pair_new "\\\"") 34)) (u (u list_cons (u (u pair_new "\\0") 0)) (u (u list_cons (u (u pair_new "\\'") 39)) list_nil))))))))))
fm_parser_char_single = (u parser_first_of (u (u list_cons (u parser_first_of (u (u list_mapped fm_escapes) (\_esc_1-> (let _231 = _esc_1 in (case _231 of {(0,f) -> u f (\_232 _233-> (u (u (u monad_bind parser_monad) (u parser_text _232)) (\__4-> (u (u monad_pure parser_monad) _233)))); })))))) (u (u list_cons parser_one) list_nil)))
fm_term_chr = (\_chrx_1-> (12,\t-> t _chrx_1))
fm_parser_char = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "'")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_char_single) (\_chrx_3-> (u (u (u monad_bind parser_monad) (u parser_text "'")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u fm_term_chr _chrx_3)))))))))))))
fm_term_str = (\_strx_1-> (13,\t-> t _strx_1))
fm_parser_string = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (let _quot_2=(u (u string_cons 34) string_nil) in (u (u (u monad_bind parser_monad) (u fm_parser_text _quot_2)) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until (u parser_text _quot_2)) fm_parser_char_single)) (\_chrs_4-> (let _strx_5=(u (u (u list_fold _chrs_4) string_nil) string_cons) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u fm_term_str _strx_5)))))))))))))
fm_parser_pair = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val0_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (let _term_8=(u fm_term_ref "Pair.new") in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _val0_3) in (let _term_12=(u (u fm_term_app _term_11) _val1_5) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_12)))))))))))))))))))))
fm_parser_sigma_type = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_typ0_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_typ1_7-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_8-> (let _term_9=(u fm_term_ref "Sigma") in (let _term_10=(u (u fm_term_app _term_9) _typ0_5) in (let _term_11=(u (u fm_term_app _term_10) (u (u fm_term_lam "x") (\_x_11-> _typ1_7))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_8) _term_11)))))))))))))))))))))
fm_parser_some = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "some(")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Maybe.some") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _expr_3) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_8)))))))))))))))
fm_parser_apply = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "apply(")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_func_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text ",")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_equa_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text ")")) (\__6-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_7-> (let _term_8=(u fm_term_ref "Equal.apply") in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) (u fm_term_hol bits_e)) in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) _func_3) in (let _term_14=(u (u fm_term_app _term_13) _equa_5) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_7) _term_14)))))))))))))))))))))))
fm_name_read = (\_str_1-> _str_1)
fm_parser_list = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "[")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "]")) (u fm_parser_item fm_parser_term))) (\_vals_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u (u list_fold _vals_3) (u (u fm_term_app (u fm_term_ref (u fm_name_read "List.nil"))) (u fm_term_hol bits_e))) (\_x_5-> (\_xs_6-> (let _term_7=(u fm_term_ref (u fm_name_read "List.cons")) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_hol bits_e)) in (let _term_9=(u (u fm_term_app _term_8) _x_5) in (let _term_10=(u (u fm_term_app _term_9) _xs_6) in (u (u fm_term_ori _orig_4) _term_10)))))))))))))))))
fm_parser_log = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "log(")) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text ")")) (u fm_parser_item fm_parser_term))) (\_strs_3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_cont_4-> (let _term_5=(u fm_term_ref "Debug.log") in (let _term_6=(u (u fm_term_app _term_5) (u fm_term_hol bits_e)) in (let _args_7=(u (u (u list_fold _strs_3) (u fm_term_ref "String.nil")) (\_x_7-> (\_xs_8-> (let _arg_9=(u fm_term_ref "String.concat") in (let _arg_10=(u (u fm_term_app _arg_9) _x_7) in (let _arg_11=(u (u fm_term_app _arg_10) _xs_8) in _arg_11)))))) in (let _term_8=(u (u fm_term_app _term_6) _args_7) in (let _term_9=(u (u fm_term_app _term_8) (u (u fm_term_lam "x") (\_x_9-> _cont_4))) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9)))))))))))))))))
fm_parser_forin = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "for ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_elem_3-> (u (u (u monad_bind parser_monad) (u fm_parser_text "in")) (\__4-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_list_5-> (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__6-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_loop_9-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (let _term_11=(u fm_term_ref "List.for") in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) _list_5) in (let _term_14=(u (u fm_term_app _term_13) (u fm_term_hol bits_e)) in (let _term_15=(u (u fm_term_app _term_14) (u fm_term_ref _name_7)) in (let _lamb_16=(u (u fm_term_lam _elem_3) (\_i_16-> (u (u fm_term_lam _name_7) (\_x_17-> _loop_9)))) in (let _term_17=(u (u fm_term_app _term_15) _lamb_16) in (let _term_18=(u (u (u fm_term_let _name_7) _term_17) (\_x_18-> (u fm_term_ref _name_7))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_18))))))))))))))))))))))))))))))
fm_parser_do_statements = (\_monad_name_1-> (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "var ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (let _term_10=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_11=(u (u fm_term_app _term_10) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_12=(u (u fm_term_app _term_11) (u fm_term_hol bits_e)) in (let _term_13=(u (u fm_term_app _term_12) (u fm_term_hol bits_e)) in (let _term_14=(u (u fm_term_app _term_13) _expr_6) in (let _term_15=(u (u fm_term_app _term_14) (u (u fm_term_lam _name_4) (\_x_15-> _body_8))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) _term_15))))))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "let ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_6-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__7-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_8-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_9-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) (u (u (u fm_term_let _name_4) _expr_6) (\_x_10-> _body_8))))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "return ")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.pure")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) _expr_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_10))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__4-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _monad_name_1)) (\_body_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_2)) (\_orig_6-> (let _term_7=(u (u fm_term_app (u fm_term_ref "Monad.bind")) (u fm_term_ref _monad_name_1)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_ref (((_monad_name_1::String) ++ ".monad")))) in (let _term_9=(u (u fm_term_app _term_8) (u fm_term_hol bits_e)) in (let _term_10=(u (u fm_term_app _term_9) (u fm_term_hol bits_e)) in (let _term_11=(u (u fm_term_app _term_10) _expr_3) in (let _term_12=(u (u fm_term_app _term_11) (u (u fm_term_lam "") (\_x_12-> _body_5))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _term_12))))))))))))))))))) (u (u list_cons (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_2-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__3-> (u (u monad_pure parser_monad) _expr_2)))))) list_nil)))))))
fm_parser_do = (u (u (u monad_bind parser_monad) (u fm_parser_text "do ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__3-> (u (u (u monad_bind parser_monad) (u fm_parser_do_statements _name_2)) (\_term_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "}")) (\__5-> (u (u monad_pure parser_monad) _term_4)))))))))))
fm_term_nat = (\_natx_1-> (11,\t-> t _natx_1))
fm_term_unroll_nat = (\_natx_1-> (let _234 = _natx_1 in (if _234==0 then (u fm_term_ref (u fm_name_read "Nat.zero")) else (let _func_3=(u fm_term_ref (u fm_name_read "Nat.succ")) in (let _argm_4=(u fm_term_nat (_234-1)) in (u (u fm_term_app _func_3) _argm_4))))))
u16_to_bits = (\_a_1-> (let _235 = _a_1 in (u word_to_bits (u16_to_word _235))))
fm_term_unroll_chr_bits = (\_bits_1-> (let _236 = _bits_1 in (case _236 of {(0,f) -> u f ((u fm_term_ref (u fm_name_read "Bits.e"))); (1,f) -> u f (\_237-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.o"))) (u fm_term_unroll_chr_bits _237))); (2,f) -> u f (\_238-> (u (u fm_term_app (u fm_term_ref (u fm_name_read "Bits.i"))) (u fm_term_unroll_chr_bits _238))); })))
fm_term_unroll_chr = (\_chrx_1-> (let _bits_2=(u u16_to_bits _chrx_1) in (let _term_3=(u fm_term_ref (u fm_name_read "Word.from_bits")) in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_nat 16)) in (let _term_5=(u (u fm_term_app _term_4) (u fm_term_unroll_chr_bits _bits_2)) in (let _term_6=(u (u fm_term_app (u fm_term_ref (u fm_name_read "U16.new"))) _term_5) in _term_6))))))
fm_term_unroll_str = (\_strx_1-> (let _239 = _strx_1 in (if null (_239::String) then (u fm_term_ref (u fm_name_read "String.nil")) else (let _char_4=(u fm_term_chr (fromIntegral (fromEnum (head _239 :: Char)) :: Word16)) in (let _term_5=(u fm_term_ref (u fm_name_read "String.cons")) in (let _term_6=(u (u fm_term_app _term_5) _char_4) in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_str (tail _239))) in _term_7)))))))
fm_term_reduce = (\_term_1-> (\_defs_2-> (let _240 = _term_1 in (case _240 of {(0,f) -> u f (\_241 _242-> _term_1); (1,f) -> u f (\_243-> (let _244 = (u (u fm_get _243) _defs_2) in (case _244 of {(0,f) -> u f ((u fm_term_ref _243)); (1,f) -> u f (\_245-> (let _246 = _245 in (case _246 of {(0,f) -> u f (\_247 _248 _249 _250 _251 _252-> (u (u fm_term_reduce _250) _defs_2)); }))); }))); (2,f) -> u f (_term_1); (3,f) -> u f (\_253 _254 _255 _256 _257-> _term_1); (4,f) -> u f (\_258 _259-> _term_1); (5,f) -> u f (\_260 _261-> (let _func_5=(u (u fm_term_reduce _260) _defs_2) in (let _262 = _func_5 in (case _262 of {(0,f) -> u f (\_263 _264-> _term_1); (1,f) -> u f (\_265-> _term_1); (2,f) -> u f (_term_1); (3,f) -> u f (\_266 _267 _268 _269 _270-> _term_1); (4,f) -> u f (\_271 _272-> (u (u fm_term_reduce (u _272 _261)) _defs_2)); (5,f) -> u f (\_273 _274-> _term_1); (6,f) -> u f (\_275 _276 _277-> _term_1); (7,f) -> u f (\_278 _279 _280-> _term_1); (8,f) -> u f (\_281 _282 _283-> _term_1); (9,f) -> u f (\_284 _285 _286-> _term_1); (10,f) -> u f (\_287-> _term_1); (11,f) -> u f (\_288-> _term_1); (12,f) -> u f (\_289-> _term_1); (13,f) -> u f (\_290-> _term_1); (14,f) -> u f (\_291 _292 _293 _294 _295 _296-> _term_1); (15,f) -> u f (\_297 _298-> _term_1); })))); (6,f) -> u f (\_299 _300 _301-> (u (u fm_term_reduce (u _301 _300)) _defs_2)); (7,f) -> u f (\_302 _303 _304-> (u (u fm_term_reduce (u _304 _303)) _defs_2)); (8,f) -> u f (\_305 _306 _307-> (u (u fm_term_reduce _306) _defs_2)); (9,f) -> u f (\_308 _309 _310-> _term_1); (10,f) -> u f (\_311-> _term_1); (11,f) -> u f (\_312-> (u (u fm_term_reduce (u fm_term_unroll_nat _312)) _defs_2)); (12,f) -> u f (\_313-> (u (u fm_term_reduce (u fm_term_unroll_chr _313)) _defs_2)); (13,f) -> u f (\_314-> (u (u fm_term_reduce (u fm_term_unroll_str _314)) _defs_2)); (14,f) -> u f (\_315 _316 _317 _318 _319 _320-> _term_1); (15,f) -> u f (\_321 _322-> (u (u fm_term_reduce _322) _defs_2)); }))))
map_new = (0,\t-> t)
fm_def_new = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_stat_6-> (0,\t-> t _file_1 _code_2 _name_3 _term_4 _type_5 _stat_6)))))))
fm_status_init = (0,\t-> t)
fm_parser_case_with = (u (u (u monad_bind parser_monad) (u fm_parser_text "with")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_text "=")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_6-> (u (u monad_pure parser_monad) (u (u (u (u (u (u fm_def_new "") "") _name_2) _term_6) _type_4) fm_status_init))))))))))))))
fm_parser_case_case = (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ","))) (\__4-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _term_3))))))))))
map_tie = (\_val_2-> (\_lft_3-> (\_rgt_4-> (1,\t-> t _val_2 _lft_3 _rgt_4))))
map_set = (\_bits_2-> (\_val_3-> (\_map_4-> (let _323 = _bits_2 in (case _323 of {(0,f) -> u f ((let _324 = _map_4 in (case _324 of {(0,f) -> u f ((u (u (u map_tie (u maybe_some _val_3)) map_new) map_new)); (1,f) -> u f (\_325 _326 _327-> (u (u (u map_tie (u maybe_some _val_3)) _326) _327)); }))); (1,f) -> u f (\_328-> (let _329 = _map_4 in (case _329 of {(0,f) -> u f ((u (u (u map_tie maybe_none) (u (u (u map_set _328) _val_3) map_new)) map_new)); (1,f) -> u f (\_330 _331 _332-> (u (u (u map_tie _330) (u (u (u map_set _328) _val_3) _331)) _332)); }))); (2,f) -> u f (\_333-> (let _334 = _map_4 in (case _334 of {(0,f) -> u f ((u (u (u map_tie maybe_none) map_new) (u (u (u map_set _333) _val_3) map_new))); (1,f) -> u f (\_335 _336 _337-> (u (u (u map_tie _335) _336) (u (u (u map_set _333) _val_3) _337))); }))); })))))
map_from_list = (\_f_3-> (\_xs_4-> (let _338 = _xs_4 in (case _338 of {(0,f) -> u f (map_new); (1,f) -> u f (\_339 _340-> (let _341 = _339 in (case _341 of {(0,f) -> u f (\_342 _343-> (u (u (u map_set (u _f_3 _342)) _343) (u (u map_from_list _f_3) _340))); }))); }))))
fm_term_cse = (\_path_1-> (\_expr_2-> (\_name_3-> (\_with_4-> (\_cses_5-> (\_moti_6-> (14,\t-> t _path_1 _expr_2 _name_3 _with_4 _cses_5 _moti_6)))))))
fm_parser_case = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "case ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "as")) (\__5-> fm_parser_name1)))) (\_name_5-> (let _name_6=(let _344 = _name_5 in (case _344 of {(0,f) -> u f ((let _345 = (u (u fm_term_reduce _expr_4) map_new) in (case _345 of {(0,f) -> u f (\_346 _347-> _346); (1,f) -> u f (\_348-> _348); (2,f) -> u f ((u fm_name_read "self")); (3,f) -> u f (\_349 _350 _351 _352 _353-> (u fm_name_read "self")); (4,f) -> u f (\_354 _355-> (u fm_name_read "self")); (5,f) -> u f (\_356 _357-> (u fm_name_read "self")); (6,f) -> u f (\_358 _359 _360-> (u fm_name_read "self")); (7,f) -> u f (\_361 _362 _363-> (u fm_name_read "self")); (8,f) -> u f (\_364 _365 _366-> (u fm_name_read "self")); (9,f) -> u f (\_367 _368 _369-> (u fm_name_read "self")); (10,f) -> u f (\_370-> (u fm_name_read "self")); (11,f) -> u f (\_371-> (u fm_name_read "self")); (12,f) -> u f (\_372-> (u fm_name_read "self")); (13,f) -> u f (\_373-> (u fm_name_read "self")); (14,f) -> u f (\_374 _375 _376 _377 _378 _379-> (u fm_name_read "self")); (15,f) -> u f (\_380 _381-> (u fm_name_read "self")); }))); (1,f) -> u f (\_382-> _382); })) in (u (u (u monad_bind parser_monad) (u parser_many fm_parser_case_with)) (\_wyth_7-> (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__8-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) fm_parser_case_case)) (\_cses_9-> (let _cses_10=(u (u map_from_list fm_name_to_bits) _cses_9) in (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__11-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_12-> (u (u monad_pure parser_monad) (u maybe_some _term_12))))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "!")) (\__11-> (u (u monad_pure parser_monad) maybe_none)))) (u (u list_cons (u (u monad_pure parser_monad) (u maybe_some (u fm_term_hol bits_e)))) list_nil))))) (\_moti_11-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) (u (u (u (u (u (u fm_term_cse bits_e) _expr_4) _name_6) _wyth_7) _cses_10) _moti_11)))))))))))))))))))))))))
fm_parser_open = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "open ")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_expr_4-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "as")) (\__5-> fm_parser_name1)))) (\_name_5-> (u (u (u monad_bind parser_monad) (u parser_maybe (u fm_parser_text ";"))) (\__6-> (let _name_7=(let _383 = _name_5 in (case _383 of {(0,f) -> u f ((let _384 = (u (u fm_term_reduce _expr_4) map_new) in (case _384 of {(0,f) -> u f (\_385 _386-> _385); (1,f) -> u f (\_387-> _387); (2,f) -> u f ((u fm_name_read "self")); (3,f) -> u f (\_388 _389 _390 _391 _392-> (u fm_name_read "self")); (4,f) -> u f (\_393 _394-> (u fm_name_read "self")); (5,f) -> u f (\_395 _396-> (u fm_name_read "self")); (6,f) -> u f (\_397 _398 _399-> (u fm_name_read "self")); (7,f) -> u f (\_400 _401 _402-> (u fm_name_read "self")); (8,f) -> u f (\_403 _404 _405-> (u fm_name_read "self")); (9,f) -> u f (\_406 _407 _408-> (u fm_name_read "self")); (10,f) -> u f (\_409-> (u fm_name_read "self")); (11,f) -> u f (\_410-> (u fm_name_read "self")); (12,f) -> u f (\_411-> (u fm_name_read "self")); (13,f) -> u f (\_412-> (u fm_name_read "self")); (14,f) -> u f (\_413 _414 _415 _416 _417 _418-> (u fm_name_read "self")); (15,f) -> u f (\_419 _420-> (u fm_name_read "self")); }))); (1,f) -> u f (\_421-> _421); })) in (let _wyth_8=list_nil in (u (u (u monad_bind parser_monad) fm_parser_term) (\_rest_9-> (let _cses_10=(u (u map_from_list fm_name_to_bits) (u (u list_cons (u (u pair_new "_") _rest_9)) list_nil)) in (let _moti_11=(u maybe_some (u fm_term_hol bits_e)) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_12-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_12) (u (u (u (u (u (u fm_term_cse bits_e) _expr_4) _name_7) _wyth_8) _cses_10) _moti_11)))))))))))))))))))))))
parser_digit = (\_idx_1-> (\_code_2-> (let _422 = _code_2 in (if null (_422::String) then (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit.") else (let _sidx_5=(u nat_succ _idx_1) in (let _423 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 48)) in (if _423 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 0) else (let _424 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 49)) in (if _424 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 1) else (let _425 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 50)) in (if _425 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 2) else (let _426 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 51)) in (if _426 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 3) else (let _427 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 52)) in (if _427 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 4) else (let _428 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 53)) in (if _428 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 5) else (let _429 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 54)) in (if _429 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 6) else (let _430 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 55)) in (if _430 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 7) else (let _431 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 56)) in (if _431 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 8) else (let _432 = ((((fromIntegral (fromEnum (head _422 :: Char)) :: Word16)::Word16) == 57)) in (if _432 then (u (u (u parser_reply_value _sidx_5) (tail _422)) 9) else (u (u (u parser_reply_error _idx_1) _code_2) "Not a digit."))))))))))))))))))))))))))
nat_add = (\a0-> \a1-> ((a0::Integer) + a1))
nat_mul = (\a0-> \a1-> ((a0::Integer) * a1))
nat_from_base_go = (\_b_1-> (\_ds_2-> (\_p_3-> (\_res_4-> (let _433 = _ds_2 in (case _433 of {(0,f) -> u f (_res_4); (1,f) -> u f (\_434 _435-> (u (u (u (u nat_from_base_go _b_1) _435) (((_b_1::Integer) * _p_3))) ((((((_434::Integer) * _p_3))::Integer) + _res_4)))); }))))))
list_reverse_go = (\_xs_2-> (\_res_3-> (let _436 = _xs_2 in (case _436 of {(0,f) -> u f (_res_3); (1,f) -> u f (\_437 _438-> (u (u list_reverse_go _438) (u (u list_cons _437) _res_3))); }))))
list_reverse = (\_xs_2-> (u (u list_reverse_go _xs_2) list_nil))
nat_from_base = (\_base_1-> (\_ds_2-> (u (u (u (u nat_from_base_go _base_1) (u list_reverse _ds_2)) 1) 0)))
parser_nat = (u (u (u monad_bind parser_monad) (u parser_many1 parser_digit)) (\_digits_1-> (u (u monad_pure parser_monad) (u (u nat_from_base 10) _digits_1))))
bits_tail = (\_a_1-> (let _439 = _a_1 in (case _439 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_440-> _440); (2,f) -> u f (\_441-> _441); })))
bits_inc = (\_a_1-> (let _442 = _a_1 in (case _442 of {(0,f) -> u f ((u bits_i bits_e)); (1,f) -> u f (\_443-> (u bits_i _443)); (2,f) -> u f (\_444-> (u bits_o (u bits_inc _444))); })))
nat_to_bits = (\_n_1-> (let _445 = _n_1 in (if _445==0 then bits_e else (u bits_inc (u nat_to_bits (_445-1))))))
maybe_to_bool = (\_m_2-> (let _446 = _m_2 in (case _446 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_447-> bool_true); })))
fm_term_gol = (\_name_1-> (\_dref_2-> (\_verb_3-> (9,\t-> t _name_1 _dref_2 _verb_3))))
fm_parser_goal = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "?")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_3-> (u (u (u monad_bind parser_monad) (u parser_many (u (u (u monad_bind parser_monad) (u fm_parser_text "-")) (\__4-> (u (u (u monad_bind parser_monad) parser_nat) (\_nat_5-> (let _bits_6=(u bits_reverse (u bits_tail (u bits_reverse (u nat_to_bits _nat_5)))) in (u (u monad_pure parser_monad) _bits_6)))))))) (\_dref_4-> (u (u (u monad_bind parser_monad) (u (u (u monad_bind parser_monad) (u parser_maybe (u parser_text "-"))) (\_verb_5-> (u (u monad_pure parser_monad) (u maybe_to_bool _verb_5))))) (\_verb_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_6-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) (u (u (u fm_term_gol _name_3) _dref_4) _verb_5)))))))))))))))
fm_parser_hole = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text "_")) (\__2-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_hol bits_e)))))))))
fm_parser_nat = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__2-> (u (u (u monad_bind parser_monad) parser_nat) (\_natx_3-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_4-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_4) (u fm_term_nat _natx_3)))))))))))
string_eql = (\a0-> \a1-> ((a0::String) == a1))
parser_fail = (\_error_2-> (\_idx_3-> (\_code_4-> (u (u (u parser_reply_error _idx_3) _code_4) _error_2))))
fm_parser_reference = (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (let _448 = (((_name_2::String) == "case")) in (if _448 then (u parser_fail "Reserved keyword.") else (let _449 = (((_name_2::String) == "do")) in (if _449 then (u parser_fail "Reserved keyword.") else (let _450 = (((_name_2::String) == "if")) in (if _450 then (u parser_fail "Reserved keyword.") else (let _451 = (((_name_2::String) == "let")) in (if _451 then (u parser_fail "Reserved keyword.") else (let _452 = (((_name_2::String) == "def")) in (if _452 then (u parser_fail "Reserved keyword.") else (let _453 = (((_name_2::String) == "true")) in (if _453 then (u (u monad_pure parser_monad) (u fm_term_ref "Bool.true")) else (let _454 = (((_name_2::String) == "false")) in (if _454 then (u (u monad_pure parser_monad) (u fm_term_ref "Bool.false")) else (let _455 = (((_name_2::String) == "unit")) in (if _455 then (u (u monad_pure parser_monad) (u fm_term_ref "Unit.new")) else (let _456 = (((_name_2::String) == "none")) in (if _456 then (let _term_3=(u fm_term_ref "Maybe.none") in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_hol bits_e)) in (u (u monad_pure parser_monad) _term_4))) else (let _457 = (((_name_2::String) == "refl")) in (if _457 then (let _term_3=(u fm_term_ref "Equal.refl") in (let _term_4=(u (u fm_term_app _term_3) (u fm_term_hol bits_e)) in (let _term_5=(u (u fm_term_app _term_4) (u fm_term_hol bits_e)) in (u (u monad_pure parser_monad) _term_5)))) else (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_3-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_3) (u fm_term_ref _name_2)))))))))))))))))))))))))))))
list_for = (\_xs_2-> (\_b_4-> (\_f_5-> (let _458 = _xs_2 in (case _458 of {(0,f) -> u f (_b_4); (1,f) -> u f (\_459 _460-> (u (u (u list_for _460) (u (u _f_5 _459) _b_4)) _f_5)); })))))
fm_parser_application = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) (u parser_text "(")) (\__3-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text ")")) (u fm_parser_item fm_parser_term))) (\_args_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _expr_6=(u (u (u list_for _args_4) _func_2) (\_x_6-> (\_f_7-> (u (u fm_term_app _f_7) _x_6)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _expr_6)))))))))))
parser_spaces = (u parser_many (u parser_first_of (u (u list_cons (u parser_text " ")) (u (u list_cons (u parser_text "\n")) list_nil))))
parser_spaces_text = (\_text_1-> (u (u (u monad_bind parser_monad) parser_spaces) (\__2-> (u parser_text _text_1))))
fm_parser_application_erased = (\_init_1-> (\_func_2-> (u (u (u monad_bind parser_monad) parser_get_index) (\_init_3-> (u (u (u monad_bind parser_monad) (u parser_text "<")) (\__4-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u parser_spaces_text ">")) (u fm_parser_item fm_parser_term))) (\_args_5-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_3)) (\_orig_6-> (let _expr_7=(u (u (u list_for _args_5) _func_2) (\_x_7-> (\_f_8-> (u (u fm_term_app _f_8) _x_7)))) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_6) _expr_7)))))))))))))
fm_parser_arrow = (\_init_1-> (\_xtyp_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "->")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_body_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u (u (u fm_term_all bool_false) "") "") _xtyp_2) (\_s_6-> (\_x_7-> _body_4)))))))))))))
fm_parser_cons = (\_init_1-> (\_head_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "&")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_tail_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "List.cons") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _head_2) in (let _term_9=(u (u fm_term_app _term_8) _tail_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9))))))))))))))))
fm_parser_concat = (\_init_1-> (\_lst0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "++")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_lst1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "List.concat") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _lst0_2) in (let _term_9=(u (u fm_term_app _term_8) _lst1_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_10-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_10) _term_9))))))))))))))))
fm_parser_string_concat = (\_init_1-> (\_str0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "|")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_str1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "String.concat") in (let _term_7=(u (u fm_term_app _term_6) _str0_2) in (let _term_8=(u (u fm_term_app _term_7) _str1_4) in (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_9-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_9) _term_8)))))))))))))))
fm_parser_sigma = (\_init_1-> (\_val0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Sigma.new") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) (u fm_term_hol bits_e)) in (let _term_9=(u (u fm_term_app _term_8) _val0_2) in (let _term_10=(u (u fm_term_app _term_9) _val1_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_10)))))))))))))))
fm_parser_equality = (\_init_1-> (\_val0_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "==")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_val1_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (let _term_6=(u fm_term_ref "Equal") in (let _term_7=(u (u fm_term_app _term_6) (u fm_term_hol bits_e)) in (let _term_8=(u (u fm_term_app _term_7) _val0_2) in (let _term_9=(u (u fm_term_app _term_8) _val1_4) in (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) _term_9))))))))))))))
fm_term_ann = (\_done_1-> (\_term_2-> (\_type_3-> (8,\t-> t _done_1 _term_2 _type_3))))
fm_parser_annotation = (\_init_1-> (\_term_2-> (u (u (u monad_bind parser_monad) (u fm_parser_text "::")) (\__3-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_4-> (u (u (u monad_bind parser_monad) (u fm_parser_stop _init_1)) (\_orig_5-> (u (u monad_pure parser_monad) (u (u fm_term_ori _orig_5) (u (u (u fm_term_ann bool_false) _term_2) _type_4)))))))))))
fm_parser_suffix = (\_init_1-> (\_term_2-> (\_idx_3-> (\_code_4-> (let _suffix_parser_5=(u parser_first_of (u (u list_cons (u (u fm_parser_application _init_1) _term_2)) (u (u list_cons (u (u fm_parser_application_erased _init_1) _term_2)) (u (u list_cons (u (u fm_parser_arrow _init_1) _term_2)) (u (u list_cons (u (u fm_parser_cons _init_1) _term_2)) (u (u list_cons (u (u fm_parser_concat _init_1) _term_2)) (u (u list_cons (u (u fm_parser_string_concat _init_1) _term_2)) (u (u list_cons (u (u fm_parser_sigma _init_1) _term_2)) (u (u list_cons (u (u fm_parser_equality _init_1) _term_2)) (u (u list_cons (u (u fm_parser_annotation _init_1) _term_2)) list_nil)))))))))) in (let _461 = (u (u _suffix_parser_5 _idx_3) _code_4) in (case _461 of {(0,f) -> u f (\_462 _463 _464-> (u (u (u parser_reply_value _idx_3) _code_4) _term_2)); (1,f) -> u f (\_465 _466 _467-> (u (u (u (u fm_parser_suffix _init_1) _467) _465) _466)); })))))))
fm_parser_term = (u (u (u monad_bind parser_monad) parser_get_code) (\_code_1-> (u (u (u monad_bind parser_monad) fm_parser_init) (\_init_2-> (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons fm_parser_type) (u (u list_cons fm_parser_forall) (u (u list_cons fm_parser_lambda) (u (u list_cons fm_parser_lambda_erased) (u (u list_cons fm_parser_lambda_nameless) (u (u list_cons fm_parser_parenthesis) (u (u list_cons fm_parser_letforin) (u (u list_cons fm_parser_let) (u (u list_cons fm_parser_get) (u (u list_cons fm_parser_def) (u (u list_cons fm_parser_if) (u (u list_cons fm_parser_char) (u (u list_cons fm_parser_string) (u (u list_cons fm_parser_pair) (u (u list_cons fm_parser_sigma_type) (u (u list_cons fm_parser_some) (u (u list_cons fm_parser_apply) (u (u list_cons fm_parser_list) (u (u list_cons fm_parser_log) (u (u list_cons fm_parser_forin) (u (u list_cons fm_parser_do) (u (u list_cons fm_parser_case) (u (u list_cons fm_parser_open) (u (u list_cons fm_parser_goal) (u (u list_cons fm_parser_hole) (u (u list_cons fm_parser_nat) (u (u list_cons fm_parser_reference) list_nil))))))))))))))))))))))))))))) (\_term_3-> (u (u fm_parser_suffix _init_2) _term_3)))))))
fm_parser_name_term = (u (u (u monad_bind parser_monad) fm_parser_name) (\_name_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__2-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_3-> (u (u monad_pure parser_monad) (u (u pair_new _name_1) _type_3))))))))
fm_binder_new = (\_eras_1-> (\_name_2-> (\_term_3-> (0,\t-> t _eras_1 _name_2 _term_3))))
fm_parser_binder_homo = (\_eras_1-> (u (u (u monad_bind parser_monad) (u fm_parser_text (let _468 = _eras_1 in (if _468 then "<" else "(")))) (\__2-> (u (u (u monad_bind parser_monad) (u (u parser_until1 (u fm_parser_text (let _469 = _eras_1 in (if _469 then ">" else ")")))) (u fm_parser_item fm_parser_name_term))) (\_bind_3-> (u (u monad_pure parser_monad) (u (u list_mapped _bind_3) (\_pair_4-> (let _470 = _pair_4 in (case _470 of {(0,f) -> u f (\_471 _472-> (u (u (u fm_binder_new _eras_1) _471) _472)); }))))))))))
list_concat = (\_as_2-> (\_bs_3-> (let _473 = _as_2 in (case _473 of {(0,f) -> u f (_bs_3); (1,f) -> u f (\_474 _475-> (u (u list_cons _474) (u (u list_concat _475) _bs_3))); }))))
list_flatten = (\_xs_2-> (let _476 = _xs_2 in (case _476 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_477 _478-> (u (u list_concat _477) (u list_flatten _478))); })))
fm_parser_binder = (u (u (u monad_bind parser_monad) (u parser_many1 (u parser_first_of (u (u list_cons (u fm_parser_binder_homo bool_true)) (u (u list_cons (u fm_parser_binder_homo bool_false)) list_nil))))) (\_lists_1-> (u (u monad_pure parser_monad) (u list_flatten _lists_1))))
fm_parser_make_forall = (\_binds_1-> (\_body_2-> (let _479 = _binds_1 in (case _479 of {(0,f) -> u f (_body_2); (1,f) -> u f (\_480 _481-> (let _482 = _480 in (case _482 of {(0,f) -> u f (\_483 _484 _485-> (u (u (u (u (u fm_term_all _483) "") _484) _485) (\_s_8-> (\_x_9-> (u (u fm_parser_make_forall _481) _body_2))))); }))); }))))
list_at = (\_index_2-> (\_list_3-> (let _486 = _list_3 in (case _486 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_487 _488-> (let _489 = _index_2 in (if _489==0 then (u maybe_some _487) else (u (u list_at (_489-1)) _488)))); }))))
list_at_last = (\_index_2-> (\_list_3-> (u (u list_at _index_2) (u list_reverse _list_3))))
fm_term_var = (\_name_1-> (\_indx_2-> (0,\t-> t _name_1 _indx_2)))
pair_snd = (\_pair_3-> (let _490 = _pair_3 in (case _490 of {(0,f) -> u f (\_491 _492-> _492); })))
fm_name_eql = (\_a_1-> (\_b_2-> (((_a_1::String) == _b_2))))
fm_context_find = (\_name_1-> (\_ctx_2-> (let _493 = _ctx_2 in (case _493 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_494 _495-> (let _496 = _494 in (case _496 of {(0,f) -> u f (\_497 _498-> (let _499 = (u (u fm_name_eql _name_1) _497) in (if _499 then (u maybe_some _498) else (u (u fm_context_find _name_1) _495)))); }))); }))))
list_length_go = (\_xs_2-> (\_n_3-> (let _500 = _xs_2 in (case _500 of {(0,f) -> u f (_n_3); (1,f) -> u f (\_501 _502-> (u (u list_length_go _502) (u nat_succ _n_3))); }))))
list_length = (\_xs_2-> (u (u list_length_go _xs_2) 0))
fm_path_o = (\_path_1-> (\_x_2-> (u _path_1 (u bits_o _x_2))))
fm_path_i = (\_path_1-> (\_x_2-> (u _path_1 (u bits_i _x_2))))
fm_path_to_bits = (\_path_1-> (u _path_1 bits_e))
fm_term_bind = (\_vars_1-> (\_path_2-> (\_term_3-> (let _503 = _term_3 in (case _503 of {(0,f) -> u f (\_504 _505-> (let _506 = (u (u list_at_last _505) _vars_1) in (case _506 of {(0,f) -> u f ((u (u fm_term_var _504) _505)); (1,f) -> u f (\_507-> (u pair_snd _507)); }))); (1,f) -> u f (\_508-> (let _509 = (u (u fm_context_find _508) _vars_1) in (case _509 of {(0,f) -> u f ((u fm_term_ref _508)); (1,f) -> u f (\_510-> _510); }))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_511 _512 _513 _514 _515-> (let _vlen_9=(u list_length _vars_1) in (u (u (u (u (u fm_term_all _511) _512) _513) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _514)) (\_s_10-> (\_x_11-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _513) _x_11)) (u (u list_cons (u (u pair_new _512) _s_10)) _vars_1))) (u fm_path_i _path_2)) (u (u _515 (u (u fm_term_var _512) _vlen_9)) (u (u fm_term_var _513) (u nat_succ _vlen_9))))))))); (4,f) -> u f (\_516 _517-> (let _vlen_6=(u list_length _vars_1) in (u (u fm_term_lam _516) (\_x_7-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _516) _x_7)) _vars_1)) (u fm_path_o _path_2)) (u _517 (u (u fm_term_var _516) _vlen_6))))))); (5,f) -> u f (\_518 _519-> (u (u fm_term_app (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _518)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _519))); (6,f) -> u f (\_520 _521 _522-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_let _520) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _521)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _520) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _522 (u (u fm_term_var _520) _vlen_7))))))); (7,f) -> u f (\_523 _524 _525-> (let _vlen_7=(u list_length _vars_1) in (u (u (u fm_term_def _523) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _524)) (\_x_8-> (u (u (u fm_term_bind (u (u list_cons (u (u pair_new _523) _x_8)) _vars_1)) (u fm_path_i _path_2)) (u _525 (u (u fm_term_var _523) _vlen_7))))))); (8,f) -> u f (\_526 _527 _528-> (u (u (u fm_term_ann _526) (u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _527)) (u (u (u fm_term_bind _vars_1) (u fm_path_i _path_2)) _528))); (9,f) -> u f (\_529 _530 _531-> (u (u (u fm_term_gol _529) _530) _531)); (10,f) -> u f (\_532-> (u fm_term_hol (u fm_path_to_bits _path_2))); (11,f) -> u f (\_533-> (u fm_term_nat _533)); (12,f) -> u f (\_534-> (u fm_term_chr _534)); (13,f) -> u f (\_535-> (u fm_term_str _535)); (14,f) -> u f (\_536 _537 _538 _539 _540 _541-> (let _expr_10=(u (u (u fm_term_bind _vars_1) (u fm_path_o _path_2)) _537) in (let _name_11=_538 in (let _wyth_12=_539 in (let _cses_13=_540 in (let _moti_14=_541 in (u (u (u (u (u (u fm_term_cse (u fm_path_to_bits _path_2)) _expr_10) _name_11) _wyth_12) _cses_13) _moti_14))))))); (15,f) -> u f (\_542 _543-> (u (u fm_term_ori _542) (u (u (u fm_term_bind _vars_1) _path_2) _543))); })))))
fm_status_done = (2,\t-> t)
fm_set = (\_name_2-> (\_val_3-> (\_map_4-> (u (u (u map_set (u fm_name_to_bits _name_2)) _val_3) _map_4))))
fm_define = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_done_6-> (\_defs_7-> (let _stat_8=(let _544 = _done_6 in (if _544 then fm_status_done else fm_status_init)) in (u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_4) _type_5) _stat_8)) _defs_7)))))))))
fm_parser_file_def = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_4-> (u (u (u monad_bind parser_monad) (u parser_many fm_parser_binder)) (\_args_5-> (let _args_6=(u list_flatten _args_5) in (u (u (u monad_bind parser_monad) (u fm_parser_text ":")) (\__7-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_type_8-> (u (u (u monad_bind parser_monad) fm_parser_term) (\_term_9-> (let _type_10=(u (u fm_parser_make_forall _args_6) _type_8) in (let _term_11=(u (u fm_parser_make_lambda (u (u list_mapped _args_6) (\_x_11-> (let _545 = _x_11 in (case _545 of {(0,f) -> u f (\_546 _547 _548-> _547); }))))) _term_9) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_i _x_12))) _type_10) in (let _term_13=(u (u (u fm_term_bind list_nil) (\_x_13-> (u bits_o _x_13))) _term_11) in (let _defs_14=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _name_4) _term_13) _type_12) bool_false) _defs_3) in (u (u monad_pure parser_monad) _defs_14))))))))))))))))))))
maybe_default = (\_a_2-> (\_m_3-> (let _549 = _m_3 in (case _549 of {(0,f) -> u f (_a_2); (1,f) -> u f (\_550-> _550); }))))
fm_constructor_new = (\_name_1-> (\_args_2-> (\_inds_3-> (0,\t-> t _name_1 _args_2 _inds_3))))
fm_parser_constructor = (\_namespace_1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_args_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _args_5=(u (u maybe_default list_nil) _args_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u monad_pure parser_monad) (u (u (u fm_constructor_new _name_2) _args_5) _inds_6)))))))))))
fm_datatype_new = (\_name_1-> (\_pars_2-> (\_inds_3-> (\_ctrs_4-> (0,\t-> t _name_1 _pars_2 _inds_3 _ctrs_4)))))
fm_parser_datatype = (u (u (u monad_bind parser_monad) (u fm_parser_text "type ")) (\__1-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_name_2-> (u (u (u monad_bind parser_monad) (u parser_maybe fm_parser_binder)) (\_pars_3-> (u (u (u monad_bind parser_monad) (u parser_maybe (u (u (u monad_bind parser_monad) (u fm_parser_text "~")) (\__4-> fm_parser_binder)))) (\_inds_4-> (let _pars_5=(u (u maybe_default list_nil) _pars_3) in (let _inds_6=(u (u maybe_default list_nil) _inds_4) in (u (u (u monad_bind parser_monad) (u fm_parser_text "{")) (\__7-> (u (u (u monad_bind parser_monad) (u (u parser_until (u fm_parser_text "}")) (u fm_parser_item (u fm_parser_constructor _name_2)))) (\_ctrs_8-> (u (u monad_pure parser_monad) (u (u (u (u fm_datatype_new _name_2) _pars_5) _inds_6) _ctrs_8))))))))))))))))
fm_datatype_build_term_motive_go = (\_type_1-> (\_name_2-> (\_inds_3-> (let _551 = _inds_3 in (case _551 of {(0,f) -> u f ((let _552 = _type_1 in (case _552 of {(0,f) -> u f (\_553 _554 _555 _556-> (let _slf_8=(u fm_term_ref _name_2) in (let _slf_9=(u (u (u list_for _554) _slf_8) (\_var_9-> (\_slf_10-> (u (u fm_term_app _slf_10) (u fm_term_ref (let _557 = _var_9 in (case _557 of {(0,f) -> u f (\_558 _559 _560-> _559); }))))))) in (let _slf_10=(u (u (u list_for _555) _slf_9) (\_var_10-> (\_slf_11-> (u (u fm_term_app _slf_11) (u fm_term_ref (let _561 = _var_10 in (case _561 of {(0,f) -> u f (\_562 _563 _564-> _563); }))))))) in (u (u (u (u (u fm_term_all bool_false) "") "") _slf_10) (\_s_11-> (\_x_12-> fm_term_typ))))))); }))); (1,f) -> u f (\_565 _566-> (let _567 = _565 in (case _567 of {(0,f) -> u f (\_568 _569 _570-> (u (u (u (u (u fm_term_all _568) "") _569) _570) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_motive_go _type_1) _name_2) _566))))); }))); })))))
fm_datatype_build_term_motive = (\_type_1-> (let _571 = _type_1 in (case _571 of {(0,f) -> u f (\_572 _573 _574 _575-> (u (u (u fm_datatype_build_term_motive_go _type_1) _572) _574)); })))
fm_datatype_build_term_constructor_go = (\_type_1-> (\_ctor_2-> (\_args_3-> (let _576 = _args_3 in (case _576 of {(0,f) -> u f ((let _577 = _type_1 in (case _577 of {(0,f) -> u f (\_578 _579 _580 _581-> (let _582 = _ctor_2 in (case _582 of {(0,f) -> u f (\_583 _584 _585-> (let _ret_11=(u fm_term_ref (u fm_name_read "P")) in (let _ret_12=(u (u (u list_for _585) _ret_11) (\_var_12-> (\_ret_13-> (u (u fm_term_app _ret_13) (let _586 = _var_12 in (case _586 of {(0,f) -> u f (\_587 _588 _589-> _589); })))))) in (let _ctr_13=(u string_flatten (u (u list_cons _578) (u (u list_cons (u fm_name_read ".")) (u (u list_cons _583) list_nil)))) in (let _slf_14=(u fm_term_ref _ctr_13) in (let _slf_15=(u (u (u list_for _579) _slf_14) (\_var_15-> (\_slf_16-> (u (u fm_term_app _slf_16) (u fm_term_ref (let _590 = _var_15 in (case _590 of {(0,f) -> u f (\_591 _592 _593-> _592); }))))))) in (let _slf_16=(u (u (u list_for _584) _slf_15) (\_var_16-> (\_slf_17-> (u (u fm_term_app _slf_17) (u fm_term_ref (let _594 = _var_16 in (case _594 of {(0,f) -> u f (\_595 _596 _597-> _596); }))))))) in (u (u fm_term_app _ret_12) _slf_16)))))))); }))); }))); (1,f) -> u f (\_598 _599-> (let _600 = _598 in (case _600 of {(0,f) -> u f (\_601 _602 _603-> (let _eras_9=_601 in (let _name_10=_602 in (let _xtyp_11=_603 in (let _body_12=(u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _599) in (u (u (u (u (u fm_term_all _eras_9) "") _name_10) _xtyp_11) (\_s_13-> (\_x_14-> _body_12)))))))); }))); })))))
fm_datatype_build_term_constructor = (\_type_1-> (\_ctor_2-> (let _604 = _ctor_2 in (case _604 of {(0,f) -> u f (\_605 _606 _607-> (u (u (u fm_datatype_build_term_constructor_go _type_1) _ctor_2) _606)); }))))
fm_datatype_build_term_constructors_go = (\_type_1-> (\_name_2-> (\_ctrs_3-> (let _608 = _ctrs_3 in (case _608 of {(0,f) -> u f ((let _609 = _type_1 in (case _609 of {(0,f) -> u f (\_610 _611 _612 _613-> (let _ret_8=(u fm_term_ref (u fm_name_read "P")) in (let _ret_9=(u (u (u list_for _612) _ret_8) (\_var_9-> (\_ret_10-> (u (u fm_term_app _ret_10) (u fm_term_ref (let _614 = _var_9 in (case _614 of {(0,f) -> u f (\_615 _616 _617-> _616); }))))))) in (u (u fm_term_app _ret_9) (u fm_term_ref (((_name_2::String) ++ ".Self"))))))); }))); (1,f) -> u f (\_618 _619-> (let _620 = _618 in (case _620 of {(0,f) -> u f (\_621 _622 _623-> (u (u (u (u (u fm_term_all bool_false) "") _621) (u (u fm_datatype_build_term_constructor _type_1) _618)) (\_s_9-> (\_x_10-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _name_2) _619))))); }))); })))))
fm_datatype_build_term_constructors = (\_type_1-> (let _624 = _type_1 in (case _624 of {(0,f) -> u f (\_625 _626 _627 _628-> (u (u (u fm_datatype_build_term_constructors_go _type_1) _625) _628)); })))
fm_datatype_build_term_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _629 = _pars_3 in (case _629 of {(0,f) -> u f ((let _630 = _inds_4 in (case _630 of {(0,f) -> u f ((u (u (u (u (u fm_term_all bool_true) (((_name_2::String) ++ ".Self"))) (u fm_name_read "P")) (u fm_datatype_build_term_motive _type_1)) (\_s_5-> (\_x_6-> (u fm_datatype_build_term_constructors _type_1))))); (1,f) -> u f (\_631 _632-> (let _633 = _631 in (case _633 of {(0,f) -> u f (\_634 _635 _636-> (u (u fm_term_lam _635) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _pars_3) _632)))); }))); }))); (1,f) -> u f (\_637 _638-> (let _639 = _637 in (case _639 of {(0,f) -> u f (\_640 _641 _642-> (u (u fm_term_lam _641) (\_x_10-> (u (u (u (u fm_datatype_build_term_go _type_1) _name_2) _638) _inds_4)))); }))); }))))))
fm_datatype_build_term = (\_type_1-> (let _643 = _type_1 in (case _643 of {(0,f) -> u f (\_644 _645 _646 _647-> (u (u (u (u fm_datatype_build_term_go _type_1) _644) _645) _646)); })))
fm_datatype_build_type_go = (\_type_1-> (\_name_2-> (\_pars_3-> (\_inds_4-> (let _648 = _pars_3 in (case _648 of {(0,f) -> u f ((let _649 = _inds_4 in (case _649 of {(0,f) -> u f (fm_term_typ); (1,f) -> u f (\_650 _651-> (let _652 = _650 in (case _652 of {(0,f) -> u f (\_653 _654 _655-> (u (u (u (u (u fm_term_all bool_false) "") _654) _655) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _pars_3) _651))))); }))); }))); (1,f) -> u f (\_656 _657-> (let _658 = _656 in (case _658 of {(0,f) -> u f (\_659 _660 _661-> (u (u (u (u (u fm_term_all bool_false) "") _660) _661) (\_s_10-> (\_x_11-> (u (u (u (u fm_datatype_build_type_go _type_1) _name_2) _657) _inds_4))))); }))); }))))))
fm_datatype_build_type = (\_type_1-> (let _662 = _type_1 in (case _662 of {(0,f) -> u f (\_663 _664 _665 _666-> (u (u (u (u fm_datatype_build_type_go _type_1) _663) _664) _665)); })))
fm_constructor_build_term_opt_go = (\_type_1-> (\_ctor_2-> (\_ctrs_3-> (let _667 = _ctrs_3 in (case _667 of {(0,f) -> u f ((let _668 = _ctor_2 in (case _668 of {(0,f) -> u f (\_669 _670 _671-> (let _ret_7=(u fm_term_ref _669) in (let _ret_8=(u (u (u list_for _670) _ret_7) (\_arg_8-> (\_ret_9-> (u (u fm_term_app _ret_9) (u fm_term_ref (let _672 = _arg_8 in (case _672 of {(0,f) -> u f (\_673 _674 _675-> _674); }))))))) in _ret_8))); }))); (1,f) -> u f (\_676 _677-> (let _678 = _676 in (case _678 of {(0,f) -> u f (\_679 _680 _681-> (u (u fm_term_lam _679) (\_x_9-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _677)))); }))); })))))
fm_constructor_build_term_opt = (\_type_1-> (\_ctor_2-> (let _682 = _type_1 in (case _682 of {(0,f) -> u f (\_683 _684 _685 _686-> (u (u (u fm_constructor_build_term_opt_go _type_1) _ctor_2) _686)); }))))
fm_constructor_build_term_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _687 = _pars_4 in (case _687 of {(0,f) -> u f ((let _688 = _args_5 in (case _688 of {(0,f) -> u f ((u (u fm_term_lam (u fm_name_read "P")) (\_x_6-> (u (u fm_constructor_build_term_opt _type_1) _ctor_2)))); (1,f) -> u f (\_689 _690-> (let _691 = _689 in (case _691 of {(0,f) -> u f (\_692 _693 _694-> (u (u fm_term_lam _693) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _pars_4) _690)))); }))); }))); (1,f) -> u f (\_695 _696-> (let _697 = _695 in (case _697 of {(0,f) -> u f (\_698 _699 _700-> (u (u fm_term_lam _699) (\_x_11-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _name_3) _696) _args_5)))); }))); })))))))
fm_constructor_build_term = (\_type_1-> (\_ctor_2-> (let _701 = _type_1 in (case _701 of {(0,f) -> u f (\_702 _703 _704 _705-> (let _706 = _ctor_2 in (case _706 of {(0,f) -> u f (\_707 _708 _709-> (u (u (u (u (u fm_constructor_build_term_go _type_1) _ctor_2) _702) _703) _708)); }))); }))))
fm_constructor_build_type_go = (\_type_1-> (\_ctor_2-> (\_name_3-> (\_pars_4-> (\_args_5-> (let _710 = _pars_4 in (case _710 of {(0,f) -> u f ((let _711 = _args_5 in (case _711 of {(0,f) -> u f ((let _712 = _type_1 in (case _712 of {(0,f) -> u f (\_713 _714 _715 _716-> (let _717 = _ctor_2 in (case _717 of {(0,f) -> u f (\_718 _719 _720-> (let _type_13=(u fm_term_ref _name_3) in (let _type_14=(u (u (u list_for _714) _type_13) (\_var_14-> (\_type_15-> (u (u fm_term_app _type_15) (u fm_term_ref (let _721 = _var_14 in (case _721 of {(0,f) -> u f (\_722 _723 _724-> _723); }))))))) in (let _type_15=(u (u (u list_for _720) _type_14) (\_var_15-> (\_type_16-> (u (u fm_term_app _type_16) (let _725 = _var_15 in (case _725 of {(0,f) -> u f (\_726 _727 _728-> _728); })))))) in _type_15)))); }))); }))); (1,f) -> u f (\_729 _730-> (let _731 = _729 in (case _731 of {(0,f) -> u f (\_732 _733 _734-> (u (u (u (u (u fm_term_all _732) "") _733) _734) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _pars_4) _730))))); }))); }))); (1,f) -> u f (\_735 _736-> (let _737 = _735 in (case _737 of {(0,f) -> u f (\_738 _739 _740-> (u (u (u (u (u fm_term_all _738) "") _739) _740) (\_s_11-> (\_x_12-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _name_3) _736) _args_5))))); }))); })))))))
fm_constructor_build_type = (\_type_1-> (\_ctor_2-> (let _741 = _type_1 in (case _741 of {(0,f) -> u f (\_742 _743 _744 _745-> (let _746 = _ctor_2 in (case _746 of {(0,f) -> u f (\_747 _748 _749-> (u (u (u (u (u fm_constructor_build_type_go _type_1) _ctor_2) _742) _743) _748)); }))); }))))
fm_parser_file_adt = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_datatype) (\_adt_4-> (let _750 = _adt_4 in (case _750 of {(0,f) -> u f (\_751 _752 _753 _754-> (let _term_9=(u fm_datatype_build_term _adt_4) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_i _x_10))) _term_9) in (let _type_11=(u fm_datatype_build_type _adt_4) in (let _type_12=(u (u (u fm_term_bind list_nil) (\_x_12-> (u bits_o _x_12))) _type_11) in (let _defs_13=(u (u (u (u (u (u (u fm_define _file_1) _code_2) _751) _term_10) _type_12) bool_false) _defs_3) in (let _defs_14=(u (u (u list_fold _754) _defs_13) (\_ctr_14-> (\_defs_15-> (let _typ_name_16=_751 in (let _ctr_name_17=(u string_flatten (u (u list_cons _typ_name_16) (u (u list_cons (u fm_name_read ".")) (u (u list_cons (let _755 = _ctr_14 in (case _755 of {(0,f) -> u f (\_756 _757 _758-> _756); }))) list_nil)))) in (let _ctr_term_18=(u (u fm_constructor_build_term _adt_4) _ctr_14) in (let _ctr_term_19=(u (u (u fm_term_bind list_nil) (\_x_19-> (u bits_i _x_19))) _ctr_term_18) in (let _ctr_type_20=(u (u fm_constructor_build_type _adt_4) _ctr_14) in (let _ctr_type_21=(u (u (u fm_term_bind list_nil) (\_x_21-> (u bits_o _x_21))) _ctr_type_20) in (u (u (u (u (u (u (u fm_define _file_1) _code_2) _ctr_name_17) _ctr_term_19) _ctr_type_21) bool_false) _defs_15)))))))))) in (u (u monad_pure parser_monad) _defs_14)))))))); })))))))
parser_eof = (\_idx_1-> (\_code_2-> (let _759 = _code_2 in (if null (_759::String) then (u (u (u parser_reply_value _idx_1) _code_2) unit_new) else (u (u (u parser_reply_error _idx_1) _code_2) "Expected end-of-file.")))))
fm_parser_file_end = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) fm_parser_spaces) (\__4-> (u (u (u monad_bind parser_monad) parser_eof) (\__5-> (u (u monad_pure parser_monad) _defs_3))))))))
fm_parser_file = (\_file_1-> (\_code_2-> (\_defs_3-> (u (u (u monad_bind parser_monad) parser_is_eof) (\_stop_4-> (let _760 = _stop_4 in (if _760 then (u (u monad_pure parser_monad) _defs_3) else (u parser_first_of (u (u list_cons (u (u (u monad_bind parser_monad) (u fm_parser_text "#")) (\__5-> (u (u (u monad_bind parser_monad) fm_parser_name1) (\_file_6-> (u (u (u fm_parser_file _file_6) _code_2) _defs_3)))))) (u (u list_cons (u (u (u monad_bind parser_monad) (u parser_first_of (u (u list_cons (u (u (u fm_parser_file_def _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_adt _file_1) _code_2) _defs_3)) (u (u list_cons (u (u (u fm_parser_file_end _file_1) _code_2) _defs_3)) list_nil))))) (\_defs_5-> (u (u (u fm_parser_file _file_1) _code_2) _defs_5)))) list_nil))))))))))
either = (\_a_1-> (\_b_2-> ()))
string_join_go = (\_sep_1-> (\_list_2-> (\_fst_3-> (let _761 = _list_2 in (case _761 of {(0,f) -> u f (""); (1,f) -> u f (\_762 _763-> (u string_flatten (u (u list_cons (let _764 = _fst_3 in (if _764 then "" else _sep_1))) (u (u list_cons _762) (u (u list_cons (u (u (u string_join_go _sep_1) _763) bool_false)) list_nil))))); })))))
string_join = (\_sep_1-> (\_list_2-> (u (u (u string_join_go _sep_1) _list_2) bool_true)))
fm_highlight_end = (\_col_1-> (\_row_2-> (\_res_3-> (u (u string_join "\n") _res_3))))
maybe_extract = (\_m_2-> (\_a_4-> (\_f_5-> (let _765 = _m_2 in (case _765 of {(0,f) -> u f (_a_4); (1,f) -> u f (\_766-> (u _f_5 _766)); })))))
nat_is_zero = (\_n_1-> (let _767 = _n_1 in (if _767==0 then bool_true else bool_false)))
nat_double = (\_n_1-> (let _768 = _n_1 in (if _768==0 then nat_zero else (u nat_succ (u nat_succ (u nat_double (_768-1)))))))
nat_pred = (\_n_1-> (let _769 = _n_1 in (if _769==0 then nat_zero else (_769-1))))
list_take = (\_n_2-> (\_xs_3-> (let _770 = _xs_3 in (case _770 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_771 _772-> (let _773 = _n_2 in (if _773==0 then list_nil else (u (u list_cons _771) (u (u list_take (_773-1)) _772))))); }))))
string_reverse_go = (\_xs_1-> (\_res_2-> (let _774 = _xs_1 in (if null (_774::String) then _res_2 else (u (u string_reverse_go (tail _774)) (u (u string_cons (fromIntegral (fromEnum (head _774 :: Char)) :: Word16)) _res_2))))))
string_reverse = (\_xs_1-> (u (u string_reverse_go _xs_1) string_nil))
string_pad_right = (\_size_1-> (\_chr_2-> (\_str_3-> (let _775 = _size_1 in (if _775==0 then _str_3 else (let _776 = _str_3 in (if null (_776::String) then (u (u string_cons _chr_2) (u (u (u string_pad_right (_775-1)) _chr_2) "")) else (u (u string_cons (fromIntegral (fromEnum (head _776 :: Char)) :: Word16)) (u (u (u string_pad_right (_775-1)) _chr_2) (tail _776))))))))))
string_pad_left = (\_size_1-> (\_chr_2-> (\_str_3-> (u string_reverse (u (u (u string_pad_right _size_1) _chr_2) (u string_reverse _str_3))))))
either_left = (\_value_3-> (0,\t-> t _value_3))
either_right = (\_value_3-> (1,\t-> t _value_3))
nat_sub_rem = (\_n_1-> (\_m_2-> (let _777 = _m_2 in (if _777==0 then (u either_left _n_1) else (let _778 = _n_1 in (if _778==0 then (u either_right (u nat_succ (_777-1))) else (u (u nat_sub_rem (_778-1)) (_777-1))))))))
nat_div_mod_go = (\_n_1-> (\_m_2-> (\_d_3-> (let _779 = (u (u nat_sub_rem _n_1) _m_2) in (case _779 of {(0,f) -> u f (\_780-> (u (u (u nat_div_mod_go _780) _m_2) (u nat_succ _d_3))); (1,f) -> u f (\_781-> (u (u pair_new _d_3) _n_1)); })))))
nat_div_mod = (\_n_1-> (\_m_2-> (u (u (u nat_div_mod_go _n_1) _m_2) nat_zero)))
nat_to_base_go = (\_base_1-> (\_nat_2-> (\_res_3-> (let _782 = (u (u nat_div_mod _nat_2) _base_1) in (case _782 of {(0,f) -> u f (\_783 _784-> (let _785 = _783 in (if _785==0 then (u (u list_cons _784) _res_3) else (u (u (u nat_to_base_go _base_1) _783) (u (u list_cons _784) _res_3))))); })))))
nat_to_base = (\_base_1-> (\_nat_2-> (u (u (u nat_to_base_go _base_1) _nat_2) list_nil)))
nat_mod = (\_n_1-> (\_m_2-> (u pair_snd (u (u nat_div_mod _n_1) _m_2))))
nat_lte = (\a0-> \a1-> ((a0::Integer) <= a1))
nat_show_digit = (\_base_1-> (\_n_2-> (let _m_3=(u (u nat_mod _n_2) _base_1) in (let _base64_4=(u (u list_cons 48) (u (u list_cons 49) (u (u list_cons 50) (u (u list_cons 51) (u (u list_cons 52) (u (u list_cons 53) (u (u list_cons 54) (u (u list_cons 55) (u (u list_cons 56) (u (u list_cons 57) (u (u list_cons 65) (u (u list_cons 66) (u (u list_cons 67) (u (u list_cons 68) (u (u list_cons 69) (u (u list_cons 70) (u (u list_cons 71) (u (u list_cons 72) (u (u list_cons 73) (u (u list_cons 74) (u (u list_cons 75) (u (u list_cons 76) (u (u list_cons 77) (u (u list_cons 78) (u (u list_cons 79) (u (u list_cons 80) (u (u list_cons 81) (u (u list_cons 82) (u (u list_cons 83) (u (u list_cons 84) (u (u list_cons 85) (u (u list_cons 86) (u (u list_cons 87) (u (u list_cons 88) (u (u list_cons 89) (u (u list_cons 90) (u (u list_cons 97) (u (u list_cons 98) (u (u list_cons 99) (u (u list_cons 100) (u (u list_cons 101) (u (u list_cons 102) (u (u list_cons 103) (u (u list_cons 104) (u (u list_cons 105) (u (u list_cons 106) (u (u list_cons 107) (u (u list_cons 108) (u (u list_cons 109) (u (u list_cons 110) (u (u list_cons 111) (u (u list_cons 112) (u (u list_cons 113) (u (u list_cons 114) (u (u list_cons 115) (u (u list_cons 116) (u (u list_cons 117) (u (u list_cons 118) (u (u list_cons 119) (u (u list_cons 120) (u (u list_cons 121) (u (u list_cons 122) (u (u list_cons 43) (u (u list_cons 47) list_nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (let _786 = (((((_base_1::Integer) > 0)) && (((_base_1::Integer) <= 64)))) in (if _786 then (let _787 = (u (u list_at _m_3) _base64_4) in (case _787 of {(0,f) -> u f (35); (1,f) -> u f (\_788-> _788); })) else 35))))))
nat_to_string_base = (\_base_1-> (\_nat_2-> (u (u (u list_fold (u (u nat_to_base _base_1) _nat_2)) string_nil) (\_n_3-> (\_str_4-> (u (u string_cons (u (u nat_show_digit _base_1) _n_3)) _str_4))))))
nat_show = (\_n_1-> (u (u nat_to_string_base 10) _n_1))
bool_not = (\a0-> (not a0))
fm_color = (\_col_1-> (\_str_2-> (u (u string_cons 27) (u (u string_cons 91) (((_col_1::String) ++ (u (u string_cons 109) (((_str_2::String) ++ (u (u string_cons 27) (u (u string_cons 91) (u (u string_cons 48) (u (u string_cons 109) string_nil)))))))))))))
fm_highlight_tc = (\_code_1-> (\_ix0_2-> (\_ix1_3-> (\_col_4-> (\_row_5-> (\_lft_6-> (\_lin_7-> (\_res_8-> (let _789 = _code_1 in (if null (_789::String) then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _790 = ((((fromIntegral (fromEnum (head _789 :: Char)) :: Word16)::Word16) == 10)) in (if _790 then (let _stp_11=(u (u (u maybe_extract _lft_6) bool_false) nat_is_zero) in (let _791 = _stp_11 in (if _791 then (u (u (u fm_highlight_end _col_4) _row_5) (u list_reverse _res_8)) else (let _spa_12=3 in (let _siz_13=(u nat_succ (u nat_double _spa_12)) in (let _lft_14=(let _792 = _ix1_3 in (if _792==0 then (let _793 = _lft_6 in (case _793 of {(0,f) -> u f ((u maybe_some _spa_12)); (1,f) -> u f (\_794-> (u maybe_some (u nat_pred _794))); })) else _lft_6)) in (let _ix0_15=(u nat_pred _ix0_2) in (let _ix1_16=(u nat_pred _ix1_3) in (let _col_17=0 in (let _row_18=(u nat_succ _row_5) in (let _res_19=(u (u list_take _siz_13) (u (u list_cons (u string_reverse _lin_7)) _res_8)) in (let _lin_20=(u string_reverse (u string_flatten (u (u list_cons (u (u (u string_pad_left 4) 32) (u nat_show _row_18))) (u (u list_cons " | ") list_nil)))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _789)) _ix0_15) _ix1_16) _col_17) _row_18) _lft_14) _lin_20) _res_19))))))))))))) else (let _chr_11=(u (u string_cons (fromIntegral (fromEnum (head _789 :: Char)) :: Word16)) string_nil) in (let _chr_12=(let _795 = (((u nat_is_zero _ix0_2) && ((not (u nat_is_zero _ix1_3))))) in (if _795 then (u string_reverse (u (u fm_color "31") (u (u fm_color "4") _chr_11))) else _chr_11)) in (let _ix0_13=(u nat_pred _ix0_2) in (let _ix1_14=(u nat_pred _ix1_3) in (let _col_15=(u nat_succ _col_4) in (let _lin_16=(u string_flatten (u (u list_cons _chr_12) (u (u list_cons _lin_7) list_nil))) in (u (u (u (u (u (u (u (u fm_highlight_tc (tail _789)) _ix0_13) _ix1_14) _col_15) _row_5) _lft_6) _lin_16) _res_8)))))))))))))))))))
fm_highlight = (\_code_1-> (\_idx0_2-> (\_idx1_3-> (u (u (u (u (u (u (u (u fm_highlight_tc _code_1) _idx0_2) _idx1_3) 0) 1) maybe_none) (u string_reverse "   1 | ")) list_nil))))
fm_defs_read = (\_file_1-> (\_code_2-> (\_defs_3-> (let _796 = (u (u (u (u (u fm_parser_file _file_1) _code_2) _defs_3) 0) _code_2) in (case _796 of {(0,f) -> u f (\_797 _798 _799-> (let _err_7=_799 in (let _hig_8=(u (u (u fm_highlight _code_2) _797) (u nat_succ _797)) in (let _str_9=(u string_flatten (u (u list_cons _err_7) (u (u list_cons "\n") (u (u list_cons _hig_8) list_nil)))) in (u either_left _str_9))))); (1,f) -> u f (\_800 _801 _802-> (u either_right _802)); })))))
fm_synth_load = (\_name_1-> (\_defs_2-> (let _file_3=(u fm_synth_file_of _name_1) in (u (u (u monad_bind io_monad) (u io_get_file _file_3)) (\_code_4-> (let _read_5=(u (u (u fm_defs_read _file_3) _code_4) _defs_2) in (let _803 = _read_5 in (case _803 of {(0,f) -> u f (\_804-> (u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_805-> (let _defs_7=_805 in (let _806 = (u (u fm_get _name_1) _defs_7) in (case _806 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_807-> (u (u monad_pure io_monad) (u maybe_some _defs_7))); })))); }))))))))
io_print = (\_text_1-> (u (u (u io_ask "print") _text_1) (\_skip_2-> (u io_end unit_new))))
fm_status_wait = (1,\t-> t)
fm_check = (\_v_1-> ())
fm_check_result = (\_value_2-> (\_errors_3-> (0,\t-> t _value_2 _errors_3)))
fm_check_bind = (\_a_3-> (\_f_4-> (let _808 = _a_3 in (case _808 of {(0,f) -> u f (\_809 _810-> (let _811 = _809 in (case _811 of {(0,f) -> u f ((u (u fm_check_result maybe_none) _810)); (1,f) -> u f (\_812-> (let _813 = (u _f_4 _812) in (case _813 of {(0,f) -> u f (\_814 _815-> (u (u fm_check_result _814) (u (u list_concat _810) _815))); }))); }))); }))))
fm_check_pure = (\_value_2-> (u (u fm_check_result (u maybe_some _value_2)) list_nil))
fm_check_monad = (u (u monad_new fm_check_bind) fm_check_pure)
fm_error_undefined_reference = (\_origin_1-> (\_name_2-> (5,\t-> t _origin_1 _name_2)))
fm_error_waiting = (\_name_1-> (2,\t-> t _name_1))
fm_error_indirect = (\_name_1-> (3,\t-> t _name_1))
maybe_mapped = (\_m_2-> (\_f_4-> (let _816 = _m_2 in (case _816 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_817-> (u maybe_some (u _f_4 _817))); }))))
fm_mpath_o = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_o))
fm_mpath_i = (\_path_1-> (u (u maybe_mapped _path_1) fm_path_i))
fm_error_cant_infer = (\_origin_1-> (\_term_2-> (\_context_3-> (6,\t-> t _origin_1 _term_2 _context_3))))
fm_error_type_mismatch = (\_origin_1-> (\_expected_2-> (\_detected_3-> (\_context_4-> (0,\t-> t _origin_1 _expected_2 _detected_3 _context_4)))))
fm_error_show_goal = (\_name_1-> (\_dref_2-> (\_verb_3-> (\_goal_4-> (\_context_5-> (1,\t-> t _name_1 _dref_2 _verb_3 _goal_4 _context_5))))))
list_tail = (\_xs_2-> (let _818 = _xs_2 in (case _818 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_819 _820-> _820); })))
fm_smartmotive_vals_cont = (\_expr_1-> (\_term_2-> (\_args_3-> (\_defs_4-> (let _821 = (u (u fm_term_reduce _term_2) _defs_4) in (case _821 of {(0,f) -> u f (\_822 _823-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (1,f) -> u f (\_824-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (2,f) -> u f ((u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (3,f) -> u f (\_825 _826 _827 _828 _829-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (4,f) -> u f (\_830 _831-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (5,f) -> u f (\_832 _833-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _832) (u (u list_cons _833) _args_3)) _defs_4)); (6,f) -> u f (\_834 _835 _836-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (7,f) -> u f (\_837 _838 _839-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (8,f) -> u f (\_840 _841 _842-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (9,f) -> u f (\_843 _844 _845-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (10,f) -> u f (\_846-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (11,f) -> u f (\_847-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (12,f) -> u f (\_848-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (13,f) -> u f (\_849-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (14,f) -> u f (\_850 _851 _852 _853 _854 _855-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); (15,f) -> u f (\_856 _857-> (u (u list_cons _expr_1) (u list_tail (u list_reverse _args_3)))); }))))))
fm_smartmotive_vals = (\_expr_1-> (\_type_2-> (\_defs_3-> (let _858 = (u (u fm_term_reduce _type_2) _defs_3) in (case _858 of {(0,f) -> u f (\_859 _860-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (1,f) -> u f (\_861-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (2,f) -> u f ((u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (3,f) -> u f (\_862 _863 _864 _865 _866-> (u (u (u fm_smartmotive_vals _expr_1) (u (u _866 fm_term_typ) fm_term_typ)) _defs_3)); (4,f) -> u f (\_867 _868-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (5,f) -> u f (\_869 _870-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (6,f) -> u f (\_871 _872 _873-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (7,f) -> u f (\_874 _875 _876-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (8,f) -> u f (\_877 _878 _879-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (9,f) -> u f (\_880 _881 _882-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (10,f) -> u f (\_883-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (11,f) -> u f (\_884-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (12,f) -> u f (\_885-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (13,f) -> u f (\_886-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (14,f) -> u f (\_887 _888 _889 _890 _891 _892-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); (15,f) -> u f (\_893 _894-> (u (u (u (u fm_smartmotive_vals_cont _expr_1) _type_2) list_nil) _defs_3)); })))))
fm_smartmotive_nams_cont = (\_name_1-> (\_term_2-> (\_binds_3-> (\_defs_4-> (let _895 = (u (u fm_term_reduce _term_2) _defs_4) in (case _895 of {(0,f) -> u f (\_896 _897-> (u (u list_cons _name_1) (u list_tail _binds_3))); (1,f) -> u f (\_898-> (u (u list_cons _name_1) (u list_tail _binds_3))); (2,f) -> u f ((u (u list_cons _name_1) (u list_tail _binds_3))); (3,f) -> u f (\_899 _900 _901 _902 _903-> (u (u (u (u fm_smartmotive_nams_cont _name_1) (u (u _903 (u fm_term_ref _900)) (u fm_term_ref _901))) (u (u list_cons (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _901) list_nil))))) _binds_3)) _defs_4)); (4,f) -> u f (\_904 _905-> (u (u list_cons _name_1) (u list_tail _binds_3))); (5,f) -> u f (\_906 _907-> (u (u list_cons _name_1) (u list_tail _binds_3))); (6,f) -> u f (\_908 _909 _910-> (u (u list_cons _name_1) (u list_tail _binds_3))); (7,f) -> u f (\_911 _912 _913-> (u (u list_cons _name_1) (u list_tail _binds_3))); (8,f) -> u f (\_914 _915 _916-> (u (u list_cons _name_1) (u list_tail _binds_3))); (9,f) -> u f (\_917 _918 _919-> (u (u list_cons _name_1) (u list_tail _binds_3))); (10,f) -> u f (\_920-> (u (u list_cons _name_1) (u list_tail _binds_3))); (11,f) -> u f (\_921-> (u (u list_cons _name_1) (u list_tail _binds_3))); (12,f) -> u f (\_922-> (u (u list_cons _name_1) (u list_tail _binds_3))); (13,f) -> u f (\_923-> (u (u list_cons _name_1) (u list_tail _binds_3))); (14,f) -> u f (\_924 _925 _926 _927 _928 _929-> (u (u list_cons _name_1) (u list_tail _binds_3))); (15,f) -> u f (\_930 _931-> (u (u list_cons _name_1) (u list_tail _binds_3))); }))))))
fm_smartmotive_nams = (\_name_1-> (\_type_2-> (\_defs_3-> (let _932 = (u (u fm_term_reduce _type_2) _defs_3) in (case _932 of {(0,f) -> u f (\_933 _934-> list_nil); (1,f) -> u f (\_935-> list_nil); (2,f) -> u f (list_nil); (3,f) -> u f (\_936 _937 _938 _939 _940-> (u (u (u (u fm_smartmotive_nams_cont _name_1) _939) list_nil) _defs_3)); (4,f) -> u f (\_941 _942-> list_nil); (5,f) -> u f (\_943 _944-> list_nil); (6,f) -> u f (\_945 _946 _947-> list_nil); (7,f) -> u f (\_948 _949 _950-> list_nil); (8,f) -> u f (\_951 _952 _953-> list_nil); (9,f) -> u f (\_954 _955 _956-> list_nil); (10,f) -> u f (\_957-> list_nil); (11,f) -> u f (\_958-> list_nil); (12,f) -> u f (\_959-> list_nil); (13,f) -> u f (\_960-> list_nil); (14,f) -> u f (\_961 _962 _963 _964 _965 _966-> list_nil); (15,f) -> u f (\_967 _968-> list_nil); })))))
list_zip = (\_as_3-> (\_bs_4-> (let _969 = _as_3 in (case _969 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_970 _971-> (let _972 = _bs_4 in (case _972 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_973 _974-> (u (u list_cons (u (u pair_new _970) _973)) (u (u list_zip _971) _974))); }))); }))))
cmp_as_gte = (\_cmp_1-> (let _975 = _cmp_1 in (case _975 of {(0,f) -> u f (bool_false); (1,f) -> u f (bool_true); (2,f) -> u f (bool_true); })))
nat_gte = (\a0-> \a1-> ((a0::Integer) >= a1))
nat_sub = (\a0-> \a1-> ((a0::Integer) - a1))
fm_term_serialize_name = (\_name_1-> (u fm_name_to_bits _name_1))
fm_term_serialize = (\_term_1-> (\_depth_2-> (\_init_3-> (\_x_4-> (let _976 = _term_1 in (case _976 of {(0,f) -> u f (\_977 _978-> (let _979 = (((_978::Integer) >= _init_3)) in (if _979 then (let _name_7=(u bits_concat (u nat_to_bits (u nat_pred (((_depth_2::Integer) - _978))))) in (u bits_o (u bits_o (u bits_i (u _name_7 _x_4))))) else (let _name_7=(u bits_concat (u nat_to_bits _978)) in (u bits_o (u bits_i (u bits_o (u _name_7 _x_4)))))))); (1,f) -> u f (\_980-> (let _name_6=(u bits_concat (u fm_term_serialize_name _980)) in (u bits_o (u bits_o (u bits_o (u _name_6 _x_4)))))); (2,f) -> u f ((u bits_o (u bits_i (u bits_i _x_4)))); (3,f) -> u f (\_981 _982 _983 _984 _985-> (let _eras_10=(let _986 = _981 in (if _986 then bits_i else bits_o)) in (let _self_11=(u bits_concat (u fm_name_to_bits _982)) in (let _xtyp_12=(u (u (u fm_term_serialize _984) _depth_2) _init_3) in (let _body_13=(u (u (u fm_term_serialize (u (u _985 (u (u fm_term_var _982) _depth_2)) (u (u fm_term_var _983) (u nat_succ _depth_2)))) (u nat_succ (u nat_succ _depth_2))) _init_3) in (u bits_i (u bits_o (u bits_o (u _eras_10 (u _self_11 (u _xtyp_12 (u _body_13 _x_4)))))))))))); (4,f) -> u f (\_987 _988-> (let _body_7=(u (u (u fm_term_serialize (u _988 (u (u fm_term_var _987) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_o (u bits_i (u _body_7 _x_4)))))); (5,f) -> u f (\_989 _990-> (let _func_7=(u (u (u fm_term_serialize _989) _depth_2) _init_3) in (let _argm_8=(u (u (u fm_term_serialize _990) _depth_2) _init_3) in (u bits_i (u bits_i (u bits_o (u _func_7 (u _argm_8 _x_4)))))))); (6,f) -> u f (\_991 _992 _993-> (let _expr_8=(u (u (u fm_term_serialize _992) _depth_2) _init_3) in (let _body_9=(u (u (u fm_term_serialize (u _993 (u (u fm_term_var _991) _depth_2))) (u nat_succ _depth_2)) _init_3) in (u bits_i (u bits_i (u bits_i (u _expr_8 (u _body_9 _x_4)))))))); (7,f) -> u f (\_994 _995 _996-> (u (u (u (u fm_term_serialize (u _996 _995)) _depth_2) _init_3) _x_4)); (8,f) -> u f (\_997 _998 _999-> (u (u (u (u fm_term_serialize _998) _depth_2) _init_3) _x_4)); (9,f) -> u f (\_1000 _1001 _1002-> (let _name_8=(u bits_concat (u fm_name_to_bits _1000)) in (u bits_o (u bits_o (u bits_o (u _name_8 _x_4)))))); (10,f) -> u f (\_1003-> _x_4); (11,f) -> u f (\_1004-> (u (u (u (u fm_term_serialize (u fm_term_unroll_nat _1004)) _depth_2) _init_3) _x_4)); (12,f) -> u f (\_1005-> (u (u (u (u fm_term_serialize (u fm_term_unroll_chr _1005)) _depth_2) _init_3) _x_4)); (13,f) -> u f (\_1006-> (u (u (u (u fm_term_serialize (u fm_term_unroll_str _1006)) _depth_2) _init_3) _x_4)); (14,f) -> u f (\_1007 _1008 _1009 _1010 _1011 _1012-> _x_4); (15,f) -> u f (\_1013 _1014-> (u (u (u (u fm_term_serialize _1014) _depth_2) _init_3) _x_4)); }))))))
bits_eql = (\_a_1-> (\_b_2-> (let _1015 = _a_1 in (case _1015 of {(0,f) -> u f ((let _1016 = _b_2 in (case _1016 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_1017-> bool_false); (2,f) -> u f (\_1018-> bool_false); }))); (1,f) -> u f (\_1019-> (let _1020 = _b_2 in (case _1020 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1021-> (u (u bits_eql _1019) _1021)); (2,f) -> u f (\_1022-> bool_false); }))); (2,f) -> u f (\_1023-> (let _1024 = _b_2 in (case _1024 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1025-> bool_false); (2,f) -> u f (\_1026-> (u (u bits_eql _1023) _1026)); }))); }))))
fm_term_identical = (\_a_1-> (\_b_2-> (\_lv_3-> (let _ah_4=(u (u (u (u fm_term_serialize _a_1) _lv_3) _lv_3) bits_e) in (let _bh_5=(u (u (u (u fm_term_serialize _b_2) _lv_3) _lv_3) bits_e) in (u (u bits_eql _ah_4) _bh_5))))))
fm_smartmotive_replace = (\_term_1-> (\_from_2-> (\_to_3-> (\_lv_4-> (let _1027 = (u (u (u fm_term_identical _term_1) _from_2) _lv_4) in (if _1027 then _to_3 else (let _1028 = _term_1 in (case _1028 of {(0,f) -> u f (\_1029 _1030-> (u (u fm_term_var _1029) _1030)); (1,f) -> u f (\_1031-> (u fm_term_ref _1031)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_1032 _1033 _1034 _1035 _1036-> (let _xtyp_10=(u (u (u (u fm_smartmotive_replace _1035) _from_2) _to_3) _lv_4) in (let _body_11=(u (u _1036 (u fm_term_ref _1033)) (u fm_term_ref _1034)) in (let _body_12=(u (u (u (u fm_smartmotive_replace _body_11) _from_2) _to_3) (u nat_succ (u nat_succ _lv_4))) in (u (u (u (u (u fm_term_all _1032) _1033) _1034) _xtyp_10) (\_s_13-> (\_x_14-> _body_12))))))); (4,f) -> u f (\_1037 _1038-> (let _body_7=(u _1038 (u fm_term_ref _1037)) in (let _body_8=(u (u (u (u fm_smartmotive_replace _body_7) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u fm_term_lam _1037) (\_x_9-> _body_8))))); (5,f) -> u f (\_1039 _1040-> (let _func_7=(u (u (u (u fm_smartmotive_replace _1039) _from_2) _to_3) _lv_4) in (let _argm_8=(u (u (u (u fm_smartmotive_replace _1040) _from_2) _to_3) _lv_4) in (u (u fm_term_app _func_7) _argm_8)))); (6,f) -> u f (\_1041 _1042 _1043-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _1042) _from_2) _to_3) _lv_4) in (let _body_9=(u _1043 (u fm_term_ref _1041)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_let _1041) _expr_8) (\_x_11-> _body_10)))))); (7,f) -> u f (\_1044 _1045 _1046-> (let _expr_8=(u (u (u (u fm_smartmotive_replace _1045) _from_2) _to_3) _lv_4) in (let _body_9=(u _1046 (u fm_term_ref _1044)) in (let _body_10=(u (u (u (u fm_smartmotive_replace _body_9) _from_2) _to_3) (u nat_succ _lv_4)) in (u (u (u fm_term_def _1044) _expr_8) (\_x_11-> _body_10)))))); (8,f) -> u f (\_1047 _1048 _1049-> (let _term_8=(u (u (u (u fm_smartmotive_replace _1048) _from_2) _to_3) _lv_4) in (let _type_9=(u (u (u (u fm_smartmotive_replace _1049) _from_2) _to_3) _lv_4) in (u (u (u fm_term_ann _1047) _term_8) _type_9)))); (9,f) -> u f (\_1050 _1051 _1052-> _term_1); (10,f) -> u f (\_1053-> _term_1); (11,f) -> u f (\_1054-> _term_1); (12,f) -> u f (\_1055-> _term_1); (13,f) -> u f (\_1056-> _term_1); (14,f) -> u f (\_1057 _1058 _1059 _1060 _1061 _1062-> _term_1); (15,f) -> u f (\_1063 _1064-> (u (u (u (u fm_smartmotive_replace _1064) _from_2) _to_3) _lv_4)); }))))))))
fm_smartmotive_make = (\_name_1-> (\_expr_2-> (\_type_3-> (\_moti_4-> (\_lv_5-> (\_defs_6-> (let _vals_7=(u (u (u fm_smartmotive_vals _expr_2) _type_3) _defs_6) in (let _nams_8=(u (u (u fm_smartmotive_nams _name_1) _type_3) _defs_6) in (let _subs_9=(u (u list_zip _nams_8) _vals_7) in (let _moti_10=(u (u (u list_fold _subs_9) _moti_4) (\_sub_10-> (\_moti_11-> (let _1065 = _sub_10 in (case _1065 of {(0,f) -> u f (\_1066 _1067-> (u (u (u (u fm_smartmotive_replace _moti_11) _1067) (u fm_term_ref _1066)) _lv_5)); }))))) in _moti_10))))))))))
fm_term_desugar_cse_motive = (\_wyth_1-> (\_moti_2-> (let _1068 = _wyth_1 in (case _1068 of {(0,f) -> u f (_moti_2); (1,f) -> u f (\_1069 _1070-> (let _1071 = _1069 in (case _1071 of {(0,f) -> u f (\_1072 _1073 _1074 _1075 _1076 _1077-> (u (u (u (u (u fm_term_all bool_false) "") _1074) _1076) (\_s_11-> (\_x_12-> (u (u fm_term_desugar_cse_motive _1070) _moti_2))))); }))); }))))
string_is_empty = (\_str_1-> (let _1078 = _str_1 in (if null (_1078::String) then bool_true else bool_false)))
fm_term_desugar_cse_argument = (\_name_1-> (\_wyth_2-> (\_type_3-> (\_body_4-> (\_defs_5-> (let _1079 = (u (u fm_term_reduce _type_3) _defs_5) in (case _1079 of {(0,f) -> u f (\_1080 _1081-> (let _1082 = _wyth_2 in (case _1082 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1083 _1084-> (let _1085 = _1083 in (case _1085 of {(0,f) -> u f (\_1086 _1087 _1088 _1089 _1090 _1091-> (u (u fm_term_lam _1088) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1084) _type_3) _body_4) _defs_5)))); }))); }))); (1,f) -> u f (\_1092-> (let _1093 = _wyth_2 in (case _1093 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1094 _1095-> (let _1096 = _1094 in (case _1096 of {(0,f) -> u f (\_1097 _1098 _1099 _1100 _1101 _1102-> (u (u fm_term_lam _1099) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1095) _type_3) _body_4) _defs_5)))); }))); }))); (2,f) -> u f ((let _1103 = _wyth_2 in (case _1103 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1104 _1105-> (let _1106 = _1104 in (case _1106 of {(0,f) -> u f (\_1107 _1108 _1109 _1110 _1111 _1112-> (u (u fm_term_lam _1109) (\_x_14-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1105) _type_3) _body_4) _defs_5)))); }))); }))); (3,f) -> u f (\_1113 _1114 _1115 _1116 _1117-> (u (u fm_term_lam (let _1118 = (u string_is_empty _1115) in (if _1118 then _name_1 else (u string_flatten (u (u list_cons _name_1) (u (u list_cons ".") (u (u list_cons _1115) list_nil))))))) (\_x_11-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _wyth_2) (u (u _1117 (u (u fm_term_var _1114) 0)) (u (u fm_term_var _1115) 0))) _body_4) _defs_5)))); (4,f) -> u f (\_1119 _1120-> (let _1121 = _wyth_2 in (case _1121 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1122 _1123-> (let _1124 = _1122 in (case _1124 of {(0,f) -> u f (\_1125 _1126 _1127 _1128 _1129 _1130-> (u (u fm_term_lam _1127) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1123) _type_3) _body_4) _defs_5)))); }))); }))); (5,f) -> u f (\_1131 _1132-> (let _1133 = _wyth_2 in (case _1133 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1134 _1135-> (let _1136 = _1134 in (case _1136 of {(0,f) -> u f (\_1137 _1138 _1139 _1140 _1141 _1142-> (u (u fm_term_lam _1139) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1135) _type_3) _body_4) _defs_5)))); }))); }))); (6,f) -> u f (\_1143 _1144 _1145-> (let _1146 = _wyth_2 in (case _1146 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1147 _1148-> (let _1149 = _1147 in (case _1149 of {(0,f) -> u f (\_1150 _1151 _1152 _1153 _1154 _1155-> (u (u fm_term_lam _1152) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1148) _type_3) _body_4) _defs_5)))); }))); }))); (7,f) -> u f (\_1156 _1157 _1158-> (let _1159 = _wyth_2 in (case _1159 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1160 _1161-> (let _1162 = _1160 in (case _1162 of {(0,f) -> u f (\_1163 _1164 _1165 _1166 _1167 _1168-> (u (u fm_term_lam _1165) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1161) _type_3) _body_4) _defs_5)))); }))); }))); (8,f) -> u f (\_1169 _1170 _1171-> (let _1172 = _wyth_2 in (case _1172 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1173 _1174-> (let _1175 = _1173 in (case _1175 of {(0,f) -> u f (\_1176 _1177 _1178 _1179 _1180 _1181-> (u (u fm_term_lam _1178) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1174) _type_3) _body_4) _defs_5)))); }))); }))); (9,f) -> u f (\_1182 _1183 _1184-> (let _1185 = _wyth_2 in (case _1185 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1186 _1187-> (let _1188 = _1186 in (case _1188 of {(0,f) -> u f (\_1189 _1190 _1191 _1192 _1193 _1194-> (u (u fm_term_lam _1191) (\_x_17-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1187) _type_3) _body_4) _defs_5)))); }))); }))); (10,f) -> u f (\_1195-> (let _1196 = _wyth_2 in (case _1196 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1197 _1198-> (let _1199 = _1197 in (case _1199 of {(0,f) -> u f (\_1200 _1201 _1202 _1203 _1204 _1205-> (u (u fm_term_lam _1202) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1198) _type_3) _body_4) _defs_5)))); }))); }))); (11,f) -> u f (\_1206-> (let _1207 = _wyth_2 in (case _1207 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1208 _1209-> (let _1210 = _1208 in (case _1210 of {(0,f) -> u f (\_1211 _1212 _1213 _1214 _1215 _1216-> (u (u fm_term_lam _1213) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1209) _type_3) _body_4) _defs_5)))); }))); }))); (12,f) -> u f (\_1217-> (let _1218 = _wyth_2 in (case _1218 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1219 _1220-> (let _1221 = _1219 in (case _1221 of {(0,f) -> u f (\_1222 _1223 _1224 _1225 _1226 _1227-> (u (u fm_term_lam _1224) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1220) _type_3) _body_4) _defs_5)))); }))); }))); (13,f) -> u f (\_1228-> (let _1229 = _wyth_2 in (case _1229 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1230 _1231-> (let _1232 = _1230 in (case _1232 of {(0,f) -> u f (\_1233 _1234 _1235 _1236 _1237 _1238-> (u (u fm_term_lam _1235) (\_x_15-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1231) _type_3) _body_4) _defs_5)))); }))); }))); (14,f) -> u f (\_1239 _1240 _1241 _1242 _1243 _1244-> (let _1245 = _wyth_2 in (case _1245 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1246 _1247-> (let _1248 = _1246 in (case _1248 of {(0,f) -> u f (\_1249 _1250 _1251 _1252 _1253 _1254-> (u (u fm_term_lam _1251) (\_x_20-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1247) _type_3) _body_4) _defs_5)))); }))); }))); (15,f) -> u f (\_1255 _1256-> (let _1257 = _wyth_2 in (case _1257 of {(0,f) -> u f (_body_4); (1,f) -> u f (\_1258 _1259-> (let _1260 = _1258 in (case _1260 of {(0,f) -> u f (\_1261 _1262 _1263 _1264 _1265 _1266-> (u (u fm_term_lam _1263) (\_x_16-> (u (u (u (u (u fm_term_desugar_cse_argument _name_1) _1259) _type_3) _body_4) _defs_5)))); }))); }))); })))))))
maybe_or = (\_a_2-> (\_b_3-> (let _1267 = _a_2 in (case _1267 of {(0,f) -> u f (_b_3); (1,f) -> u f (\_1268-> (u maybe_some _1268)); }))))
fm_term_desugar_cse_cases = (\_expr_1-> (\_name_2-> (\_wyth_3-> (\_cses_4-> (\_type_5-> (\_defs_6-> (\_ctxt_7-> (let _1269 = (u (u fm_term_reduce _type_5) _defs_6) in (case _1269 of {(0,f) -> u f (\_1270 _1271-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1272 = _defn_10 in (case _1272 of {(0,f) -> u f (\_1273 _1274 _1275 _1276 _1277 _1278-> _1276); })))))) in _expr_10)); (1,f) -> u f (\_1279-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1280 = _defn_9 in (case _1280 of {(0,f) -> u f (\_1281 _1282 _1283 _1284 _1285 _1286-> _1284); })))))) in _expr_9)); (2,f) -> u f ((let _expr_8=(u (u (u list_for _wyth_3) _expr_1) (\_defn_8-> (\_expr_9-> (u (u fm_term_app _expr_9) (let _1287 = _defn_8 in (case _1287 of {(0,f) -> u f (\_1288 _1289 _1290 _1291 _1292 _1293-> _1291); })))))) in _expr_8)); (3,f) -> u f (\_1294 _1295 _1296 _1297 _1298-> (let _got_13=(u (u maybe_or (u (u fm_get _1296) _cses_4)) (u (u fm_get "_") _cses_4)) in (let _1299 = _got_13 in (case _1299 of {(0,f) -> u f ((let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (let _1300 = _defn_14 in (case _1300 of {(0,f) -> u f (\_1301 _1302 _1303 _1304 _1305 _1306-> (u (u fm_term_app _expr_15) _1304)); }))))) in _expr_14)); (1,f) -> u f (\_1307-> (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) _wyth_3) _1297) _1307) _defs_6) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1298 (u (u fm_term_var _1295) 0)) (u (u fm_term_var _1296) 0)) in (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _wyth_3) _cses_4) _type_17) _defs_6) _ctxt_7))))); })))); (4,f) -> u f (\_1308 _1309-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1310 = _defn_10 in (case _1310 of {(0,f) -> u f (\_1311 _1312 _1313 _1314 _1315 _1316-> _1314); })))))) in _expr_10)); (5,f) -> u f (\_1317 _1318-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1319 = _defn_10 in (case _1319 of {(0,f) -> u f (\_1320 _1321 _1322 _1323 _1324 _1325-> _1323); })))))) in _expr_10)); (6,f) -> u f (\_1326 _1327 _1328-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1329 = _defn_11 in (case _1329 of {(0,f) -> u f (\_1330 _1331 _1332 _1333 _1334 _1335-> _1333); })))))) in _expr_11)); (7,f) -> u f (\_1336 _1337 _1338-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1339 = _defn_11 in (case _1339 of {(0,f) -> u f (\_1340 _1341 _1342 _1343 _1344 _1345-> _1343); })))))) in _expr_11)); (8,f) -> u f (\_1346 _1347 _1348-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1349 = _defn_11 in (case _1349 of {(0,f) -> u f (\_1350 _1351 _1352 _1353 _1354 _1355-> _1353); })))))) in _expr_11)); (9,f) -> u f (\_1356 _1357 _1358-> (let _expr_11=(u (u (u list_for _wyth_3) _expr_1) (\_defn_11-> (\_expr_12-> (u (u fm_term_app _expr_12) (let _1359 = _defn_11 in (case _1359 of {(0,f) -> u f (\_1360 _1361 _1362 _1363 _1364 _1365-> _1363); })))))) in _expr_11)); (10,f) -> u f (\_1366-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1367 = _defn_9 in (case _1367 of {(0,f) -> u f (\_1368 _1369 _1370 _1371 _1372 _1373-> _1371); })))))) in _expr_9)); (11,f) -> u f (\_1374-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1375 = _defn_9 in (case _1375 of {(0,f) -> u f (\_1376 _1377 _1378 _1379 _1380 _1381-> _1379); })))))) in _expr_9)); (12,f) -> u f (\_1382-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1383 = _defn_9 in (case _1383 of {(0,f) -> u f (\_1384 _1385 _1386 _1387 _1388 _1389-> _1387); })))))) in _expr_9)); (13,f) -> u f (\_1390-> (let _expr_9=(u (u (u list_for _wyth_3) _expr_1) (\_defn_9-> (\_expr_10-> (u (u fm_term_app _expr_10) (let _1391 = _defn_9 in (case _1391 of {(0,f) -> u f (\_1392 _1393 _1394 _1395 _1396 _1397-> _1395); })))))) in _expr_9)); (14,f) -> u f (\_1398 _1399 _1400 _1401 _1402 _1403-> (let _expr_14=(u (u (u list_for _wyth_3) _expr_1) (\_defn_14-> (\_expr_15-> (u (u fm_term_app _expr_15) (let _1404 = _defn_14 in (case _1404 of {(0,f) -> u f (\_1405 _1406 _1407 _1408 _1409 _1410-> _1408); })))))) in _expr_14)); (15,f) -> u f (\_1411 _1412-> (let _expr_10=(u (u (u list_for _wyth_3) _expr_1) (\_defn_10-> (\_expr_11-> (u (u fm_term_app _expr_11) (let _1413 = _defn_10 in (case _1413 of {(0,f) -> u f (\_1414 _1415 _1416 _1417 _1418 _1419-> _1417); })))))) in _expr_10)); })))))))))
fm_term_desugar_cse = (\_expr_1-> (\_name_2-> (\_with_3-> (\_cses_4-> (\_moti_5-> (\_type_6-> (\_defs_7-> (\_ctxt_8-> (let _1420 = (u (u fm_term_reduce _type_6) _defs_7) in (case _1420 of {(0,f) -> u f (\_1421 _1422-> maybe_none); (1,f) -> u f (\_1423-> maybe_none); (2,f) -> u f (maybe_none); (3,f) -> u f (\_1424 _1425 _1426 _1427 _1428-> (let _moti_14=(u (u fm_term_desugar_cse_motive _with_3) _moti_5) in (let _argm_15=(u (u (u (u (u fm_term_desugar_cse_argument _name_2) list_nil) _1427) _moti_14) _defs_7) in (let _expr_16=(u (u fm_term_app _expr_1) _argm_15) in (let _type_17=(u (u _1428 (u (u fm_term_var _1425) 0)) (u (u fm_term_var _1426) 0)) in (u maybe_some (u (u (u (u (u (u (u fm_term_desugar_cse_cases _expr_16) _name_2) _with_3) _cses_4) _type_17) _defs_7) _ctxt_8))))))); (4,f) -> u f (\_1429 _1430-> maybe_none); (5,f) -> u f (\_1431 _1432-> maybe_none); (6,f) -> u f (\_1433 _1434 _1435-> maybe_none); (7,f) -> u f (\_1436 _1437 _1438-> maybe_none); (8,f) -> u f (\_1439 _1440 _1441-> maybe_none); (9,f) -> u f (\_1442 _1443 _1444-> maybe_none); (10,f) -> u f (\_1445-> maybe_none); (11,f) -> u f (\_1446-> maybe_none); (12,f) -> u f (\_1447-> maybe_none); (13,f) -> u f (\_1448-> maybe_none); (14,f) -> u f (\_1449 _1450 _1451 _1452 _1453 _1454-> maybe_none); (15,f) -> u f (\_1455 _1456-> maybe_none); }))))))))))
fm_error_patch = (\_path_1-> (\_term_2-> (4,\t-> t _path_1 _term_2)))
fm_mpath_to_bits = (\_path_1-> (let _1457 = _path_1 in (case _1457 of {(0,f) -> u f (bits_e); (1,f) -> u f (\_1458-> (u _1458 bits_e)); })))
set_has = (\_bits_1-> (\_set_2-> (let _1459 = (u (u map_get _bits_1) _set_2) in (case _1459 of {(0,f) -> u f (bool_false); (1,f) -> u f (\_1460-> bool_true); }))))
fm_term_normalize = (\_term_1-> (\_defs_2-> (let _1461 = (u (u fm_term_reduce _term_1) _defs_2) in (case _1461 of {(0,f) -> u f (\_1462 _1463-> (u (u fm_term_var _1462) _1463)); (1,f) -> u f (\_1464-> (u fm_term_ref _1464)); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_1465 _1466 _1467 _1468 _1469-> (u (u (u (u (u fm_term_all _1465) _1466) _1467) (u (u fm_term_normalize _1468) _defs_2)) (\_s_8-> (\_x_9-> (u (u fm_term_normalize (u (u _1469 _s_8) _x_9)) _defs_2))))); (4,f) -> u f (\_1470 _1471-> (u (u fm_term_lam _1470) (\_x_5-> (u (u fm_term_normalize (u _1471 _x_5)) _defs_2)))); (5,f) -> u f (\_1472 _1473-> (u (u fm_term_app (u (u fm_term_normalize _1472) _defs_2)) (u (u fm_term_normalize _1473) _defs_2))); (6,f) -> u f (\_1474 _1475 _1476-> (u (u (u fm_term_let _1474) (u (u fm_term_normalize _1475) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1476 _x_6)) _defs_2)))); (7,f) -> u f (\_1477 _1478 _1479-> (u (u (u fm_term_def _1477) (u (u fm_term_normalize _1478) _defs_2)) (\_x_6-> (u (u fm_term_normalize (u _1479 _x_6)) _defs_2)))); (8,f) -> u f (\_1480 _1481 _1482-> (u (u (u fm_term_ann _1480) (u (u fm_term_normalize _1481) _defs_2)) (u (u fm_term_normalize _1482) _defs_2))); (9,f) -> u f (\_1483 _1484 _1485-> (u (u (u fm_term_gol _1483) _1484) _1485)); (10,f) -> u f (\_1486-> (u fm_term_hol _1486)); (11,f) -> u f (\_1487-> (u fm_term_nat _1487)); (12,f) -> u f (\_1488-> (u fm_term_chr _1488)); (13,f) -> u f (\_1489-> (u fm_term_str _1489)); (14,f) -> u f (\_1490 _1491 _1492 _1493 _1494 _1495-> _term_1); (15,f) -> u f (\_1496 _1497-> (u (u fm_term_normalize _1497) _defs_2)); }))))
fm_term_equal_patch = (\_path_2-> (\_term_3-> (\_ret_4-> (u (u fm_check_result (u maybe_some _ret_4)) (u (u list_cons (u (u fm_error_patch _path_2) (u (u fm_term_normalize _term_3) map_new))) list_nil)))))
fm_term_equal_extra_holes = (\_a_1-> (\_b_2-> (let _1498 = _a_1 in (case _1498 of {(0,f) -> u f (\_1499 _1500-> (let _1501 = _b_2 in (case _1501 of {(0,f) -> u f (\_1502 _1503-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1504-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1505 _1506 _1507 _1508 _1509-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1510 _1511-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1512 _1513-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1514 _1515 _1516-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1517 _1518 _1519-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1520 _1521 _1522-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1523 _1524 _1525-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1526-> (u (u (u fm_term_equal_patch _1526) _a_1) unit_new)); (11,f) -> u f (\_1527-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1528-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1529-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1530 _1531 _1532 _1533 _1534 _1535-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1536 _1537-> (u (u fm_term_equal_extra_holes _a_1) _1537)); }))); (1,f) -> u f (\_1538-> (let _1539 = _b_2 in (case _1539 of {(0,f) -> u f (\_1540 _1541-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1542-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1543 _1544 _1545 _1546 _1547-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1548 _1549-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1550 _1551-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1552 _1553 _1554-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1555 _1556 _1557-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1558 _1559 _1560-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1561 _1562 _1563-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1564-> (u (u (u fm_term_equal_patch _1564) _a_1) unit_new)); (11,f) -> u f (\_1565-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1566-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1567-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1568 _1569 _1570 _1571 _1572 _1573-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1574 _1575-> (u (u fm_term_equal_extra_holes _a_1) _1575)); }))); (2,f) -> u f ((let _1576 = _b_2 in (case _1576 of {(0,f) -> u f (\_1577 _1578-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1579-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1580 _1581 _1582 _1583 _1584-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1585 _1586-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1587 _1588-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1589 _1590 _1591-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1592 _1593 _1594-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1595 _1596 _1597-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1598 _1599 _1600-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1601-> (u (u (u fm_term_equal_patch _1601) _a_1) unit_new)); (11,f) -> u f (\_1602-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1603-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1604-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1605 _1606 _1607 _1608 _1609 _1610-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1611 _1612-> (u (u fm_term_equal_extra_holes _a_1) _1612)); }))); (3,f) -> u f (\_1613 _1614 _1615 _1616 _1617-> (let _1618 = _b_2 in (case _1618 of {(0,f) -> u f (\_1619 _1620-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1621-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1622 _1623 _1624 _1625 _1626-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1627 _1628-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1629 _1630-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1631 _1632 _1633-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1634 _1635 _1636-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1637 _1638 _1639-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1640 _1641 _1642-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1643-> (u (u (u fm_term_equal_patch _1643) _a_1) unit_new)); (11,f) -> u f (\_1644-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1645-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1646-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1647 _1648 _1649 _1650 _1651 _1652-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1653 _1654-> (u (u fm_term_equal_extra_holes _a_1) _1654)); }))); (4,f) -> u f (\_1655 _1656-> (let _1657 = _b_2 in (case _1657 of {(0,f) -> u f (\_1658 _1659-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1660-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1661 _1662 _1663 _1664 _1665-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1666 _1667-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1668 _1669-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1670 _1671 _1672-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1673 _1674 _1675-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1676 _1677 _1678-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1679 _1680 _1681-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1682-> (u (u (u fm_term_equal_patch _1682) _a_1) unit_new)); (11,f) -> u f (\_1683-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1684-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1685-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1686 _1687 _1688 _1689 _1690 _1691-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1692 _1693-> (u (u fm_term_equal_extra_holes _a_1) _1693)); }))); (5,f) -> u f (\_1694 _1695-> (let _1696 = _b_2 in (case _1696 of {(0,f) -> u f (\_1697 _1698-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1699-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1700 _1701 _1702 _1703 _1704-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1705 _1706-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1707 _1708-> (u (u (u monad_bind fm_check_monad) (u (u fm_term_equal_extra_holes _1694) _1707)) (\__7-> (u (u fm_term_equal_extra_holes _1695) _1708)))); (6,f) -> u f (\_1709 _1710 _1711-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1712 _1713 _1714-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1715 _1716 _1717-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1718 _1719 _1720-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1721-> (u (u (u fm_term_equal_patch _1721) _a_1) unit_new)); (11,f) -> u f (\_1722-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1723-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1724-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1725 _1726 _1727 _1728 _1729 _1730-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1731 _1732-> (u (u fm_term_equal_extra_holes _a_1) _1732)); }))); (6,f) -> u f (\_1733 _1734 _1735-> (let _1736 = _b_2 in (case _1736 of {(0,f) -> u f (\_1737 _1738-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1739-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1740 _1741 _1742 _1743 _1744-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1745 _1746-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1747 _1748-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1749 _1750 _1751-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1752 _1753 _1754-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1755 _1756 _1757-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1758 _1759 _1760-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1761-> (u (u (u fm_term_equal_patch _1761) _a_1) unit_new)); (11,f) -> u f (\_1762-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1763-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1764-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1765 _1766 _1767 _1768 _1769 _1770-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1771 _1772-> (u (u fm_term_equal_extra_holes _a_1) _1772)); }))); (7,f) -> u f (\_1773 _1774 _1775-> (let _1776 = _b_2 in (case _1776 of {(0,f) -> u f (\_1777 _1778-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1779-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1780 _1781 _1782 _1783 _1784-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1785 _1786-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1787 _1788-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1789 _1790 _1791-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1792 _1793 _1794-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1795 _1796 _1797-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1798 _1799 _1800-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1801-> (u (u (u fm_term_equal_patch _1801) _a_1) unit_new)); (11,f) -> u f (\_1802-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1803-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1804-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1805 _1806 _1807 _1808 _1809 _1810-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1811 _1812-> (u (u fm_term_equal_extra_holes _a_1) _1812)); }))); (8,f) -> u f (\_1813 _1814 _1815-> (let _1816 = _b_2 in (case _1816 of {(0,f) -> u f (\_1817 _1818-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1819-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1820 _1821 _1822 _1823 _1824-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1825 _1826-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1827 _1828-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1829 _1830 _1831-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1832 _1833 _1834-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1835 _1836 _1837-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1838 _1839 _1840-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1841-> (u (u (u fm_term_equal_patch _1841) _a_1) unit_new)); (11,f) -> u f (\_1842-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1843-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1844-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1845 _1846 _1847 _1848 _1849 _1850-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1851 _1852-> (u (u fm_term_equal_extra_holes _a_1) _1852)); }))); (9,f) -> u f (\_1853 _1854 _1855-> (let _1856 = _b_2 in (case _1856 of {(0,f) -> u f (\_1857 _1858-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1859-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1860 _1861 _1862 _1863 _1864-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1865 _1866-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1867 _1868-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1869 _1870 _1871-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1872 _1873 _1874-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1875 _1876 _1877-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1878 _1879 _1880-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1881-> (u (u (u fm_term_equal_patch _1881) _a_1) unit_new)); (11,f) -> u f (\_1882-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1883-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1884-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1885 _1886 _1887 _1888 _1889 _1890-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1891 _1892-> (u (u fm_term_equal_extra_holes _a_1) _1892)); }))); (10,f) -> u f (\_1893-> (u (u (u fm_term_equal_patch _1893) _b_2) unit_new)); (11,f) -> u f (\_1894-> (let _1895 = _b_2 in (case _1895 of {(0,f) -> u f (\_1896 _1897-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1898-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1899 _1900 _1901 _1902 _1903-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1904 _1905-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1906 _1907-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1908 _1909 _1910-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1911 _1912 _1913-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1914 _1915 _1916-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1917 _1918 _1919-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1920-> (u (u (u fm_term_equal_patch _1920) _a_1) unit_new)); (11,f) -> u f (\_1921-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1922-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1923-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1924 _1925 _1926 _1927 _1928 _1929-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1930 _1931-> (u (u fm_term_equal_extra_holes _a_1) _1931)); }))); (12,f) -> u f (\_1932-> (let _1933 = _b_2 in (case _1933 of {(0,f) -> u f (\_1934 _1935-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1936-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1937 _1938 _1939 _1940 _1941-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1942 _1943-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1944 _1945-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1946 _1947 _1948-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1949 _1950 _1951-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1952 _1953 _1954-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1955 _1956 _1957-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1958-> (u (u (u fm_term_equal_patch _1958) _a_1) unit_new)); (11,f) -> u f (\_1959-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1960-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1961-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_1962 _1963 _1964 _1965 _1966 _1967-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_1968 _1969-> (u (u fm_term_equal_extra_holes _a_1) _1969)); }))); (13,f) -> u f (\_1970-> (let _1971 = _b_2 in (case _1971 of {(0,f) -> u f (\_1972 _1973-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_1974-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_1975 _1976 _1977 _1978 _1979-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_1980 _1981-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_1982 _1983-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_1984 _1985 _1986-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_1987 _1988 _1989-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_1990 _1991 _1992-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_1993 _1994 _1995-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_1996-> (u (u (u fm_term_equal_patch _1996) _a_1) unit_new)); (11,f) -> u f (\_1997-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_1998-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_1999-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_2000 _2001 _2002 _2003 _2004 _2005-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_2006 _2007-> (u (u fm_term_equal_extra_holes _a_1) _2007)); }))); (14,f) -> u f (\_2008 _2009 _2010 _2011 _2012 _2013-> (let _2014 = _b_2 in (case _2014 of {(0,f) -> u f (\_2015 _2016-> (u (u monad_pure fm_check_monad) unit_new)); (1,f) -> u f (\_2017-> (u (u monad_pure fm_check_monad) unit_new)); (2,f) -> u f ((u (u monad_pure fm_check_monad) unit_new)); (3,f) -> u f (\_2018 _2019 _2020 _2021 _2022-> (u (u monad_pure fm_check_monad) unit_new)); (4,f) -> u f (\_2023 _2024-> (u (u monad_pure fm_check_monad) unit_new)); (5,f) -> u f (\_2025 _2026-> (u (u monad_pure fm_check_monad) unit_new)); (6,f) -> u f (\_2027 _2028 _2029-> (u (u monad_pure fm_check_monad) unit_new)); (7,f) -> u f (\_2030 _2031 _2032-> (u (u monad_pure fm_check_monad) unit_new)); (8,f) -> u f (\_2033 _2034 _2035-> (u (u monad_pure fm_check_monad) unit_new)); (9,f) -> u f (\_2036 _2037 _2038-> (u (u monad_pure fm_check_monad) unit_new)); (10,f) -> u f (\_2039-> (u (u (u fm_term_equal_patch _2039) _a_1) unit_new)); (11,f) -> u f (\_2040-> (u (u monad_pure fm_check_monad) unit_new)); (12,f) -> u f (\_2041-> (u (u monad_pure fm_check_monad) unit_new)); (13,f) -> u f (\_2042-> (u (u monad_pure fm_check_monad) unit_new)); (14,f) -> u f (\_2043 _2044 _2045 _2046 _2047 _2048-> (u (u monad_pure fm_check_monad) unit_new)); (15,f) -> u f (\_2049 _2050-> (u (u fm_term_equal_extra_holes _a_1) _2050)); }))); (15,f) -> u f (\_2051 _2052-> (u (u fm_term_equal_extra_holes _2052) _b_2)); }))))
set_set = (\_bits_1-> (\_set_2-> (u (u (u map_set _bits_1) unit_new) _set_2)))
bool_eql = (\_a_1-> (\_b_2-> (let _2053 = _a_1 in (if _2053 then _b_2 else ((not _b_2))))))
fm_term_equal = (\_a_1-> (\_b_2-> (\_defs_3-> (\_lv_4-> (\_seen_5-> (let _ah_6=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _a_1) map_new)) _lv_4) _lv_4) bits_e) in (let _bh_7=(u (u (u (u fm_term_serialize (u (u fm_term_reduce _b_2) map_new)) _lv_4) _lv_4) bits_e) in (let _2054 = (u (u bits_eql _ah_6) _bh_7) in (if _2054 then (u (u monad_pure fm_check_monad) bool_true) else (let _a1_8=(u (u fm_term_reduce _a_1) _defs_3) in (let _b1_9=(u (u fm_term_reduce _b_2) _defs_3) in (let _ah_10=(u (u (u (u fm_term_serialize _a1_8) _lv_4) _lv_4) bits_e) in (let _bh_11=(u (u (u (u fm_term_serialize _b1_9) _lv_4) _lv_4) bits_e) in (let _2055 = (u (u bits_eql _ah_10) _bh_11) in (if _2055 then (u (u monad_pure fm_check_monad) bool_true) else (let _id_12=(u (u bits_concat _ah_10) _bh_11) in (let _2056 = (u (u set_has _id_12) _seen_5) in (if _2056 then (u (u (u monad_bind fm_check_monad) (u (u fm_term_equal_extra_holes _a_1) _b_2)) (\__13-> (u (u monad_pure fm_check_monad) bool_true))) else (let _2057 = _a1_8 in (case _2057 of {(0,f) -> u f (\_2058 _2059-> (let _2060 = _b1_9 in (case _2060 of {(0,f) -> u f (\_2061 _2062-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2063-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2064 _2065 _2066 _2067 _2068-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2069 _2070-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2071 _2072-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2073 _2074 _2075-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2076 _2077 _2078-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2079 _2080 _2081-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2082 _2083 _2084-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2085-> (u (u (u fm_term_equal_patch _2085) _a_1) bool_true)); (11,f) -> u f (\_2086-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2087-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2088-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2089 _2090 _2091 _2092 _2093 _2094-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2095 _2096-> (u (u monad_pure fm_check_monad) bool_false)); }))); (1,f) -> u f (\_2097-> (let _2098 = _b1_9 in (case _2098 of {(0,f) -> u f (\_2099 _2100-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2101-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2102 _2103 _2104 _2105 _2106-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2107 _2108-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2109 _2110-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2111 _2112 _2113-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2114 _2115 _2116-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2117 _2118 _2119-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2120 _2121 _2122-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2123-> (u (u (u fm_term_equal_patch _2123) _a_1) bool_true)); (11,f) -> u f (\_2124-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2125-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2126-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2127 _2128 _2129 _2130 _2131 _2132-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2133 _2134-> (u (u monad_pure fm_check_monad) bool_false)); }))); (2,f) -> u f ((let _2135 = _b1_9 in (case _2135 of {(0,f) -> u f (\_2136 _2137-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2138-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2139 _2140 _2141 _2142 _2143-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2144 _2145-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2146 _2147-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2148 _2149 _2150-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2151 _2152 _2153-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2154 _2155 _2156-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2157 _2158 _2159-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2160-> (u (u (u fm_term_equal_patch _2160) _a_1) bool_true)); (11,f) -> u f (\_2161-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2162-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2163-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2164 _2165 _2166 _2167 _2168 _2169-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2170 _2171-> (u (u monad_pure fm_check_monad) bool_false)); }))); (3,f) -> u f (\_2172 _2173 _2174 _2175 _2176-> (let _2177 = _b1_9 in (case _2177 of {(0,f) -> u f (\_2178 _2179-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2180-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2181 _2182 _2183 _2184 _2185-> (let _seen_23=(u (u set_set _id_12) _seen_5) in (let _a1_body_24=(u (u _2176 (u (u fm_term_var _2173) _lv_4)) (u (u fm_term_var _2174) (u nat_succ _lv_4))) in (let _b1_body_25=(u (u _2185 (u (u fm_term_var _2182) _lv_4)) (u (u fm_term_var _2183) (u nat_succ _lv_4))) in (let _eq_self_26=(((_2173::String) == _2182)) in (let _eq_eras_27=(u (u bool_eql _2172) _2181) in (let _2186 = ((_eq_self_26 && _eq_eras_27)) in (if _2186 then (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2175) _2184) _defs_3) _lv_4) _seen_23)) (\_eq_type_28-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_24) _b1_body_25) _defs_3) (u nat_succ (u nat_succ _lv_4))) _seen_23)) (\_eq_body_29-> (u (u monad_pure fm_check_monad) ((_eq_type_28 && _eq_body_29))))))) else (u (u monad_pure fm_check_monad) bool_false))))))))); (4,f) -> u f (\_2187 _2188-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2189 _2190-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2191 _2192 _2193-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2194 _2195 _2196-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2197 _2198 _2199-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2200 _2201 _2202-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2203-> (u (u (u fm_term_equal_patch _2203) _a_1) bool_true)); (11,f) -> u f (\_2204-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2205-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2206-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2207 _2208 _2209 _2210 _2211 _2212-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2213 _2214-> (u (u monad_pure fm_check_monad) bool_false)); }))); (4,f) -> u f (\_2215 _2216-> (let _2217 = _b1_9 in (case _2217 of {(0,f) -> u f (\_2218 _2219-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2220-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2221 _2222 _2223 _2224 _2225-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2226 _2227-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (let _a1_body_18=(u _2216 (u (u fm_term_var _2215) _lv_4)) in (let _b1_body_19=(u _2227 (u (u fm_term_var _2226) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_18) _b1_body_19) _defs_3) (u nat_succ _lv_4)) _seen_17)) (\_eq_body_20-> (u (u monad_pure fm_check_monad) _eq_body_20))))))); (5,f) -> u f (\_2228 _2229-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2230 _2231 _2232-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2233 _2234 _2235-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2236 _2237 _2238-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2239 _2240 _2241-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2242-> (u (u (u fm_term_equal_patch _2242) _a_1) bool_true)); (11,f) -> u f (\_2243-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2244-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2245-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2246 _2247 _2248 _2249 _2250 _2251-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2252 _2253-> (u (u monad_pure fm_check_monad) bool_false)); }))); (5,f) -> u f (\_2254 _2255-> (let _2256 = _b1_9 in (case _2256 of {(0,f) -> u f (\_2257 _2258-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2259-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2260 _2261 _2262 _2263 _2264-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2265 _2266-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2267 _2268-> (let _seen_17=(u (u set_set _id_12) _seen_5) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2254) _2267) _defs_3) _lv_4) _seen_17)) (\_eq_func_18-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2255) _2268) _defs_3) _lv_4) _seen_17)) (\_eq_argm_19-> (u (u monad_pure fm_check_monad) ((_eq_func_18 && _eq_argm_19))))))))); (6,f) -> u f (\_2269 _2270 _2271-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2272 _2273 _2274-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2275 _2276 _2277-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2278 _2279 _2280-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2281-> (u (u (u fm_term_equal_patch _2281) _a_1) bool_true)); (11,f) -> u f (\_2282-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2283-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2284-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2285 _2286 _2287 _2288 _2289 _2290-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2291 _2292-> (u (u monad_pure fm_check_monad) bool_false)); }))); (6,f) -> u f (\_2293 _2294 _2295-> (let _2296 = _b1_9 in (case _2296 of {(0,f) -> u f (\_2297 _2298-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2299-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2300 _2301 _2302 _2303 _2304-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2305 _2306-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2307 _2308-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2309 _2310 _2311-> (let _seen_19=(u (u set_set _id_12) _seen_5) in (let _a1_body_20=(u _2295 (u (u fm_term_var _2293) _lv_4)) in (let _b1_body_21=(u _2311 (u (u fm_term_var _2309) _lv_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2294) _2310) _defs_3) _lv_4) _seen_19)) (\_eq_expr_22-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _a1_body_20) _b1_body_21) _defs_3) (u nat_succ _lv_4)) _seen_19)) (\_eq_body_23-> (u (u monad_pure fm_check_monad) ((_eq_expr_22 && _eq_body_23))))))))))); (7,f) -> u f (\_2312 _2313 _2314-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2315 _2316 _2317-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2318 _2319 _2320-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2321-> (u (u (u fm_term_equal_patch _2321) _a_1) bool_true)); (11,f) -> u f (\_2322-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2323-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2324-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2325 _2326 _2327 _2328 _2329 _2330-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2331 _2332-> (u (u monad_pure fm_check_monad) bool_false)); }))); (7,f) -> u f (\_2333 _2334 _2335-> (let _2336 = _b1_9 in (case _2336 of {(0,f) -> u f (\_2337 _2338-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2339-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2340 _2341 _2342 _2343 _2344-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2345 _2346-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2347 _2348-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2349 _2350 _2351-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2352 _2353 _2354-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2355 _2356 _2357-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2358 _2359 _2360-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2361-> (u (u (u fm_term_equal_patch _2361) _a_1) bool_true)); (11,f) -> u f (\_2362-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2363-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2364-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2365 _2366 _2367 _2368 _2369 _2370-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2371 _2372-> (u (u monad_pure fm_check_monad) bool_false)); }))); (8,f) -> u f (\_2373 _2374 _2375-> (let _2376 = _b1_9 in (case _2376 of {(0,f) -> u f (\_2377 _2378-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2379-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2380 _2381 _2382 _2383 _2384-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2385 _2386-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2387 _2388-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2389 _2390 _2391-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2392 _2393 _2394-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2395 _2396 _2397-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2398 _2399 _2400-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2401-> (u (u (u fm_term_equal_patch _2401) _a_1) bool_true)); (11,f) -> u f (\_2402-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2403-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2404-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2405 _2406 _2407 _2408 _2409 _2410-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2411 _2412-> (u (u monad_pure fm_check_monad) bool_false)); }))); (9,f) -> u f (\_2413 _2414 _2415-> (let _2416 = _b1_9 in (case _2416 of {(0,f) -> u f (\_2417 _2418-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2419-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2420 _2421 _2422 _2423 _2424-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2425 _2426-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2427 _2428-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2429 _2430 _2431-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2432 _2433 _2434-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2435 _2436 _2437-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2438 _2439 _2440-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2441-> (u (u (u fm_term_equal_patch _2441) _a_1) bool_true)); (11,f) -> u f (\_2442-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2443-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2444-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2445 _2446 _2447 _2448 _2449 _2450-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2451 _2452-> (u (u monad_pure fm_check_monad) bool_false)); }))); (10,f) -> u f (\_2453-> (u (u (u fm_term_equal_patch _2453) _b_2) bool_true)); (11,f) -> u f (\_2454-> (let _2455 = _b1_9 in (case _2455 of {(0,f) -> u f (\_2456 _2457-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2458-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2459 _2460 _2461 _2462 _2463-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2464 _2465-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2466 _2467-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2468 _2469 _2470-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2471 _2472 _2473-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2474 _2475 _2476-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2477 _2478 _2479-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2480-> (u (u (u fm_term_equal_patch _2480) _a_1) bool_true)); (11,f) -> u f (\_2481-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2482-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2483-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2484 _2485 _2486 _2487 _2488 _2489-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2490 _2491-> (u (u monad_pure fm_check_monad) bool_false)); }))); (12,f) -> u f (\_2492-> (let _2493 = _b1_9 in (case _2493 of {(0,f) -> u f (\_2494 _2495-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2496-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2497 _2498 _2499 _2500 _2501-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2502 _2503-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2504 _2505-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2506 _2507 _2508-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2509 _2510 _2511-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2512 _2513 _2514-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2515 _2516 _2517-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2518-> (u (u (u fm_term_equal_patch _2518) _a_1) bool_true)); (11,f) -> u f (\_2519-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2520-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2521-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2522 _2523 _2524 _2525 _2526 _2527-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2528 _2529-> (u (u monad_pure fm_check_monad) bool_false)); }))); (13,f) -> u f (\_2530-> (let _2531 = _b1_9 in (case _2531 of {(0,f) -> u f (\_2532 _2533-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2534-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2535 _2536 _2537 _2538 _2539-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2540 _2541-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2542 _2543-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2544 _2545 _2546-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2547 _2548 _2549-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2550 _2551 _2552-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2553 _2554 _2555-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2556-> (u (u (u fm_term_equal_patch _2556) _a_1) bool_true)); (11,f) -> u f (\_2557-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2558-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2559-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2560 _2561 _2562 _2563 _2564 _2565-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2566 _2567-> (u (u monad_pure fm_check_monad) bool_false)); }))); (14,f) -> u f (\_2568 _2569 _2570 _2571 _2572 _2573-> (let _2574 = _b1_9 in (case _2574 of {(0,f) -> u f (\_2575 _2576-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2577-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2578 _2579 _2580 _2581 _2582-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2583 _2584-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2585 _2586-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2587 _2588 _2589-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2590 _2591 _2592-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2593 _2594 _2595-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2596 _2597 _2598-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2599-> (u (u (u fm_term_equal_patch _2599) _a_1) bool_true)); (11,f) -> u f (\_2600-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2601-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2602-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2603 _2604 _2605 _2606 _2607 _2608-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2609 _2610-> (u (u monad_pure fm_check_monad) bool_false)); }))); (15,f) -> u f (\_2611 _2612-> (let _2613 = _b1_9 in (case _2613 of {(0,f) -> u f (\_2614 _2615-> (u (u monad_pure fm_check_monad) bool_false)); (1,f) -> u f (\_2616-> (u (u monad_pure fm_check_monad) bool_false)); (2,f) -> u f ((u (u monad_pure fm_check_monad) bool_false)); (3,f) -> u f (\_2617 _2618 _2619 _2620 _2621-> (u (u monad_pure fm_check_monad) bool_false)); (4,f) -> u f (\_2622 _2623-> (u (u monad_pure fm_check_monad) bool_false)); (5,f) -> u f (\_2624 _2625-> (u (u monad_pure fm_check_monad) bool_false)); (6,f) -> u f (\_2626 _2627 _2628-> (u (u monad_pure fm_check_monad) bool_false)); (7,f) -> u f (\_2629 _2630 _2631-> (u (u monad_pure fm_check_monad) bool_false)); (8,f) -> u f (\_2632 _2633 _2634-> (u (u monad_pure fm_check_monad) bool_false)); (9,f) -> u f (\_2635 _2636 _2637-> (u (u monad_pure fm_check_monad) bool_false)); (10,f) -> u f (\_2638-> (u (u (u fm_term_equal_patch _2638) _a_1) bool_true)); (11,f) -> u f (\_2639-> (u (u monad_pure fm_check_monad) bool_false)); (12,f) -> u f (\_2640-> (u (u monad_pure fm_check_monad) bool_false)); (13,f) -> u f (\_2641-> (u (u monad_pure fm_check_monad) bool_false)); (14,f) -> u f (\_2642 _2643 _2644 _2645 _2646 _2647-> (u (u monad_pure fm_check_monad) bool_false)); (15,f) -> u f (\_2648 _2649-> (u (u monad_pure fm_check_monad) bool_false)); }))); }))))))))))))))))))))
set_new = map_new
fm_term_check = (\_term_1-> (\_type_2-> (\_defs_3-> (\_ctx_4-> (\_path_5-> (\_orig_6-> (u (u (u monad_bind fm_check_monad) (let _2650 = _term_1 in (case _2650 of {(0,f) -> u f (\_2651 _2652-> (let _2653 = (u (u list_at_last _2652) _ctx_4) in (case _2653 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2651)) list_nil))); (1,f) -> u f (\_2654-> (u (u monad_pure fm_check_monad) (let _2655 = _2654 in (case _2655 of {(0,f) -> u f (\_2656 _2657-> _2657); })))); }))); (1,f) -> u f (\_2658-> (let _2659 = (u (u fm_get _2658) _defs_3) in (case _2659 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_undefined_reference _orig_6) _2658)) list_nil))); (1,f) -> u f (\_2660-> (let _2661 = _2660 in (case _2661 of {(0,f) -> u f (\_2662 _2663 _2664 _2665 _2666 _2667-> (let _ref_name_15=_2664 in (let _ref_type_16=_2666 in (let _ref_term_17=_2665 in (let _ref_stat_18=_2667 in (let _2668 = _ref_stat_18 in (case _2668 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_waiting _ref_name_15)) list_nil))); (1,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (2,f) -> u f ((u (u fm_check_result (u maybe_some _ref_type_16)) list_nil)); (3,f) -> u f (\_2669-> (u (u fm_check_result (u maybe_some _ref_type_16)) (u (u list_cons (u fm_error_indirect _ref_name_15)) list_nil))); }))))))); }))); }))); (2,f) -> u f ((u (u monad_pure fm_check_monad) fm_term_typ)); (3,f) -> u f (\_2670 _2671 _2672 _2673 _2674-> (let _ctx_size_12=(u list_length _ctx_4) in (let _self_var_13=(u (u fm_term_var _2671) _ctx_size_12) in (let _body_var_14=(u (u fm_term_var _2672) (u nat_succ _ctx_size_12)) in (let _body_ctx_15=(u (u list_cons (u (u pair_new _2672) _2673)) (u (u list_cons (u (u pair_new _2671) _term_1)) _ctx_4)) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2673) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__16-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u (u _2674 _self_var_13) _body_var_14)) (u maybe_some fm_term_typ)) _defs_3) _body_ctx_15) (u fm_mpath_i _path_5)) _orig_6)) (\__17-> (u (u monad_pure fm_check_monad) fm_term_typ)))))))))); (4,f) -> u f (\_2675 _2676-> (let _2677 = _type_2 in (case _2677 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2678-> (let _typv_10=(u (u fm_term_reduce _2678) _defs_3) in (let _2679 = _typv_10 in (case _2679 of {(0,f) -> u f (\_2680 _2681-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2682-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2683 _2684 _2685 _2686 _2687-> (let _ctx_size_16=(u list_length _ctx_4) in (let _self_var_17=_term_1 in (let _body_var_18=(u (u fm_term_var _2675) _ctx_size_16) in (let _body_typ_19=(u (u _2687 _self_var_17) _body_var_18) in (let _body_ctx_20=(u (u list_cons (u (u pair_new _2675) _2686)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check (u _2676 _body_var_18)) (u maybe_some _body_typ_19)) _defs_3) _body_ctx_20) (u fm_mpath_o _path_5)) _orig_6)) (\__21-> (u (u monad_pure fm_check_monad) _2678))))))))); (4,f) -> u f (\_2688 _2689-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2690 _2691-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2692 _2693 _2694-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2695 _2696 _2697-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2698 _2699 _2700-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2701 _2702 _2703-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2704-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2705-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2706-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2707-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2708 _2709 _2710 _2711 _2712 _2713-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2714 _2715-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _2678) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))); }))); (5,f) -> u f (\_2716 _2717-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2716) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_func_typ_9-> (let _func_typ_10=(u (u fm_term_reduce _func_typ_9) _defs_3) in (let _2718 = _func_typ_10 in (case _2718 of {(0,f) -> u f (\_2719 _2720-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (1,f) -> u f (\_2721-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (2,f) -> u f ((let _expected_11=(u either_left "Function") in (let _detected_12=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_11) _detected_12) _ctx_4)) list_nil))))); (3,f) -> u f (\_2722 _2723 _2724 _2725 _2726-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2717) (u maybe_some _2725)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__16-> (u (u monad_pure fm_check_monad) (u (u _2726 _2716) _2717))))); (4,f) -> u f (\_2727 _2728-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (5,f) -> u f (\_2729 _2730-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); (6,f) -> u f (\_2731 _2732 _2733-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (7,f) -> u f (\_2734 _2735 _2736-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (8,f) -> u f (\_2737 _2738 _2739-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (9,f) -> u f (\_2740 _2741 _2742-> (let _expected_14=(u either_left "Function") in (let _detected_15=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_14) _detected_15) _ctx_4)) list_nil))))); (10,f) -> u f (\_2743-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (11,f) -> u f (\_2744-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (12,f) -> u f (\_2745-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (13,f) -> u f (\_2746-> (let _expected_12=(u either_left "Function") in (let _detected_13=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_12) _detected_13) _ctx_4)) list_nil))))); (14,f) -> u f (\_2747 _2748 _2749 _2750 _2751 _2752-> (let _expected_17=(u either_left "Function") in (let _detected_18=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_17) _detected_18) _ctx_4)) list_nil))))); (15,f) -> u f (\_2753 _2754-> (let _expected_13=(u either_left "Function") in (let _detected_14=(u either_right _func_typ_10) in (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) _expected_13) _detected_14) _ctx_4)) list_nil))))); })))))); (6,f) -> u f (\_2755 _2756 _2757-> (let _ctx_size_10=(u list_length _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2756) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_expr_typ_11-> (let _body_val_12=(u _2757 (u (u fm_term_var _2755) _ctx_size_10)) in (let _body_ctx_13=(u (u list_cons (u (u pair_new _2755) _expr_typ_11)) _ctx_4) in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _body_val_12) _type_2) _defs_3) _body_ctx_13) (u fm_mpath_i _path_5)) _orig_6)) (\_body_typ_14-> (u (u monad_pure fm_check_monad) _body_typ_14))))))))); (7,f) -> u f (\_2758 _2759 _2760-> (u (u (u (u (u (u fm_term_check (u _2760 _2759)) _type_2) _defs_3) _ctx_4) _path_5) _orig_6)); (8,f) -> u f (\_2761 _2762 _2763-> (let _2764 = _2761 in (if _2764 then (u (u monad_pure fm_check_monad) _2763) else (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2762) (u maybe_some _2763)) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\__10-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _2763) (u maybe_some fm_term_typ)) _defs_3) _ctx_4) (u fm_mpath_i _path_5)) _orig_6)) (\__11-> (u (u monad_pure fm_check_monad) _2763)))))))); (9,f) -> u f (\_2765 _2766 _2767-> (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u (u fm_error_show_goal _2765) _2766) _2767) _type_2) _ctx_4)) list_nil))); (10,f) -> u f (\_2768-> (u (u fm_check_result _type_2) list_nil)); (11,f) -> u f (\_2769-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Nat"))); (12,f) -> u f (\_2770-> (u (u monad_pure fm_check_monad) (u fm_term_ref "Char"))); (13,f) -> u f (\_2771-> (u (u monad_pure fm_check_monad) (u fm_term_ref "String"))); (14,f) -> u f (\_2772 _2773 _2774 _2775 _2776 _2777-> (let _expr_13=_2773 in (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _expr_13) maybe_none) _defs_3) _ctx_4) (u fm_mpath_o _path_5)) _orig_6)) (\_etyp_14-> (let _dsug_15=(let _2778 = _2777 in (case _2778 of {(0,f) -> u f ((let _moti_15=(let _2779 = _type_2 in (case _2779 of {(0,f) -> u f ((u fm_term_hol bits_e)); (1,f) -> u f (\_2780-> (let _size_16=(u list_length _ctx_4) in (let _moti_17=(u (u (u (u (u (u fm_smartmotive_make _2774) _2773) _etyp_14) _2780) _size_16) _defs_3) in _moti_17))); })) in (u maybe_some (u (u (u (u (u (u fm_term_cse _2772) _2773) _2774) _2775) _2776) (u maybe_some _moti_15))))); (1,f) -> u f (\_2781-> (u (u (u (u (u (u (u (u fm_term_desugar_cse _2773) _2774) _2775) _2776) _2781) _etyp_14) _defs_3) _ctx_4)); })) in (let _2782 = _dsug_15 in (case _2782 of {(0,f) -> u f ((u (u fm_check_result _type_2) (u (u list_cons (u (u (u fm_error_cant_infer _orig_6) _term_1) _ctx_4)) list_nil))); (1,f) -> u f (\_2783-> (u (u fm_check_result _type_2) (u (u list_cons (u (u fm_error_patch (u fm_mpath_to_bits _path_5)) _2783)) list_nil))); }))))))); (15,f) -> u f (\_2784 _2785-> (u (u (u (u (u (u fm_term_check _2785) _type_2) _defs_3) _ctx_4) _path_5) (u maybe_some _2784))); }))) (\_infr_7-> (let _2786 = _type_2 in (case _2786 of {(0,f) -> u f ((u (u fm_check_result (u maybe_some _infr_7)) list_nil)); (1,f) -> u f (\_2787-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u fm_term_equal _2787) _infr_7) _defs_3) (u list_length _ctx_4)) set_new)) (\_eqls_9-> (let _2788 = _eqls_9 in (if _2788 then (u (u monad_pure fm_check_monad) _2787) else (u (u fm_check_result _type_2) (u (u list_cons (u (u (u (u fm_error_type_mismatch _orig_6) (u either_right _2787)) (u either_right _infr_7)) _ctx_4)) list_nil))))))); }))))))))))
fm_path_nil = (\_x_1-> _x_1)
fm_mpath_nil = (u maybe_some fm_path_nil)
list_is_empty = (\_list_2-> (let _2789 = _list_2 in (case _2789 of {(0,f) -> u f (bool_true); (1,f) -> u f (\_2790 _2791-> bool_false); })))
fm_term_patch_at = (\_path_1-> (\_term_2-> (\_fn_3-> (let _2792 = _term_2 in (case _2792 of {(0,f) -> u f (\_2793 _2794-> (let _2795 = _path_1 in (case _2795 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2796-> _term_2); (2,f) -> u f (\_2797-> _term_2); }))); (1,f) -> u f (\_2798-> (let _2799 = _path_1 in (case _2799 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2800-> _term_2); (2,f) -> u f (\_2801-> _term_2); }))); (2,f) -> u f ((let _2802 = _path_1 in (case _2802 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2803-> _term_2); (2,f) -> u f (\_2804-> _term_2); }))); (3,f) -> u f (\_2805 _2806 _2807 _2808 _2809-> (let _2810 = _path_1 in (case _2810 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2811-> (u (u (u (u (u fm_term_all _2805) _2806) _2807) (u (u (u fm_term_patch_at _2811) _2808) _fn_3)) _2809)); (2,f) -> u f (\_2812-> (u (u (u (u (u fm_term_all _2805) _2806) _2807) _2808) (\_s_10-> (\_x_11-> (u (u (u fm_term_patch_at _2812) (u (u _2809 _s_10) _x_11)) _fn_3))))); }))); (4,f) -> u f (\_2813 _2814-> (let _2815 = _path_1 in (case _2815 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2816-> (u (u fm_term_lam _2813) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2814 _x_7)) _fn_3)))); (2,f) -> u f (\_2817-> (u (u fm_term_lam _2813) (\_x_7-> (u (u (u fm_term_patch_at (u bits_tail _path_1)) (u _2814 _x_7)) _fn_3)))); }))); (5,f) -> u f (\_2818 _2819-> (let _2820 = _path_1 in (case _2820 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2821-> (u (u fm_term_app (u (u (u fm_term_patch_at _2821) _2818) _fn_3)) _2819)); (2,f) -> u f (\_2822-> (u (u fm_term_app _2818) (u (u (u fm_term_patch_at _2822) _2819) _fn_3))); }))); (6,f) -> u f (\_2823 _2824 _2825-> (let _2826 = _path_1 in (case _2826 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2827-> (u (u (u fm_term_let _2823) (u (u (u fm_term_patch_at _2827) _2824) _fn_3)) _2825)); (2,f) -> u f (\_2828-> (u (u (u fm_term_let _2823) _2824) (\_x_8-> (u (u (u fm_term_patch_at _2828) (u _2825 _x_8)) _fn_3)))); }))); (7,f) -> u f (\_2829 _2830 _2831-> (let _2832 = _path_1 in (case _2832 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2833-> (u (u (u fm_term_def _2829) (u (u (u fm_term_patch_at _2833) _2830) _fn_3)) _2831)); (2,f) -> u f (\_2834-> (u (u (u fm_term_def _2829) _2830) (\_x_8-> (u (u (u fm_term_patch_at _2834) (u _2831 _x_8)) _fn_3)))); }))); (8,f) -> u f (\_2835 _2836 _2837-> (let _2838 = _path_1 in (case _2838 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2839-> (u (u (u fm_term_ann _2835) (u (u (u fm_term_patch_at _path_1) _2836) _fn_3)) _2837)); (2,f) -> u f (\_2840-> (u (u (u fm_term_ann _2835) (u (u (u fm_term_patch_at _path_1) _2836) _fn_3)) _2837)); }))); (9,f) -> u f (\_2841 _2842 _2843-> (let _2844 = _path_1 in (case _2844 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2845-> _term_2); (2,f) -> u f (\_2846-> _term_2); }))); (10,f) -> u f (\_2847-> (let _2848 = _path_1 in (case _2848 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2849-> _term_2); (2,f) -> u f (\_2850-> _term_2); }))); (11,f) -> u f (\_2851-> (let _2852 = _path_1 in (case _2852 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2853-> _term_2); (2,f) -> u f (\_2854-> _term_2); }))); (12,f) -> u f (\_2855-> (let _2856 = _path_1 in (case _2856 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2857-> _term_2); (2,f) -> u f (\_2858-> _term_2); }))); (13,f) -> u f (\_2859-> (let _2860 = _path_1 in (case _2860 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2861-> _term_2); (2,f) -> u f (\_2862-> _term_2); }))); (14,f) -> u f (\_2863 _2864 _2865 _2866 _2867 _2868-> (let _2869 = _path_1 in (case _2869 of {(0,f) -> u f ((u _fn_3 _term_2)); (1,f) -> u f (\_2870-> _term_2); (2,f) -> u f (\_2871-> _term_2); }))); (15,f) -> u f (\_2872 _2873-> (u (u (u fm_term_patch_at _path_1) _2873) _fn_3)); })))))
fm_synth_fix = (\_file_1-> (\_code_2-> (\_name_3-> (\_term_4-> (\_type_5-> (\_defs_6-> (\_errs_7-> (\_fixd_8-> (let _2874 = _errs_7 in (case _2874 of {(0,f) -> u f ((let _2875 = _fixd_8 in (if _2875 then (let _type_9=(u (u (u fm_term_bind list_nil) (\_x_9-> (u bits_i _x_9))) _type_5) in (let _term_10=(u (u (u fm_term_bind list_nil) (\_x_10-> (u bits_o _x_10))) _term_4) in (let _defs_11=(u (u (u fm_set _name_3) (u (u (u (u (u (u fm_def_new _file_1) _code_2) _name_3) _term_10) _type_9) fm_status_init)) _defs_6) in (u (u monad_pure io_monad) (u maybe_some _defs_11))))) else (u (u monad_pure io_monad) maybe_none)))); (1,f) -> u f (\_2876 _2877-> (let _2878 = _2876 in (case _2878 of {(0,f) -> u f (\_2879 _2880 _2881 _2882-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2877) _fixd_8)); (1,f) -> u f (\_2883 _2884 _2885 _2886 _2887-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2877) _fixd_8)); (2,f) -> u f (\_2888-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2888) _defs_6)) (\_defs_12-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_12) _2877) bool_true)))); (3,f) -> u f (\_2889-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2877) _fixd_8)); (4,f) -> u f (\_2890 _2891-> (let _2892 = _2890 in (case _2892 of {(0,f) -> u f ((u (u monad_pure io_monad) maybe_none)); (1,f) -> u f (\_2893-> (let _term_14=(u (u (u fm_term_patch_at _2893) _term_4) (\_x_14-> _2891)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_14) _type_5) _defs_6) _2877) bool_true))); (2,f) -> u f (\_2894-> (let _type_14=(u (u (u fm_term_patch_at _2894) _type_5) (\_x_14-> _2891)) in (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_14) _defs_6) _2877) bool_true))); }))); (5,f) -> u f (\_2895 _2896-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _2896) _defs_6)) (\_defs_13-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_13) _2877) bool_true)))); (6,f) -> u f (\_2897 _2898 _2899-> (u (u (u (u (u (u (u (u fm_synth_fix _file_1) _code_2) _name_3) _term_4) _type_5) _defs_6) _2877) _fixd_8)); }))); }))))))))))
fm_status_fail = (\_errors_1-> (3,\t-> t _errors_1))
fm_synth_one = (\_name_1-> (\_defs_2-> (let _2900 = (u (u fm_get _name_1) _defs_2) in (case _2900 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u (u fm_synth_load _name_1) _defs_2)) (\_loaded_3-> (let _2901 = _loaded_3 in (case _2901 of {(0,f) -> u f ((u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "Undefined: ") (u (u list_cons _name_1) list_nil))))) (\__4-> (u (u monad_pure io_monad) _defs_2)))); (1,f) -> u f (\_2902-> (u (u fm_synth_one _name_1) _2902)); }))))); (1,f) -> u f (\_2903-> (let _2904 = _2903 in (case _2904 of {(0,f) -> u f (\_2905 _2906 _2907 _2908 _2909 _2910-> (let _file_10=_2905 in (let _code_11=_2906 in (let _name_12=_2907 in (let _term_13=_2908 in (let _type_14=_2909 in (let _stat_15=_2910 in (let _2911 = _stat_15 in (case _2911 of {(0,f) -> u f ((let _defs_16=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) fm_status_wait)) _defs_2) in (let _checked_17=(u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _type_14) (u maybe_some fm_term_typ)) _defs_16) list_nil) (u fm_mpath_i fm_mpath_nil)) maybe_none)) (\_chk_type_17-> (u (u (u monad_bind fm_check_monad) (u (u (u (u (u (u fm_term_check _term_13) (u maybe_some _type_14)) _defs_16) list_nil) (u fm_mpath_o fm_mpath_nil)) maybe_none)) (\_chk_term_18-> (u (u monad_pure fm_check_monad) unit_new))))) in (let _2912 = _checked_17 in (case _2912 of {(0,f) -> u f (\_2913 _2914-> (let _2915 = (u list_is_empty _2914) in (if _2915 then (let _defs_20=(u (u (u (u (u (u (u fm_define _file_10) _code_11) _name_12) _term_13) _type_14) bool_true) _defs_16) in (u (u monad_pure io_monad) _defs_20)) else (u (u (u monad_bind io_monad) (u (u (u (u (u (u (u (u fm_synth_fix _file_10) _code_11) _name_12) _term_13) _type_14) _defs_16) _2914) bool_false)) (\_fixed_20-> (let _2916 = _fixed_20 in (case _2916 of {(0,f) -> u f ((let _stat_21=(u fm_status_fail _2914) in (let _defs_22=(u (u (u fm_set _name_12) (u (u (u (u (u (u fm_def_new _file_10) _code_11) _name_12) _term_13) _type_14) _stat_21)) _defs_16) in (u (u monad_pure io_monad) _defs_22)))); (1,f) -> u f (\_2917-> (u (u fm_synth_one _name_12) _2917)); }))))))); }))))); (1,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (2,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (3,f) -> u f (\_2918-> (u (u monad_pure io_monad) _defs_2)); }))))))))); }))); }))))
map_values_go = (\_xs_2-> (\_list_3-> (let _2919 = _xs_2 in (case _2919 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2920 _2921 _2922-> (let _list0_7=(let _2923 = _2920 in (case _2923 of {(0,f) -> u f (_list_3); (1,f) -> u f (\_2924-> (u (u list_cons _2924) _list_3)); })) in (let _list1_8=(u (u map_values_go _2921) _list0_7) in (let _list2_9=(u (u map_values_go _2922) _list1_8) in _list2_9)))); }))))
map_values = (\_xs_2-> (u (u map_values_go _xs_2) list_nil))
fm_name_show = (\_name_1-> _name_1)
bits_to_nat = (\_b_1-> (let _2925 = _b_1 in (case _2925 of {(0,f) -> u f (0); (1,f) -> u f (\_2926-> (((2::Integer) * (u bits_to_nat _2926)))); (2,f) -> u f (\_2927-> (u nat_succ (((2::Integer) * (u bits_to_nat _2927))))); })))
u16_show_hex = (\_a_1-> (let _2928 = _a_1 in (u (u nat_to_string_base 16) (u bits_to_nat (u word_to_bits (u16_to_word _2928))))))
fm_escape_char = (\_chr_1-> (let _2929 = (((_chr_1::Word16) == fm_backslash)) in (if _2929 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2930 = (((_chr_1::Word16) == 34)) in (if _2930 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2931 = (((_chr_1::Word16) == 39)) in (if _2931 then (u (u string_cons fm_backslash) (u (u string_cons _chr_1) string_nil)) else (let _2932 = (u (u (u u16_btw 32) _chr_1) 126) in (if _2932 then (u (u string_cons _chr_1) string_nil) else (u string_flatten (u (u list_cons (u (u string_cons fm_backslash) string_nil)) (u (u list_cons "u{") (u (u list_cons (u u16_show_hex _chr_1)) (u (u list_cons "}") (u (u list_cons string_nil) list_nil)))))))))))))))
fm_escape = (\_str_1-> (let _2933 = _str_1 in (if null (_2933::String) then string_nil else (let _head_4=(u fm_escape_char (fromIntegral (fromEnum (head _2933 :: Char)) :: Word16)) in (let _tail_5=(u fm_escape (tail _2933)) in (((_head_4::String) ++ _tail_5)))))))
fm_term_core = (\_term_1-> (let _2934 = _term_1 in (case _2934 of {(0,f) -> u f (\_2935 _2936-> (u fm_name_show _2935)); (1,f) -> u f (\_2937-> (u fm_name_show _2937)); (2,f) -> u f ("*"); (3,f) -> u f (\_2938 _2939 _2940 _2941 _2942-> (let _eras_7=_2938 in (let _init_8=(let _2943 = _eras_7 in (if _2943 then "%" else "@")) in (let _self_9=(u fm_name_show _2939) in (let _name_10=(u fm_name_show _2940) in (let _xtyp_11=(u fm_term_core _2941) in (let _body_12=(u fm_term_core (u (u _2942 (u (u fm_term_var _2939) 0)) (u (u fm_term_var _2940) 0))) in (u string_flatten (u (u list_cons _init_8) (u (u list_cons _self_9) (u (u list_cons "(") (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _xtyp_11) (u (u list_cons ") ") (u (u list_cons _body_12) list_nil)))))))))))))))); (4,f) -> u f (\_2944 _2945-> (let _name_4=(u fm_name_show _2944) in (let _body_5=(u fm_term_core (u _2945 (u (u fm_term_var _2944) 0))) in (u string_flatten (u (u list_cons "#") (u (u list_cons _name_4) (u (u list_cons " ") (u (u list_cons _body_5) list_nil)))))))); (5,f) -> u f (\_2946 _2947-> (let _func_4=(u fm_term_core _2946) in (let _argm_5=(u fm_term_core _2947) in (u string_flatten (u (u list_cons "(") (u (u list_cons _func_4) (u (u list_cons " ") (u (u list_cons _argm_5) (u (u list_cons ")") list_nil))))))))); (6,f) -> u f (\_2948 _2949 _2950-> (let _name_5=(u fm_name_show _2948) in (let _expr_6=(u fm_term_core _2949) in (let _body_7=(u fm_term_core (u _2950 (u (u fm_term_var _2948) 0))) in (u string_flatten (u (u list_cons "!") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (7,f) -> u f (\_2951 _2952 _2953-> (let _name_5=(u fm_name_show _2951) in (let _expr_6=(u fm_term_core _2952) in (let _body_7=(u fm_term_core (u _2953 (u (u fm_term_var _2951) 0))) in (u string_flatten (u (u list_cons "$") (u (u list_cons _name_5) (u (u list_cons " = ") (u (u list_cons _expr_6) (u (u list_cons "; ") (u (u list_cons _body_7) list_nil))))))))))); (8,f) -> u f (\_2954 _2955 _2956-> (let _term_5=(u fm_term_core _2955) in (let _type_6=(u fm_term_core _2956) in (u string_flatten (u (u list_cons "{") (u (u list_cons _term_5) (u (u list_cons ":") (u (u list_cons _type_6) (u (u list_cons "}") list_nil))))))))); (9,f) -> u f (\_2957 _2958 _2959-> "<GOL>"); (10,f) -> u f (\_2960-> "<HOL>"); (11,f) -> u f (\_2961-> (u string_flatten (u (u list_cons "+") (u (u list_cons (u nat_show _2961)) list_nil)))); (12,f) -> u f (\_2962-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _2962)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_2963-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _2963)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_2964 _2965 _2966 _2967 _2968 _2969-> "<CSE>"); (15,f) -> u f (\_2970 _2971-> (u fm_term_core _2971)); })))
fm_defs_core = (\_defs_1-> (let _result_2="" in (let _result_3=(u (u (u list_for (u map_values _defs_1)) _result_2) (\_defn_3-> (\_result_4-> (let _2972 = _defn_3 in (case _2972 of {(0,f) -> u f (\_2973 _2974 _2975 _2976 _2977 _2978-> (let _2979 = _2978 in (case _2979 of {(0,f) -> u f (_result_4); (1,f) -> u f (_result_4); (2,f) -> u f ((let _name_11=_2975 in (let _term_12=(u fm_term_core _2976) in (let _type_13=(u fm_term_core _2977) in (u string_flatten (u (u list_cons _result_4) (u (u list_cons _name_11) (u (u list_cons " : ") (u (u list_cons _type_13) (u (u list_cons " = ") (u (u list_cons _term_12) (u (u list_cons ";\n") list_nil)))))))))))); (3,f) -> u f (\_2980-> _result_4); }))); }))))) in _result_3)))
fm_to_core_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u (u monad_pure io_monad) (u fm_defs_core _defs_2)))))
maybe_bind = (\_m_3-> (\_f_4-> (let _2981 = _m_3 in (case _2981 of {(0,f) -> u f (maybe_none); (1,f) -> u f (\_2982-> (u _f_4 _2982)); }))))
maybe_monad = (u (u monad_new maybe_bind) maybe_some)
fm_term_show_as_nat_go = (\_term_1-> (let _2983 = _term_1 in (case _2983 of {(0,f) -> u f (\_2984 _2985-> maybe_none); (1,f) -> u f (\_2986-> (let _2987 = (((_2986::String) == "Nat.zero")) in (if _2987 then (u maybe_some 0) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_2988 _2989 _2990 _2991 _2992-> maybe_none); (4,f) -> u f (\_2993 _2994-> maybe_none); (5,f) -> u f (\_2995 _2996-> (let _2997 = _2995 in (case _2997 of {(0,f) -> u f (\_2998 _2999-> maybe_none); (1,f) -> u f (\_3000-> (let _3001 = (((_3000::String) == "Nat.succ")) in (if _3001 then (u (u (u monad_bind maybe_monad) (u fm_term_show_as_nat_go _2996)) (\_pred_5-> (u (u monad_pure maybe_monad) (u nat_succ _pred_5)))) else maybe_none))); (2,f) -> u f (maybe_none); (3,f) -> u f (\_3002 _3003 _3004 _3005 _3006-> maybe_none); (4,f) -> u f (\_3007 _3008-> maybe_none); (5,f) -> u f (\_3009 _3010-> maybe_none); (6,f) -> u f (\_3011 _3012 _3013-> maybe_none); (7,f) -> u f (\_3014 _3015 _3016-> maybe_none); (8,f) -> u f (\_3017 _3018 _3019-> maybe_none); (9,f) -> u f (\_3020 _3021 _3022-> maybe_none); (10,f) -> u f (\_3023-> maybe_none); (11,f) -> u f (\_3024-> maybe_none); (12,f) -> u f (\_3025-> maybe_none); (13,f) -> u f (\_3026-> maybe_none); (14,f) -> u f (\_3027 _3028 _3029 _3030 _3031 _3032-> maybe_none); (15,f) -> u f (\_3033 _3034-> maybe_none); }))); (6,f) -> u f (\_3035 _3036 _3037-> maybe_none); (7,f) -> u f (\_3038 _3039 _3040-> maybe_none); (8,f) -> u f (\_3041 _3042 _3043-> maybe_none); (9,f) -> u f (\_3044 _3045 _3046-> maybe_none); (10,f) -> u f (\_3047-> maybe_none); (11,f) -> u f (\_3048-> maybe_none); (12,f) -> u f (\_3049-> maybe_none); (13,f) -> u f (\_3050-> maybe_none); (14,f) -> u f (\_3051 _3052 _3053 _3054 _3055 _3056-> maybe_none); (15,f) -> u f (\_3057 _3058-> maybe_none); })))
fm_term_show_as_nat = (\_term_1-> (u (u maybe_mapped (u fm_term_show_as_nat_go _term_1)) nat_show))
fm_term_show_is_ref = (\_term_1-> (\_name_2-> (let _3059 = _term_1 in (case _3059 of {(0,f) -> u f (\_3060 _3061-> bool_false); (1,f) -> u f (\_3062-> (((_name_2::String) == _3062))); (2,f) -> u f (bool_false); (3,f) -> u f (\_3063 _3064 _3065 _3066 _3067-> bool_false); (4,f) -> u f (\_3068 _3069-> bool_false); (5,f) -> u f (\_3070 _3071-> bool_false); (6,f) -> u f (\_3072 _3073 _3074-> bool_false); (7,f) -> u f (\_3075 _3076 _3077-> bool_false); (8,f) -> u f (\_3078 _3079 _3080-> bool_false); (9,f) -> u f (\_3081 _3082 _3083-> bool_false); (10,f) -> u f (\_3084-> bool_false); (11,f) -> u f (\_3085-> bool_false); (12,f) -> u f (\_3086-> bool_false); (13,f) -> u f (\_3087-> bool_false); (14,f) -> u f (\_3088 _3089 _3090 _3091 _3092 _3093-> bool_false); (15,f) -> u f (\_3094 _3095-> bool_false); }))))
nat_eql = (\a0-> \a1-> ((a0::Integer) == a1))
fm_term_show_app = (\_term_1-> (\_path_2-> (\_args_3-> (let _3096 = _term_1 in (case _3096 of {(0,f) -> u f (\_3097 _3098-> (let _arity_6=(u list_length _args_3) in (let _3099 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3099 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3100 = _func_7 in (if null (_3100::String) then bool_false else ((((fromIntegral (fromEnum (head _3100 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3101 = _wrap_8 in (if _3101 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (1,f) -> u f (\_3102-> (let _arity_5=(u list_length _args_3) in (let _3103 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3103 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3104 = _func_6 in (if null (_3104::String) then bool_false else ((((fromIntegral (fromEnum (head _3104 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3105 = _wrap_7 in (if _3105 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (2,f) -> u f ((let _arity_4=(u list_length _args_3) in (let _3106 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_4::Integer) == 3)))) in (if _3106 then (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_6=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_7=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_6) (u (u list_cons " == ") (u (u list_cons _eq_rgt_7) list_nil))))))) else (let _func_5=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_6=(let _3107 = _func_5 in (if null (_3107::String) then bool_false else ((((fromIntegral (fromEnum (head _3107 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_7=(u (u string_join ",") _args_3) in (let _func_8=(let _3108 = _wrap_6 in (if _3108 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_5) (u (u list_cons ")") list_nil)))) else _func_5)) in (u string_flatten (u (u list_cons _func_8) (u (u list_cons "(") (u (u list_cons _args_7) (u (u list_cons ")") list_nil))))))))))))); (3,f) -> u f (\_3109 _3110 _3111 _3112 _3113-> (let _arity_9=(u list_length _args_3) in (let _3114 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_9::Integer) == 3)))) in (if _3114 then (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_11=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_12=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_11) (u (u list_cons " == ") (u (u list_cons _eq_rgt_12) list_nil))))))) else (let _func_10=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_11=(let _3115 = _func_10 in (if null (_3115::String) then bool_false else ((((fromIntegral (fromEnum (head _3115 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_12=(u (u string_join ",") _args_3) in (let _func_13=(let _3116 = _wrap_11 in (if _3116 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_10) (u (u list_cons ")") list_nil)))) else _func_10)) in (u string_flatten (u (u list_cons _func_13) (u (u list_cons "(") (u (u list_cons _args_12) (u (u list_cons ")") list_nil))))))))))))); (4,f) -> u f (\_3117 _3118-> (let _arity_6=(u list_length _args_3) in (let _3119 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3119 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3120 = _func_7 in (if null (_3120::String) then bool_false else ((((fromIntegral (fromEnum (head _3120 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3121 = _wrap_8 in (if _3121 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); (5,f) -> u f (\_3122 _3123-> (let _argm_6=(u (u fm_term_show_go _3123) (u fm_mpath_i _path_2)) in (u (u (u fm_term_show_app _3122) (u fm_mpath_o _path_2)) (u (u list_cons _argm_6) _args_3)))); (6,f) -> u f (\_3124 _3125 _3126-> (let _arity_7=(u list_length _args_3) in (let _3127 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3127 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3128 = _func_8 in (if null (_3128::String) then bool_false else ((((fromIntegral (fromEnum (head _3128 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3129 = _wrap_9 in (if _3129 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (7,f) -> u f (\_3130 _3131 _3132-> (let _arity_7=(u list_length _args_3) in (let _3133 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3133 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3134 = _func_8 in (if null (_3134::String) then bool_false else ((((fromIntegral (fromEnum (head _3134 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3135 = _wrap_9 in (if _3135 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (8,f) -> u f (\_3136 _3137 _3138-> (let _arity_7=(u list_length _args_3) in (let _3139 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3139 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3140 = _func_8 in (if null (_3140::String) then bool_false else ((((fromIntegral (fromEnum (head _3140 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3141 = _wrap_9 in (if _3141 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (9,f) -> u f (\_3142 _3143 _3144-> (let _arity_7=(u list_length _args_3) in (let _3145 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_7::Integer) == 3)))) in (if _3145 then (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_9=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_10=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_9) (u (u list_cons " == ") (u (u list_cons _eq_rgt_10) list_nil))))))) else (let _func_8=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_9=(let _3146 = _func_8 in (if null (_3146::String) then bool_false else ((((fromIntegral (fromEnum (head _3146 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_10=(u (u string_join ",") _args_3) in (let _func_11=(let _3147 = _wrap_9 in (if _3147 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_8) (u (u list_cons ")") list_nil)))) else _func_8)) in (u string_flatten (u (u list_cons _func_11) (u (u list_cons "(") (u (u list_cons _args_10) (u (u list_cons ")") list_nil))))))))))))); (10,f) -> u f (\_3148-> (let _arity_5=(u list_length _args_3) in (let _3149 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3149 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3150 = _func_6 in (if null (_3150::String) then bool_false else ((((fromIntegral (fromEnum (head _3150 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3151 = _wrap_7 in (if _3151 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (11,f) -> u f (\_3152-> (let _arity_5=(u list_length _args_3) in (let _3153 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3153 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3154 = _func_6 in (if null (_3154::String) then bool_false else ((((fromIntegral (fromEnum (head _3154 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3155 = _wrap_7 in (if _3155 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (12,f) -> u f (\_3156-> (let _arity_5=(u list_length _args_3) in (let _3157 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3157 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3158 = _func_6 in (if null (_3158::String) then bool_false else ((((fromIntegral (fromEnum (head _3158 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3159 = _wrap_7 in (if _3159 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (13,f) -> u f (\_3160-> (let _arity_5=(u list_length _args_3) in (let _3161 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_5::Integer) == 3)))) in (if _3161 then (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_7=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_8=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_7) (u (u list_cons " == ") (u (u list_cons _eq_rgt_8) list_nil))))))) else (let _func_6=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_7=(let _3162 = _func_6 in (if null (_3162::String) then bool_false else ((((fromIntegral (fromEnum (head _3162 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_8=(u (u string_join ",") _args_3) in (let _func_9=(let _3163 = _wrap_7 in (if _3163 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_6) (u (u list_cons ")") list_nil)))) else _func_6)) in (u string_flatten (u (u list_cons _func_9) (u (u list_cons "(") (u (u list_cons _args_8) (u (u list_cons ")") list_nil))))))))))))); (14,f) -> u f (\_3164 _3165 _3166 _3167 _3168 _3169-> (let _arity_10=(u list_length _args_3) in (let _3170 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_10::Integer) == 3)))) in (if _3170 then (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_12=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_13=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_12) (u (u list_cons " == ") (u (u list_cons _eq_rgt_13) list_nil))))))) else (let _func_11=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_12=(let _3171 = _func_11 in (if null (_3171::String) then bool_false else ((((fromIntegral (fromEnum (head _3171 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_13=(u (u string_join ",") _args_3) in (let _func_14=(let _3172 = _wrap_12 in (if _3172 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_11) (u (u list_cons ")") list_nil)))) else _func_11)) in (u string_flatten (u (u list_cons _func_14) (u (u list_cons "(") (u (u list_cons _args_13) (u (u list_cons ")") list_nil))))))))))))); (15,f) -> u f (\_3173 _3174-> (let _arity_6=(u list_length _args_3) in (let _3175 = (((u (u fm_term_show_is_ref _term_1) "Equal") && (((_arity_6::Integer) == 3)))) in (if _3175 then (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _eq_lft_8=(u (u maybe_default "?") (u (u list_at 1) _args_3)) in (let _eq_rgt_9=(u (u maybe_default "?") (u (u list_at 2) _args_3)) in (u string_flatten (u (u list_cons _eq_lft_8) (u (u list_cons " == ") (u (u list_cons _eq_rgt_9) list_nil))))))) else (let _func_7=(u (u fm_term_show_go _term_1) _path_2) in (let _wrap_8=(let _3176 = _func_7 in (if null (_3176::String) then bool_false else ((((fromIntegral (fromEnum (head _3176 :: Char)) :: Word16)::Word16) == 40)))) in (let _args_9=(u (u string_join ",") _args_3) in (let _func_10=(let _3177 = _wrap_8 in (if _3177 then (u string_flatten (u (u list_cons "(") (u (u list_cons _func_7) (u (u list_cons ")") list_nil)))) else _func_7)) in (u string_flatten (u (u list_cons _func_10) (u (u list_cons "(") (u (u list_cons _args_9) (u (u list_cons ")") list_nil))))))))))))); })))))
map_to_list_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _3178 = _xs_2 in (case _3178 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3179 _3180 _3181-> (let _list0_8=(let _3182 = _3179 in (case _3182 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3183-> (u (u list_cons (u (u pair_new (u bits_reverse _key_3)) _3183)) _list_4)); })) in (let _list1_9=(u (u (u map_to_list_go _3180) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_to_list_go _3181) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_to_list = (\_xs_2-> (u list_reverse (u (u (u map_to_list_go _xs_2) bits_e) list_nil)))
bits_chunks_of_go = (\_len_1-> (\_bits_2-> (\_need_3-> (\_chunk_4-> (let _3184 = _bits_2 in (case _3184 of {(0,f) -> u f ((u (u list_cons (u bits_reverse _chunk_4)) list_nil)); (1,f) -> u f (\_3185-> (let _3186 = _need_3 in (if _3186==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_o _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _3185) (_3186-1)) _chunk_7))))); (2,f) -> u f (\_3187-> (let _3188 = _need_3 in (if _3188==0 then (let _head_6=(u bits_reverse _chunk_4) in (let _tail_7=(u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e) in (u (u list_cons _head_6) _tail_7))) else (let _chunk_7=(u bits_i _chunk_4) in (u (u (u (u bits_chunks_of_go _len_1) _3187) (_3188-1)) _chunk_7))))); }))))))
bits_chunks_of = (\_len_1-> (\_bits_2-> (u (u (u (u bits_chunks_of_go _len_1) _bits_2) _len_1) bits_e)))
word_from_bits = (\_size_1-> (\_bits_2-> (let _3189 = _size_1 in (if _3189==0 then word_e else (let _3190 = _bits_2 in (case _3190 of {(0,f) -> u f ((u word_o (u (u word_from_bits (_3189-1)) bits_e))); (1,f) -> u f (\_3191-> (u word_o (u (u word_from_bits (_3189-1)) _3191))); (2,f) -> u f (\_3192-> (u word_i (u (u word_from_bits (_3189-1)) _3192))); }))))))
fm_name_from_bits = (\_bits_1-> (let _list_2=(u (u bits_chunks_of 6) _bits_1) in (let _name_3=(u (u (u list_fold _list_2) string_nil) (\_bts_3-> (\_name_4-> (let _u16_5=(u u16_new (u (u word_from_bits 16) (u bits_reverse _bts_3))) in (let _chr_6=(let _3193 = (u (u (u u16_btw 0) _u16_5) 25) in (if _3193 then (((_u16_5::Word16) + 65)) else (let _3194 = (u (u (u u16_btw 26) _u16_5) 51) in (if _3194 then (((_u16_5::Word16) + 71)) else (let _3195 = (u (u (u u16_btw 52) _u16_5) 61) in (if _3195 then (((_u16_5::Word16) - 4)) else (let _3196 = (((62::Word16) == _u16_5)) in (if _3196 then 46 else 95)))))))) in (u (u string_cons _chr_6) _name_4)))))) in _name_3)))
pair_fst = (\_pair_3-> (let _3197 = _pair_3 in (case _3197 of {(0,f) -> u f (\_3198 _3199-> _3198); })))
fm_term_show_go = (\_term_1-> (\_path_2-> (let _3200 = (u fm_term_show_as_nat _term_1) in (case _3200 of {(0,f) -> u f ((let _3201 = _term_1 in (case _3201 of {(0,f) -> u f (\_3202 _3203-> (u fm_name_show _3202)); (1,f) -> u f (\_3204-> (let _name_4=(u fm_name_show _3204) in (let _3205 = _path_2 in (case _3205 of {(0,f) -> u f (_name_4); (1,f) -> u f (\_3206-> (let _path_val_6=(u (u bits_concat (u fm_path_to_bits _3206)) (u bits_i bits_e)) in (let _path_str_7=(u nat_show (u bits_to_nat _path_val_6)) in (u string_flatten (u (u list_cons _name_4) (u (u list_cons (u (u fm_color "2") ((("-"::String) ++ _path_str_7)))) list_nil)))))); })))); (2,f) -> u f ("Type"); (3,f) -> u f (\_3207 _3208 _3209 _3210 _3211-> (let _eras_8=_3207 in (let _self_9=(u fm_name_show _3208) in (let _name_10=(u fm_name_show _3209) in (let _type_11=(u (u fm_term_show_go _3210) (u fm_mpath_o _path_2)) in (let _open_12=(let _3212 = _eras_8 in (if _3212 then "<" else "(")) in (let _clos_13=(let _3213 = _eras_8 in (if _3213 then ">" else ")")) in (let _body_14=(u (u fm_term_show_go (u (u _3211 (u (u fm_term_var _3208) 0)) (u (u fm_term_var _3209) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _self_9) (u (u list_cons _open_12) (u (u list_cons _name_10) (u (u list_cons ":") (u (u list_cons _type_11) (u (u list_cons _clos_13) (u (u list_cons " ") (u (u list_cons _body_14) list_nil))))))))))))))))); (4,f) -> u f (\_3214 _3215-> (let _name_5=(u fm_name_show _3214) in (let _body_6=(u (u fm_term_show_go (u _3215 (u (u fm_term_var _3214) 0))) (u fm_mpath_o _path_2)) in (u string_flatten (u (u list_cons "(") (u (u list_cons _name_5) (u (u list_cons ") ") (u (u list_cons _body_6) list_nil)))))))); (5,f) -> u f (\_3216 _3217-> (u (u (u fm_term_show_app _term_1) _path_2) list_nil)); (6,f) -> u f (\_3218 _3219 _3220-> (let _name_6=(u fm_name_show _3218) in (let _expr_7=(u (u fm_term_show_go _3219) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _3220 (u (u fm_term_var _3218) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "let ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (7,f) -> u f (\_3221 _3222 _3223-> (let _name_6=(u fm_name_show _3221) in (let _expr_7=(u (u fm_term_show_go _3222) (u fm_mpath_o _path_2)) in (let _body_8=(u (u fm_term_show_go (u _3223 (u (u fm_term_var _3221) 0))) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons "def ") (u (u list_cons _name_6) (u (u list_cons " = ") (u (u list_cons _expr_7) (u (u list_cons "; ") (u (u list_cons _body_8) list_nil))))))))))); (8,f) -> u f (\_3224 _3225 _3226-> (let _term_6=(u (u fm_term_show_go _3225) (u fm_mpath_o _path_2)) in (let _type_7=(u (u fm_term_show_go _3226) (u fm_mpath_i _path_2)) in (u string_flatten (u (u list_cons _term_6) (u (u list_cons "::") (u (u list_cons _type_7) list_nil))))))); (9,f) -> u f (\_3227 _3228 _3229-> (let _name_6=(u fm_name_show _3227) in (u string_flatten (u (u list_cons "?") (u (u list_cons _name_6) list_nil))))); (10,f) -> u f (\_3230-> "_"); (11,f) -> u f (\_3231-> (u string_flatten (u (u list_cons (u nat_show _3231)) list_nil))); (12,f) -> u f (\_3232-> (u string_flatten (u (u list_cons "'") (u (u list_cons (u fm_escape_char _3232)) (u (u list_cons "'") list_nil))))); (13,f) -> u f (\_3233-> (u string_flatten (u (u list_cons "\"") (u (u list_cons (u fm_escape _3233)) (u (u list_cons "\"") list_nil))))); (14,f) -> u f (\_3234 _3235 _3236 _3237 _3238 _3239-> (let _expr_9=(u (u fm_term_show_go _3235) (u fm_mpath_o _path_2)) in (let _name_10=(u fm_name_show _3236) in (let _wyth_11=(u (u string_join "") (u (u list_mapped _3237) (\_defn_11-> (let _3240 = _defn_11 in (case _3240 of {(0,f) -> u f (\_3241 _3242 _3243 _3244 _3245 _3246-> (let _name_18=(u fm_name_show _3243) in (let _type_19=(u (u fm_term_show_go _3245) maybe_none) in (let _term_20=(u (u fm_term_show_go _3244) maybe_none) in (u string_flatten (u (u list_cons _name_18) (u (u list_cons ": ") (u (u list_cons _type_19) (u (u list_cons " = ") (u (u list_cons _term_20) (u (u list_cons ";") list_nil))))))))))); }))))) in (let _cses_12=(u map_to_list _3238) in (let _cses_13=(u (u string_join "") (u (u list_mapped _cses_12) (\_x_13-> (let _name_14=(u fm_name_from_bits (u pair_fst _x_13)) in (let _term_15=(u (u fm_term_show_go (u pair_snd _x_13)) maybe_none) in (u string_flatten (u (u list_cons _name_14) (u (u list_cons ": ") (u (u list_cons _term_15) (u (u list_cons "; ") list_nil)))))))))) in (let _moti_14=(let _3247 = _3239 in (case _3247 of {(0,f) -> u f (""); (1,f) -> u f (\_3248-> (u string_flatten (u (u list_cons ": ") (u (u list_cons (u (u fm_term_show_go _3248) maybe_none)) list_nil)))); })) in (u string_flatten (u (u list_cons "case ") (u (u list_cons _expr_9) (u (u list_cons " as ") (u (u list_cons _name_10) (u (u list_cons _wyth_11) (u (u list_cons " { ") (u (u list_cons _cses_13) (u (u list_cons "}") (u (u list_cons _moti_14) list_nil))))))))))))))))); (15,f) -> u f (\_3249 _3250-> (u (u fm_term_show_go _3250) _path_2)); }))); (1,f) -> u f (\_3251-> _3251); }))))
fm_term_show = (\_term_1-> (u (u fm_term_show_go _term_1) maybe_none))
fm_error_relevant = (\_errors_1-> (\_got_2-> (let _3252 = _errors_1 in (case _3252 of {(0,f) -> u f (list_nil); (1,f) -> u f (\_3253 _3254-> (let _keep_5=(let _3255 = _3253 in (case _3255 of {(0,f) -> u f (\_3256 _3257 _3258 _3259-> ((not _got_2))); (1,f) -> u f (\_3260 _3261 _3262 _3263 _3264-> bool_true); (2,f) -> u f (\_3265-> bool_false); (3,f) -> u f (\_3266-> bool_false); (4,f) -> u f (\_3267 _3268-> bool_false); (5,f) -> u f (\_3269 _3270-> ((not _got_2))); (6,f) -> u f (\_3271 _3272 _3273-> ((not _got_2))); })) in (let _got_6=(let _3274 = _3253 in (case _3274 of {(0,f) -> u f (\_3275 _3276 _3277 _3278-> bool_true); (1,f) -> u f (\_3279 _3280 _3281 _3282 _3283-> _got_2); (2,f) -> u f (\_3284-> _got_2); (3,f) -> u f (\_3285-> _got_2); (4,f) -> u f (\_3286 _3287-> _got_2); (5,f) -> u f (\_3288 _3289-> bool_true); (6,f) -> u f (\_3290 _3291 _3292-> _got_2); })) in (let _tail_7=(u (u fm_error_relevant _3254) _got_6) in (let _3293 = _keep_5 in (if _3293 then (u (u list_cons _3253) _tail_7) else _tail_7)))))); }))))
fm_context_show = (\_context_1-> (let _3294 = _context_1 in (case _3294 of {(0,f) -> u f (""); (1,f) -> u f (\_3295 _3296-> (let _3297 = _3295 in (case _3297 of {(0,f) -> u f (\_3298 _3299-> (let _name_6=(u fm_name_show _3298) in (let _type_7=(u fm_term_show _3299) in (let _rest_8=(u fm_context_show _3296) in (u string_flatten (u (u list_cons _rest_8) (u (u list_cons "- ") (u (u list_cons _name_6) (u (u list_cons ": ") (u (u list_cons _type_7) (u (u list_cons "\n") list_nil))))))))))); }))); })))
fm_term_expand_at = (\_path_1-> (\_term_2-> (\_defs_3-> (u (u (u fm_term_patch_at _path_1) _term_2) (\_term_4-> (let _3300 = _term_4 in (case _3300 of {(0,f) -> u f (\_3301 _3302-> _term_4); (1,f) -> u f (\_3303-> (let _3304 = (u (u fm_get _3303) _defs_3) in (case _3304 of {(0,f) -> u f ((u fm_term_ref _3303)); (1,f) -> u f (\_3305-> (let _3306 = _3305 in (case _3306 of {(0,f) -> u f (\_3307 _3308 _3309 _3310 _3311 _3312-> _3310); }))); }))); (2,f) -> u f (_term_4); (3,f) -> u f (\_3313 _3314 _3315 _3316 _3317-> _term_4); (4,f) -> u f (\_3318 _3319-> _term_4); (5,f) -> u f (\_3320 _3321-> _term_4); (6,f) -> u f (\_3322 _3323 _3324-> _term_4); (7,f) -> u f (\_3325 _3326 _3327-> _term_4); (8,f) -> u f (\_3328 _3329 _3330-> _term_4); (9,f) -> u f (\_3331 _3332 _3333-> _term_4); (10,f) -> u f (\_3334-> _term_4); (11,f) -> u f (\_3335-> _term_4); (12,f) -> u f (\_3336-> _term_4); (13,f) -> u f (\_3337-> _term_4); (14,f) -> u f (\_3338 _3339 _3340 _3341 _3342 _3343-> _term_4); (15,f) -> u f (\_3344 _3345-> _term_4); })))))))
bool_or = (\a0-> \a1-> (a0 || a1))
fm_term_expand_ct = (\_term_1-> (\_defs_2-> (\_arity_3-> (let _3346 = _term_1 in (case _3346 of {(0,f) -> u f (\_3347 _3348-> (u (u fm_term_var _3347) _3348)); (1,f) -> u f (\_3349-> (let _expand_5=bool_false in (let _expand_6=(((((((_3349::String) == "Nat.succ")) && (((_arity_3::Integer) > 1)))) || _expand_5)) in (let _expand_7=(((((((_3349::String) == "Nat.zero")) && (((_arity_3::Integer) > 0)))) || _expand_6)) in (let _expand_8=(((((((_3349::String) == "Bool.true")) && (((_arity_3::Integer) > 0)))) || _expand_7)) in (let _expand_9=(((((((_3349::String) == "Bool.false")) && (((_arity_3::Integer) > 0)))) || _expand_8)) in (let _3350 = _expand_9 in (if _3350 then (let _3351 = (u (u fm_get _3349) _defs_2) in (case _3351 of {(0,f) -> u f ((u fm_term_ref _3349)); (1,f) -> u f (\_3352-> (let _3353 = _3352 in (case _3353 of {(0,f) -> u f (\_3354 _3355 _3356 _3357 _3358 _3359-> _3357); }))); })) else (u fm_term_ref _3349))))))))); (2,f) -> u f (fm_term_typ); (3,f) -> u f (\_3360 _3361 _3362 _3363 _3364-> (u (u (u (u (u fm_term_all _3360) _3361) _3362) (u (u (u fm_term_expand_ct _3363) _defs_2) 0)) (\_s_9-> (\_x_10-> (u (u (u fm_term_expand_ct (u (u _3364 _s_9) _x_10)) _defs_2) 0))))); (4,f) -> u f (\_3365 _3366-> (u (u fm_term_lam _3365) (\_x_6-> (u (u (u fm_term_expand_ct (u _3366 _x_6)) _defs_2) 0)))); (5,f) -> u f (\_3367 _3368-> (u (u fm_term_app (u (u (u fm_term_expand_ct _3367) _defs_2) (u nat_succ _arity_3))) (u (u (u fm_term_expand_ct _3368) _defs_2) 0))); (6,f) -> u f (\_3369 _3370 _3371-> (u (u (u fm_term_let _3369) (u (u (u fm_term_expand_ct _3370) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _3371 _x_7)) _defs_2) 0)))); (7,f) -> u f (\_3372 _3373 _3374-> (u (u (u fm_term_def _3372) (u (u (u fm_term_expand_ct _3373) _defs_2) 0)) (\_x_7-> (u (u (u fm_term_expand_ct (u _3374 _x_7)) _defs_2) 0)))); (8,f) -> u f (\_3375 _3376 _3377-> (u (u (u fm_term_ann _3375) (u (u (u fm_term_expand_ct _3376) _defs_2) 0)) (u (u (u fm_term_expand_ct _3377) _defs_2) 0))); (9,f) -> u f (\_3378 _3379 _3380-> (u (u (u fm_term_gol _3378) _3379) _3380)); (10,f) -> u f (\_3381-> (u fm_term_hol _3381)); (11,f) -> u f (\_3382-> (u fm_term_nat _3382)); (12,f) -> u f (\_3383-> (u fm_term_chr _3383)); (13,f) -> u f (\_3384-> (u fm_term_str _3384)); (14,f) -> u f (\_3385 _3386 _3387 _3388 _3389 _3390-> _term_1); (15,f) -> u f (\_3391 _3392-> (u (u fm_term_ori _3391) _3392)); })))))
fm_term_expand = (\_dref_1-> (\_term_2-> (\_defs_3-> (let _term_4=(u (u fm_term_normalize _term_2) map_new) in (let _term_5=(u (u (u list_for _dref_1) _term_4) (\_path_5-> (\_term_6-> (let _term_7=(u (u (u fm_term_expand_at _path_5) _term_6) _defs_3) in (let _term_8=(u (u fm_term_normalize _term_7) map_new) in (let _term_9=(u (u (u fm_term_expand_ct _term_8) _defs_3) 0) in (let _term_10=(u (u fm_term_normalize _term_9) map_new) in _term_10))))))) in _term_5)))))
fm_error_show = (\_error_1-> (\_defs_2-> (let _3393 = _error_1 in (case _3393 of {(0,f) -> u f (\_3394 _3395 _3396 _3397-> (let _expected_7=(let _3398 = _3395 in (case _3398 of {(0,f) -> u f (\_3399-> _3399); (1,f) -> u f (\_3400-> (u fm_term_show (u (u fm_term_normalize _3400) map_new))); })) in (let _detected_8=(let _3401 = _3396 in (case _3401 of {(0,f) -> u f (\_3402-> _3402); (1,f) -> u f (\_3403-> (u fm_term_show (u (u fm_term_normalize _3403) map_new))); })) in (u string_flatten (u (u list_cons "Type mismatch.\n") (u (u list_cons "- Expected: ") (u (u list_cons _expected_7) (u (u list_cons "\n") (u (u list_cons "- Detected: ") (u (u list_cons _detected_8) (u (u list_cons "\n") (u (u list_cons (let _3404 = _3397 in (case _3404 of {(0,f) -> u f (""); (1,f) -> u f (\_3405 _3406-> (u string_flatten (u (u list_cons "With context:\n") (u (u list_cons (u fm_context_show _3397)) list_nil)))); }))) list_nil)))))))))))); (1,f) -> u f (\_3407 _3408 _3409 _3410 _3411-> (let _goal_name_8=(u string_flatten (u (u list_cons "Goal ?") (u (u list_cons (u fm_name_show _3407)) (u (u list_cons ":\n") list_nil)))) in (let _with_type_9=(let _3412 = _3410 in (case _3412 of {(0,f) -> u f (""); (1,f) -> u f (\_3413-> (let _goal_10=(u (u (u fm_term_expand _3408) _3413) _defs_2) in (u string_flatten (u (u list_cons "With type: ") (u (u list_cons (let _3414 = _3409 in (if _3414 then (u (u fm_term_show_go _goal_10) (u maybe_some (\_x_11-> _x_11))) else (u fm_term_show _goal_10)))) (u (u list_cons "\n") list_nil)))))); })) in (let _with_ctxt_10=(let _3415 = _3411 in (case _3415 of {(0,f) -> u f (""); (1,f) -> u f (\_3416 _3417-> (u string_flatten (u (u list_cons "With ctxt:\n") (u (u list_cons (u fm_context_show _3411)) list_nil)))); })) in (u string_flatten (u (u list_cons _goal_name_8) (u (u list_cons _with_type_9) (u (u list_cons _with_ctxt_10) list_nil)))))))); (2,f) -> u f (\_3418-> (u string_flatten (u (u list_cons "Waiting for '") (u (u list_cons _3418) (u (u list_cons "'.") list_nil))))); (3,f) -> u f (\_3419-> (u string_flatten (u (u list_cons "Error on dependency '") (u (u list_cons _3419) (u (u list_cons "'.") list_nil))))); (4,f) -> u f (\_3420 _3421-> (u string_flatten (u (u list_cons "Patching: ") (u (u list_cons (u fm_term_show _3421)) list_nil)))); (5,f) -> u f (\_3422 _3423-> (u string_flatten (u (u list_cons "Undefined reference: ") (u (u list_cons (u fm_name_show _3423)) (u (u list_cons "\n") list_nil))))); (6,f) -> u f (\_3424 _3425 _3426-> (let _term_6=(u fm_term_show _3425) in (let _context_7=(u fm_context_show _3426) in (u string_flatten (u (u list_cons "Can't infer type of: ") (u (u list_cons _term_6) (u (u list_cons "\n") (u (u list_cons "With ctxt:\n") (u (u list_cons _context_7) list_nil))))))))); }))))
fm_error_origin = (\_error_1-> (let _3427 = _error_1 in (case _3427 of {(0,f) -> u f (\_3428 _3429 _3430 _3431-> _3428); (1,f) -> u f (\_3432 _3433 _3434 _3435 _3436-> maybe_none); (2,f) -> u f (\_3437-> maybe_none); (3,f) -> u f (\_3438-> maybe_none); (4,f) -> u f (\_3439 _3440-> maybe_none); (5,f) -> u f (\_3441 _3442-> _3441); (6,f) -> u f (\_3443 _3444 _3445-> _3443); })))
fm_defs_report_go = (\_defs_1-> (\_list_2-> (\_errs_3-> (\_typs_4-> (let _3446 = _list_2 in (case _3446 of {(0,f) -> u f ((u string_flatten (u (u list_cons _typs_4) (u (u list_cons "\n") (u (u list_cons (let _3447 = _errs_3 in (if null (_3447::String) then "All terms check." else _errs_3))) list_nil))))); (1,f) -> u f (\_3448 _3449-> (let _name_7=_3448 in (let _3450 = (u (u fm_get _name_7) _defs_1) in (case _3450 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_3) _typs_4)); (1,f) -> u f (\_3451-> (let _3452 = _3451 in (case _3452 of {(0,f) -> u f (\_3453 _3454 _3455 _3456 _3457 _3458-> (let _typs_15=(u string_flatten (u (u list_cons _typs_4) (u (u list_cons _name_7) (u (u list_cons ": ") (u (u list_cons (u fm_term_show _3457)) (u (u list_cons "\n") list_nil)))))) in (let _3459 = _3458 in (case _3459 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_3) _typs_15)); (1,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_3) _typs_15)); (2,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_3) _typs_15)); (3,f) -> u f (\_3460-> (let _3461 = _3460 in (case _3461 of {(0,f) -> u f ((u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_3) _typs_15)); (1,f) -> u f (\_3462 _3463-> (let _name_str_19=(u fm_name_show _3455) in (let _rel_errs_20=(u (u fm_error_relevant _3460) bool_false) in (let _rel_msgs_21=(u (u list_mapped _rel_errs_20) (\_err_21-> (u string_flatten (u (u list_cons (u (u fm_error_show _err_21) _defs_1)) (u (u list_cons (let _3464 = (u fm_error_origin _err_21) in (case _3464 of {(0,f) -> u f (""); (1,f) -> u f (\_3465-> (let _3466 = _3465 in (case _3466 of {(0,f) -> u f (\_3467 _3468 _3469-> (u string_flatten (u (u list_cons "Inside '") (u (u list_cons _3453) (u (u list_cons "':\n") (u (u list_cons (u (u (u fm_highlight _3454) _3468) _3469)) (u (u list_cons "\n") list_nil))))))); }))); }))) list_nil))))) in (let _errs_22=(u string_flatten (u (u list_cons _errs_3) (u (u list_cons (u (u string_join "\n") _rel_msgs_21)) (u (u list_cons "\n") list_nil)))) in (u (u (u (u fm_defs_report_go _defs_1) _3449) _errs_22) _typs_15)))))); }))); })))); }))); })))); }))))))
fm_defs_report = (\_defs_1-> (\_list_2-> (u (u (u (u fm_defs_report_go _defs_1) _list_2) "") "")))
fm_checker_io_one = (\_name_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _name_1) map_new)) (\_defs_2-> (u io_print (u (u fm_defs_report _defs_2) (u (u list_cons _name_1) list_nil))))))
map_keys_go = (\_xs_2-> (\_key_3-> (\_list_4-> (let _3470 = _xs_2 in (case _3470 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3471 _3472 _3473-> (let _list0_8=(let _3474 = _3471 in (case _3474 of {(0,f) -> u f (_list_4); (1,f) -> u f (\_3475-> (u (u list_cons (u bits_reverse _key_3)) _list_4)); })) in (let _list1_9=(u (u (u map_keys_go _3472) (u bits_o _key_3)) _list0_8) in (let _list2_10=(u (u (u map_keys_go _3473) (u bits_i _key_3)) _list1_9) in _list2_10)))); })))))
map_keys = (\_xs_2-> (u list_reverse (u (u (u map_keys_go _xs_2) bits_e) list_nil)))
fm_synth_many = (\_names_1-> (\_defs_2-> (let _3476 = _names_1 in (case _3476 of {(0,f) -> u f ((u (u monad_pure io_monad) _defs_2)); (1,f) -> u f (\_3477 _3478-> (u (u (u monad_bind io_monad) (u (u fm_synth_one _3477) _defs_2)) (\_defs_5-> (u (u fm_synth_many _3478) _defs_5)))); }))))
fm_synth_file = (\_file_1-> (\_defs_2-> (u (u (u monad_bind io_monad) (u io_get_file _file_1)) (\_code_3-> (let _read_4=(u (u (u fm_defs_read _file_1) _code_3) _defs_2) in (let _3479 = _read_4 in (case _3479 of {(0,f) -> u f (\_3480-> (u (u monad_pure io_monad) (u either_left _3480))); (1,f) -> u f (\_3481-> (let _file_defs_6=_3481 in (let _file_keys_7=(u map_keys _file_defs_6) in (let _file_nams_8=(u (u list_mapped _file_keys_7) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _file_nams_8) _file_defs_6)) (\_defs_9-> (u (u monad_pure io_monad) (u either_right (u (u pair_new _file_nams_8) _defs_9))))))))); })))))))
fm_checker_io_file = (\_file_1-> (u (u (u monad_bind io_monad) (u (u fm_synth_file _file_1) map_new)) (\_loaded_2-> (let _3482 = _loaded_2 in (case _3482 of {(0,f) -> u f (\_3483-> (u (u (u monad_bind io_monad) (u io_print (u string_flatten (u (u list_cons "On '") (u (u list_cons _file_1) (u (u list_cons "':") list_nil)))))) (\__4-> (u io_print _3483)))); (1,f) -> u f (\_3484-> (let _3485 = _3484 in (case _3485 of {(0,f) -> u f (\_3486 _3487-> (let _nams_6=_3486 in (let _defs_7=_3487 in (u io_print (u (u fm_defs_report _defs_7) _nams_6))))); }))); })))))
io_purify = (\_io_2-> (let _3488 = _io_2 in (case _3488 of {(0,f) -> u f (\_3489-> _3489); (1,f) -> u f (\_3490 _3491 _3492-> (u io_purify (u _3492 ""))); })))
fm_checker_code = (\_code_1-> (let _3493 = (u (u (u fm_defs_read "Main.fm") _code_1) map_new) in (case _3493 of {(0,f) -> u f (\_3494-> _3494); (1,f) -> u f (\_3495-> (u io_purify (let _defs_3=_3495 in (let _nams_4=(u (u list_mapped (u map_keys _defs_3)) fm_name_from_bits) in (u (u (u monad_bind io_monad) (u (u fm_synth_many _nams_4) _defs_3)) (\_defs_5-> (u (u monad_pure io_monad) (u (u fm_defs_report _defs_5) _nams_4)))))))); })))
fm_term_read = (\_code_1-> (let _3496 = (u (u fm_parser_term 0) _code_1) in (case _3496 of {(0,f) -> u f (\_3497 _3498 _3499-> maybe_none); (1,f) -> u f (\_3500 _3501 _3502-> (u maybe_some _3502)); })))
fm = (let ___1=fm_to_core_io_one in (let ___2=fm_checker_io_one in (let ___3=fm_checker_io_file in (let ___4=fm_checker_code in (let ___5=fm_term_read in (u fm_checker_io_file "Main.fm"))))))

