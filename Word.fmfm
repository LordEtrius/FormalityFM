type Word ~ (size: Nat) {
  nil                            ~ (size: Nat.zero),
  0<size: Nat>(pred: Word(size)) ~ (size: Nat.succ(size)),
  1<size: Nat>(pred: Word(size)) ~ (size: Nat.succ(size)),
}

Word.to_bits<size: Nat>(a: Word(size)): Bits
  case a {
    nil: Bits.nil,
    0: Bits.0(Word.to_bits<a.size>(a.pred)),
    1: Bits.1(Word.to_bits<a.size>(a.pred)),
  }

Word.from_bits(size: Nat, bits: Bits): Word(size)
  case size {
    zero: Word.nil,
    succ: case bits {
      nil: Word.0<size.pred>(Word.from_bits(size.pred, Bits.nil)),
       0 : Word.0<size.pred>(Word.from_bits(size.pred, bits.pred)),
       1 : Word.1<size.pred>(Word.from_bits(size.pred, bits.pred))
    } : Word(Nat.succ(size.pred))
  } : Word(size)

Word.zero(size: Nat): Word(size)
  case size {
    zero: Word.nil,
    succ: Word.0<size.pred>(Word.zero(size.pred))
  } : Word(size)

Word.cmp.go<size: Nat>(a: Word(size), b: Word(size), c: Cmp): Cmp
  case a with b : Word(a.size) = b {
    nil: c,
    0 : case b with a.pred : Word(Nat.pred(b.size)) = a.pred {
      nil: c,
      0  : Word.cmp.go<b.size>(a.pred, b.pred, c),
      1  : Word.cmp.go<b.size>(a.pred, b.pred, Cmp.ltn)
    },
    1: case b with a.pred : Word(Nat.pred(b.size)) = a.pred {
      nil: c,
      0  : Word.cmp.go<b.size>(a.pred, b.pred, Cmp.gtn),
      1  : Word.cmp.go<b.size>(a.pred, b.pred, c)
    }
  }

// Right fold a word
Word.fold<P: Nat -> Type, m: Nat>(
  nil  : P(Nat.zero),
  w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)),
  w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)),
  word : Word(m)
) : P(m)
  case word {
    nil: nil,
     0 : w0<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred)),
     1 : w1<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred))
  } : P(word.size)

// Left fold a word
Word.foldl<P: Nat -> Type, m: Nat>(
  nil  : P(Nat.zero),
  w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)),
  w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)),
  word : Word(m),
) : P(m)
  case word {
    nil:
      nil,
    0: 
      def P   = (n) P(Nat.succ(n));
      def nil = w0<Nat.zero>(nil);
      def w0  = <x> w0<Nat.succ(x)>;
      def w1  = <x> w1<Nat.succ(x)>;
      Word.foldl<P, word.size>(nil, w0, w1, word.pred),
    1: 
      def P   = (n) P(Nat.succ(n));
      def nil = w1<Nat.zero>(nil);
      def w0  = <x> w0<Nat.succ(x)>;
      def w1  = <x> w1<Nat.succ(x)>;
      Word.foldl<P, word.size>(nil, w0, w1, word.pred),
  } : P(word.size)

Word.trim<size: Nat>(new_size: Nat, word: Word(size)): Word(new_size)
  case new_size {
    zero: Word.nil,
    succ: case word {
      nil: Word.0<new_size.pred>(Word.trim<Nat.zero>(new_size.pred, Word.nil)),
       0 : Word.0<new_size.pred>(Word.trim<word.size>(new_size.pred, word.pred)),
       1 : Word.1<new_size.pred>(Word.trim<word.size>(new_size.pred, word.pred))
    }
  } : Word(new_size)

Word.adder<size: Nat>(a: Word(size), b: Word(size), c: Bool): Word(size)
  case a with b: Word(a.size) = b {
    nil: Word.nil,
    0 : case b with a.pred: Word(Nat.pred(b.size)) = a.pred {
      nil: Word.nil,
      0: case c {
        true : Word.1<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.false)),
        false: Word.0<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.false)),
      },
      1: case c {
        true:  Word.0<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.1<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.false)),
      }
    } : Word(b.size),
    1: case b with a.pred: Word(Nat.pred(b.size)) = a.pred {
      nil: Word.nil,
      0: case c {
        true : Word.0<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.1<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.false)),
      },
      1: case c {
        true : Word.1<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.0<b.size>(Word.adder<b.size>(a.pred, b.pred, Bool.true)),
      }
    } : Word(b.size)
  } : Word(a.size)

Word.subber<size: Nat>(a: Word(size), b: Word(size), c: Bool): Word(size)
  case a with b: Word(a.size) = b {
    nil: Word.nil,
    0 : case b with a.pred: Word(Nat.pred(b.size)) = a.pred {
      nil: Word.nil,
      0: case c {
        true : Word.1<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.0<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.false)),
      },
      1: case c {
        true:  Word.0<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.1<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.true)),
      }
    } : Word(b.size),
    1: case b with a.pred: Word(Nat.pred(b.size)) = a.pred {
      nil: Word.nil,
      0: case c {
        true : Word.0<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.false)),
        false: Word.1<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.false)),
      },
      1: case c {
        true : Word.1<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.true)),
        false: Word.0<b.size>(Word.subber<b.size>(a.pred, b.pred, Bool.false)),
      }
    } : Word(b.size)
  } : Word(a.size)

// ++a
Word.inc<size: Nat>(word: Word(size)): Word(size)
  case word {
    nil: Word.nil,
     0 : Word.1<word.size>(word.pred),
     1 : Word.0<word.size>(Word.inc<word.size>(word.pred))
  } : Word(word.size)

// a + b
Word.add<size: Nat>(a: Word(size), b: Word(size)): Word(size)
  Word.adder<size>(a)(b)(Bool.false)

// a - b
Word.sub<size: Nat>(a: Word(size), b: Word(size)): Word(size)
  Word.subber<size>(a, b, Bool.false)

// a ? b
Word.cmp<size: Nat>(a: Word(size), b: Word(size)): Cmp
  Word.cmp.go<size>(a, b, Cmp.eql)

// a <= b
Word.lte<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_lte(Word.cmp<size>(a, b))

// a < b
Word.ltn<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_ltn(Word.cmp<size>(a, b))

// a == b
Word.eql<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_eql(Word.cmp<size>(a, b))

// a >= b
Word.gte<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_gte(Word.cmp<size>(a, b))

// a > b
Word.gtn<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_gtn(Word.cmp<size>(a, b))

// a <= b <= c
Word.btw<size:Nat>(a: Word(size), b: Word(size), c: Word(size)): Bool
  Bool.and(Word.lte<size>(a, b), Word.lte<size>(b, c))

